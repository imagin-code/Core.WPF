//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float Angle;
//   float4 Color1;
//   float4 Color10;
//   float4 Color11;
//   float4 Color12;
//   float4 Color13;
//   float4 Color14;
//   float4 Color15;
//   float4 Color16;
//   float4 Color2;
//   float4 Color3;
//   float4 Color4;
//   float4 Color5;
//   float4 Color6;
//   float4 Color7;
//   float4 Color8;
//   float4 Color9;
//   float Length;
//   float Offset1;
//   float Offset10;
//   float Offset11;
//   float Offset12;
//   float Offset13;
//   float Offset14;
//   float Offset15;
//   float Offset16;
//   float Offset2;
//   float Offset3;
//   float Offset4;
//   float Offset5;
//   float Offset6;
//   float Offset7;
//   float Offset8;
//   float Offset9;
//   float Opacity;
//   float Progress;
//   float Scale;
//   float Thickness;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   Progress     c0       1
//   Opacity      c1       1
//   Angle        c2       1
//   Scale        c7       1
//   Thickness    c8       1
//   Color1       c9       1
//   Offset1      c10      1
//   Color2       c11      1
//   Offset2      c12      1
//   Color3       c13      1
//   Offset3      c14      1
//   Color4       c15      1
//   Offset4      c16      1
//   Color5       c17      1
//   Offset5      c18      1
//   Color6       c19      1
//   Offset6      c20      1
//   Color7       c21      1
//   Offset7      c22      1
//   Color8       c23      1
//   Offset8      c24      1
//   Color9       c25      1
//   Offset9      c26      1
//   Color10      c27      1
//   Offset10     c28      1
//   Color11      c29      1
//   Offset11     c30      1
//   Color12      c31      1
//   Offset12     c32      1
//   Color13      c33      1
//   Offset13     c34      1
//   Color14      c35      1
//   Offset14     c36      1
//   Color15      c37      1
//   Offset15     c38      1
//   Color16      c39      1
//   Offset16     c40      1
//   Length       c41      1
//

    ps_3_0
    def c3, 0.5, 1, 0, -0.5
    def c4, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
    def c5, 0.999866009, -2, 1.57079637, 0.0174532942
    def c6, -0, -3.14159274, 3.14159274, 6.28318548
    def c42, 0.159154937, 0.00100000005, 0, 0
    dcl_texcoord v0.xy  // uv<0,1>

#line 87 "C:\Users\james\GitHub\Core.WPF\Core.WPF\Effects\AngleGradientEffect.fx"
    add r0.xy, c3.x, -v0
    mul r0.xy, r0_abs, r0_abs
    add r0.x, r0.y, r0.x
    rsq r0.x, r0.x
    rcp r0.x, r0.x  // ::GetDistance<0>

#line 262
    mov r1.xyz, c3
    mad r0.y, c8.x, -r1.x, r1.x
    add r0.y, -r0.y, r0.x
    add r0.x, -r0.x, c3.x
    cmp r0.x, r0.x, c3.y, c3.z
    cmp r0.x, r0.y, r0.x, c3.z
    if_ne r0.x, -r0.x

#line 245
      add r0.xy, c3.w, v0
      add r0.zw, -r0_abs.xyxy, r0_abs.xyyx
      cmp r1.xw, r0.z, r0_abs.xyzy, r0_abs.yyzx
      rcp r0.z, r1.w
      mul r0.z, r0.z, r1.x
      mul r1.x, r0.z, r0.z
      mad r1.w, r1.x, c4.x, c4.y
      mad r1.w, r1.x, r1.w, c4.z
      mad r1.w, r1.x, r1.w, c4.w
      mad r1.x, r1.x, r1.w, c5.x
      mul r0.z, r0.z, r1.x
      cmp r0.w, r0.w, c3.z, c3.y
      mad r1.x, r0.z, c5.y, c5.z
      mad r0.z, r1.x, r0.w, r0.z
      cmp r0.w, r0.x, c6.x, c6.y
      add r0.z, r0.w, r0.z
      add r0.w, -r0.x, r0.y
      cmp r0.xy, r0.w, r0, r0.yxzw
      cmp r0.y, r0.y, c3.y, c3.z
      cmp r0.x, r0.x, c3.z, r0.y
      add r0.y, r0.z, r0.z
      mad r0.x, r0.x, -r0.y, r0.z
      mov r0.yw, c5
      mad r0.x, c2.x, r0.w, r0.x  // ::t<0>

#line 248
      add r0.xz, r0.x, c6.zyyw  // ::t<0,0>
      add r0.w, -r0.x, c6.w
      cmp r0.x, r0.w, r0.x, r0.z  // ::t<0>
      mul r0.z, r0.x, c42.x  // ::t<0>

#line 265
      mov r1.x, c42.x
      mad r0.x, r0.x, -r1.x, c0.x
      cmp r0.x, r0.x, c3.y, c3.z
      if_ge c0.x, r0.z

#line 117
        add r0.w, r1.y, -c7.x

#line 125
        if_eq c41.x, r1.z

#line 132
          mov r2, c3.z  // ::color1<0,1,2,3>
          mov r1.xzw, c3.z  // ::color2<0,1,2>
          mov r3.xy, c3.zyzw  // ::offset1<0>, ::offset2<0>
        else
          if_eq c41.x, r1.y

#line 140
            mov r2, c9  // ::color1<0,1,2,3>
            mov r1.xzw, c9.xyyz  // ::color2<0,1,2>
            mov r3.xy, c3.zyzw  // ::offset1<0>, ::offset2<0>
          else
            if_eq c41.x, -r0.y

#line 148
              mov r2, c9  // ::color1<0,1,2,3>
              mov r1.xzw, c11.xyyz  // ::color2<0,1,2>
              mov r3.xy, c3.zyzw  // ::offset1<0>, ::offset2<0>
            else

#line 151
              mad r0.y, r0.z, r0.w, -c10.x
              mad r1.y, r0.z, r0.w, -c12.x
              cmp r3.z, r1.y, c3.z, c3.y
              cmp r0.y, r0.y, r3.z, c3.z
              if_ne r0.y, -r0.y

#line 155
                mov r2, c9  // ::color1<0,1,2,3>
                mov r1.xzw, c11.xyyz  // ::color2<0,1,2>
                mov r3.x, c10.x  // ::offset1<0>
                mov r3.y, c12.x  // ::offset2<0>
              else
                mad r0.y, r0.z, r0.w, -c14.x
                cmp r3.z, r0.y, c3.z, c3.y
                cmp r1.y, r1.y, r3.z, c3.z
                if_ne r1.y, -r1.y

#line 160
                  mov r2, c11  // ::color1<0,1,2,3>
                  mov r1.xzw, c13.xyyz  // ::color2<0,1,2>
                  mov r3.x, c12.x  // ::offset1<0>
                  mov r3.y, c14.x  // ::offset2<0>
                else
                  mad r1.y, r0.z, r0.w, -c16.x
                  cmp r3.z, r1.y, c3.z, c3.y
                  cmp r0.y, r0.y, r3.z, c3.z
                  if_ne r0.y, -r0.y

#line 165
                    mov r2, c13  // ::color1<0,1,2,3>
                    mov r1.xzw, c15.xyyz  // ::color2<0,1,2>
                    mov r3.x, c14.x  // ::offset1<0>
                    mov r3.y, c16.x  // ::offset2<0>
                  else
                    mad r0.y, r0.z, r0.w, -c18.x
                    cmp r3.z, r0.y, c3.z, c3.y
                    cmp r1.y, r1.y, r3.z, c3.z
                    if_ne r1.y, -r1.y

#line 170
                      mov r2, c15  // ::color1<0,1,2,3>
                      mov r1.xzw, c17.xyyz  // ::color2<0,1,2>
                      mov r3.x, c16.x  // ::offset1<0>
                      mov r3.y, c18.x  // ::offset2<0>
                    else
                      mad r1.y, r0.z, r0.w, -c20.x
                      cmp r3.z, r1.y, c3.z, c3.y
                      cmp r0.y, r0.y, r3.z, c3.z
                      if_ne r0.y, -r0.y

#line 175
                        mov r2, c17  // ::color1<0,1,2,3>
                        mov r1.xzw, c19.xyyz  // ::color2<0,1,2>
                        mov r3.x, c18.x  // ::offset1<0>
                        mov r3.y, c20.x  // ::offset2<0>
                      else
                        mad r0.y, r0.z, r0.w, -c22.x
                        cmp r3.z, r0.y, c3.z, c3.y
                        cmp r1.y, r1.y, r3.z, c3.z
                        if_ne r1.y, -r1.y

#line 180
                          mov r2, c19  // ::color1<0,1,2,3>
                          mov r1.xzw, c21.xyyz  // ::color2<0,1,2>
                          mov r3.x, c20.x  // ::offset1<0>
                          mov r3.y, c22.x  // ::offset2<0>
                        else
                          mad r1.y, r0.z, r0.w, -c24.x
                          cmp r3.z, r1.y, c3.z, c3.y
                          cmp r0.y, r0.y, r3.z, c3.z
                          if_ne r0.y, -r0.y

#line 185
                            mov r2, c21  // ::color1<0,1,2,3>
                            mov r1.xzw, c23.xyyz  // ::color2<0,1,2>
                            mov r3.x, c22.x  // ::offset1<0>
                            mov r3.y, c24.x  // ::offset2<0>
                          else
                            mad r0.y, r0.z, r0.w, -c26.x

#line 191
                            mad r3.z, r0.z, r0.w, -c28.x

#line 196
                            mad r3.w, r0.z, r0.w, -c30.x

#line 201
                            mad r4.x, r0.z, r0.w, -c32.x

#line 206
                            mad r4.y, r0.z, r0.w, -c34.x

#line 211
                            mad r4.z, r0.z, r0.w, -c36.x

#line 216
                            mad r4.w, r0.z, r0.w, -c38.x

#line 225
                            cmp r4.w, r4.w, -c3.z, -c3.y
                            cmp r4.w, r4.z, r4.w, c3.z
                            mov r5, c37  // ::Color15<0,1,2,3>
                            cmp r6, r4.w, r5, c35  // ::color1<0,1,2,3>
                            cmp r5.xyz, r4.w, c39, r5  // ::color2<0,1,2>
                            mov r7.xz, c36.x
                            mov r5.w, c38.x
                            cmp r8.x, r4.w, c38.x, r7.x  // ::offset1<0>
                            cmp r8.y, r4.w, c40.x, r5.w  // ::offset2<0>
                            cmp r4.z, r4.z, -c3.z, -c3.y
                            cmp r4.z, r4.y, r4.z, c3.z
                            cmp r6, r4.z, r6, c33  // ::color1<0,1,2,3>
                            cmp r5.xyz, r4.z, r5, c35  // ::color2<0,1,2>
                            mov r7.y, c34.x
                            cmp r4.zw, r4.z, r8.xyxy, r7.xyyz  // ::offset1<0>, ::offset2<0>
                            cmp r4.y, r4.y, -c3.z, -c3.y
                            cmp r4.y, r4.x, r4.y, c3.z
                            cmp r6, r4.y, r6, c31  // ::color1<0,1,2,3>
                            cmp r5.xyz, r4.y, r5, c33  // ::color2<0,1,2>
                            mov r7.xw, c32.x
                            mov r7.y, c34.x
                            cmp r4.yz, r4.y, r4.xzww, r7.xxyw  // ::offset1<0>, ::offset2<0>
                            cmp r4.x, r4.x, -c3.z, -c3.y
                            cmp r4.x, r3.w, r4.x, c3.z
                            cmp r6, r4.x, r6, c29  // ::color1<0,1,2,3>
                            cmp r5.xyz, r4.x, r5, c31  // ::color2<0,1,2>
                            mov r7.yz, c30.x
                            cmp r4.xy, r4.x, r4.yzzw, r7.zwzw  // ::offset1<0>, ::offset2<0>
                            cmp r3.w, r3.w, -c3.z, -c3.y
                            cmp r3.w, r3.z, r3.w, c3.z
                            cmp r6, r3.w, r6, c27  // ::color1<0,1,2,3>
                            cmp r5.xyz, r3.w, r5, c29  // ::color2<0,1,2>
                            mov r7.xw, c28.x
                            cmp r4.xy, r3.w, r4, r7  // ::offset1<0>, ::offset2<0>
                            cmp r3.z, r3.z, -c3.z, -c3.y
                            cmp r3.z, r0.y, r3.z, c3.z
                            cmp r6, r3.z, r6, c25  // ::color1<0,1,2,3>
                            cmp r5.xyz, r3.z, r5, c27  // ::color2<0,1,2>
                            mov r7.z, c26.x
                            cmp r3.zw, r3.z, r4.xyxy, r7  // ::offset1<0>, ::offset2<0>
                            cmp r0.y, r0.y, -c3.z, -c3.y
                            cmp r0.y, r1.y, r0.y, c3.z
                            cmp r2, r0.y, r6, c23  // ::color1<0,1,2,3>
                            cmp r1.xzw, r0.y, r5.xyyz, c25.xyyz  // ::color2<0,1,2>
                            mov r4.x, c24.x
                            mov r4.y, c26.x
                            cmp r3.xy, r0.y, r3.zwzw, r4  // ::offset1<0>, ::offset2<0>
                          endif
                        endif
                      endif
                    endif
                  endif
                endif
              endif
            endif
          endif
        endif
        add r0.y, -r3.x, r3.y  // ::q<0>
        mad r0.z, r0.z, r0.w, -r3.x
        rcp r0.w, r0.y
        mul r0.z, r0.w, r0.z
        cmp r0.y, -r0_abs.y, c3.z, r0.z  // ::p<0>

#line 99
        cmp r0.zw, -r1_abs.xyxz, c42.y, r1.xyxz  // Blend::blendColor<0,1>
        cmp r1.x, -r1_abs.w, c42.y, r1.w  // Blend::blendColor<2>

#line 106
        add r1.y, -r0.y, c3.y
        add r1.z, -r2.w, c3.y
        mad r1.z, r1.y, -r1.z, c3.y  // ::result<3>
        mul r0.z, r0.y, r0.z
        rcp r1.z, r1.z
        mul r2.xyz, r2.w, r2
        mul r2.xyz, r1.y, r2
        mul r2.xyz, r1.z, r2
        mad r3.x, r0.z, r1.z, r2.x  // ::result<0>
        mul r0.z, r0.y, r0.w
        mad r3.y, r0.z, r1.z, r2.y  // ::result<1>
        mul r0.y, r0.y, r1.x
        mad r3.z, r0.y, r1.z, r2.z  // ::result<2>

#line 270
        mov r3.w, c1.x
      else
        mov r3, c3.z
      endif
    else
      mov r3, c3.z
      mov r0.x, c3.z
    endif
    cmp oC0, -r0.x, c3.z, r3  // ::main<0,1,2,3>

// approximately 241 instruction slots used
