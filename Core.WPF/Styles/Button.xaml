<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:g="urn:gong-wpf-dragdrop"
    xmlns:l="http://wpflocalizeextension.codeplex.com"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Conversion="clr-namespace:Imagin.Core.Conversion"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Markup="clr-namespace:Imagin.Core.Markup"
    xmlns:Storage="clr-namespace:Imagin.Core.Storage">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=Control}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Explorer}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Menu}"/>
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="{x:Static Linq:XButton.DefaultStyleKey}" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Border.CornerRadius" Value="0.5"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Cursor" Value="Arrow" />
        <Setter Property="FontFamily" Value="{Data:Options FontFamily}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Padding" Value="24,6" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border x:Name="Border"
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding Border.CornerRadius}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,*"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <local:ImageElement Source="{Data:TemplatedParent Path=(Linq:XButton.Image)}"
                                    Margin="0,0,5,0"
                                    Visibility="{Data:VisibilityBinding Path=(Linq:XButton.Image), From=TemplatedParent}"/>
                                <ContentPresenter/>
                            </Grid>
                        </Border>
                        <Popup IsOpen="{Data:TemplatedParent Path=(Linq:XButton.IsChecked), Mode=TwoWay}" 
                            Placement="Bottom" 
                            PlacementTarget="{Binding ElementName=Border}" 
                            StaysOpen="True">
                            <local:PopupBorder
                                MaxHeight="{Data:TemplatedParent Path=(Linq:XButton.MenuMaxHeight)}"
                                MaxWidth="{Data:TemplatedParent Path=(Linq:XButton.MenuMaxWidth)}"
                                MinWidth="{Data:TemplatedParent Path=(Linq:XButton.MenuMinWidth)}">
                                <ContentPresenter Content="{Data:TemplatedParent Path=(Linq:XButton.Menu)}" 
                                    ContentTemplate="{Data:TemplatedParent Path=(Linq:XButton.MenuTemplate)}"/>
                            </local:PopupBorder>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{x:Static Linq:XElement.DisabledOpacity}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- /// -->

    <Style x:Key="{x:Type Button}" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Static Linq:XButton.DefaultStyleKey}}">
        <Setter Property="Background" Value="{local:ThemeKey ButtonBackground}" />
        <Setter Property="BorderBrush" Value="{local:ThemeKey ButtonBorder}" />
        <Setter Property="Foreground" Value="{local:ThemeKey ButtonForeground}" />
        <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ButtonForeground}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{local:ThemeKey ButtonMouseOverBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ButtonMouseOverBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ButtonMouseOverForeground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{local:ThemeKey ButtonMouseDownBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ButtonMouseDownBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ButtonMouseDownForeground}" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDefault" Value="True"/>
                    <Condition Property="IsMouseOver" Value="False"/>
                    <Condition Property="IsPressed" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ButtonDefaultBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ButtonDefaultBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ButtonDefaultForeground}" />
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ButtonDefaultForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDefault" Value="True"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ButtonDefaultMouseOverBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ButtonDefaultMouseOverBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ButtonDefaultMouseOverForeground}" />
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ButtonDefaultMouseOverForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDefault" Value="True"/>
                    <Condition Property="IsPressed" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ButtonDefaultPressedBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ButtonDefaultPressedBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ButtonDefaultPressedForeground}" />
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ButtonDefaultPressedForeground}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsCancel" Value="True"/>
                    <Condition Property="IsMouseOver" Value="False"/>
                    <Condition Property="IsPressed" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ButtonCancelBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ButtonCancelBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ButtonCancelForeground}" />
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ButtonCancelForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsCancel" Value="True"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ButtonCancelMouseOverBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ButtonCancelMouseOverBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ButtonCancelMouseOverForeground}" />
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ButtonCancelMouseOverForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsCancel" Value="True"/>
                    <Condition Property="IsPressed" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ButtonCancelPressedBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ButtonCancelPressedBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ButtonCancelPressedForeground}" />
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ButtonCancelPressedForeground}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- /// -->

    <Style x:Key="{x:Static Linq:XButton.BlackButton}" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Static Linq:XButton.DefaultStyleKey}}">
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Offset="0" Color="#222"/>
                    <GradientStop Offset="1" Color="#333"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="#111" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="local:ImageElement.Foreground" Value="White" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                            <GradientStop Offset="0" Color="#333"/>
                            <GradientStop Offset="1" Color="#444"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderBrush" Value="#222" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                            <GradientStop Offset="0" Color="#111"/>
                            <GradientStop Offset="1" Color="#222"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderBrush" Value="#000" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static Linq:XButton.BlueButton}" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Static Linq:XButton.DefaultStyleKey}}">
        <Setter Property="Background" Value="#07c" />
        <Setter Property="BorderBrush" Value="#06b" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="local:ImageElement.Foreground" Value="White" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#06c" />
                <Setter Property="BorderBrush" Value="#05b" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#05c" />
                <Setter Property="BorderBrush" Value="#04b" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static Linq:XButton.GreenButton}" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Static Linq:XButton.DefaultStyleKey}}">
        <Setter Property="Background" Value="#3A3" />
        <Setter Property="BorderBrush" Value="#393" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="local:ImageElement.Foreground" Value="White" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#393" />
                <Setter Property="BorderBrush" Value="#383" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#383" />
                <Setter Property="BorderBrush" Value="#373" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static Linq:XButton.OrangeButton}" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Static Linq:XButton.DefaultStyleKey}}">
        <Setter Property="Background" Value="#F80" />
        <Setter Property="BorderBrush" Value="#F70" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="local:ImageElement.Foreground" Value="White" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#F70" />
                <Setter Property="BorderBrush" Value="#F60" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#F60" />
                <Setter Property="BorderBrush" Value="#F50" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static Linq:XButton.RedButton}" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Static Linq:XButton.DefaultStyleKey}}">
        <Setter Property="Background" Value="#C30" />
        <Setter Property="BorderBrush" Value="#B30" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="local:ImageElement.Foreground" Value="White" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#B30" />
                <Setter Property="BorderBrush" Value="#A30" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#A30" />
                <Setter Property="BorderBrush" Value="#930" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static Linq:XButton.TransparentButton}" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Static Linq:XButton.DefaultStyleKey}}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Padding" Value="0" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- /// -->

    <Style x:Key="{x:Type local:TokenButton}" TargetType="{x:Type local:TokenButton}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Margin" Value="0,0,5,0"/>
        <Setter Property="Padding" Value="5,3"/>
    </Style>

    <Style x:Key="{x:Type local:WindowButton}" TargetType="{x:Type local:WindowButton}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="{local:ThemeKey WindowButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{local:ThemeKey WindowButtonBorder}"/>
        <Setter Property="Border.CornerRadius" Value="0"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ContentSize" Value="16,16"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:ImageElement DataContext="{Data:Ancestor local:WindowButton}"
                        IsHitTestVisible="False"
                        Source="{Binding Content}"
                        SourceSize="{Binding ContentSize}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{local:ThemeKey WindowButtonForeground}"/>
        <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey WindowButtonForeground}" />
        <Setter Property="Padding" Value="7,5" />
        <Setter Property="Window.IsHitTestVisible" Value="True"/>
        <Style.Triggers>
            <!-- ... Default -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{local:ThemeKey WindowButtonMouseOverBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey WindowButtonMouseOverBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey WindowButtonMouseOverForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey WindowButtonMouseOverForeground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{local:ThemeKey WindowButtonPressedBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey WindowButtonPressedBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey WindowButtonPressedForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey WindowButtonPressedForeground}" />
            </Trigger>
            <!-- /// -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsDefault" Value="True"/>
                    <Condition Property="IsMouseOver" Value="False"/>
                    <Condition Property="IsPressed" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey WindowButtonBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey WindowButtonBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey WindowButtonForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey WindowButtonForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsDefault" Value="True"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey WindowButtonMouseOverBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey WindowButtonMouseOverBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey WindowButtonMouseOverForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey WindowButtonMouseOverForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsDefault" Value="True"/>
                    <Condition Property="IsPressed" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey WindowButtonPressedBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey WindowButtonPressedBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey WindowButtonPressedForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey WindowButtonPressedForeground}" />
            </MultiTrigger>
            <!-- /// -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsCancel" Value="True"/>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsMouseOver" Value="False"/>
                    <Condition Property="IsPressed" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey WindowButtonBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey WindowButtonBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey WindowButtonForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey WindowButtonForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsCancel" Value="True"/>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey WindowButtonMouseOverBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey WindowButtonMouseOverBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey WindowButtonMouseOverForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey WindowButtonMouseOverForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsCancel" Value="True"/>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsPressed" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey WindowButtonPressedBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey WindowButtonPressedBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey WindowButtonPressedForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey WindowButtonPressedForeground}" />
            </MultiTrigger>
            <!-- ... WindowButton -->
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{local:ThemeKey WindowButtonCheckedBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey WindowButtonCheckedBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey WindowButtonCheckedForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey WindowButtonCheckedForeground}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- /// -->

    <Style x:Key="{x:Type local:ImageButton}" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Background" Value="{local:ThemeKey ImageButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{local:ThemeKey ImageButtonBorder}"/>
        <Setter Property="Border.CornerRadius" Value="2"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ButtonMargin" Value="3,0,0,0" />
        <Setter Property="ButtonSize" Value="12,12"/>
        <Setter Property="ButtonSource" Value="{Markup:SmallImage TriangleDown.png}"/>
        <Setter Property="ButtonToolTip" Value="{x:Null}" />
        <Setter Property="ButtonVisibility" Value="Collapsed" />
        <Setter Property="ContentMargin" Value="0" />
        <Setter Property="Cursor" Value="Arrow" />
        <Setter Property="Foreground" Value="{local:ThemeKey ImageButtonForeground}"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="SourceSize" Value="16,16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:ImageButton">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        Padding="{TemplateBinding Padding}">
                        <Grid Linq:XGrid.Columns="Auto,Auto,Auto">
                            <local:ImageElement
                                Source="{TemplateBinding Source}"
                                SourceSize="{TemplateBinding SourceSize}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Visibility="{Data:TemplatedParent Source, Convert={x:Type Conversion:ObjectToVisibilityConverter}}"/>

                            <ContentPresenter Grid.Column="1"
                                Margin="{TemplateBinding ContentMargin}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <ContentPresenter.Visibility>
                                    <Data:MultiBind Convert="{x:Type Conversion:BooleanToVisibilityMultiConverter}" Mode="OneWay">
                                        <Data:TemplatedParent Convert="{x:Type Conversion:IsNullConverter}" ConverterParameter="1" Path="Content"/>
                                        <Data:TemplatedParent Path="ContentVisibility"/>
                                    </Data:MultiBind>
                                </ContentPresenter.Visibility>
                            </ContentPresenter>

                            <ContentPresenter x:Name="Button" Grid.Column="2" Content="{Markup:True}" 
                                ContentTemplate="{Markup:EmptyTemplate}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ButtonVisibility" Value="Visible">
                            <Setter TargetName="Button" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <local:RotateElement DataContext="{Data:Ancestor local:ImageButton}"
                                            Cursor="Hand"
                                            Margin="{Binding ButtonMargin}"
                                            Rotate="{Binding IsChecked}"
                                            Rotation="-90,0"
                                            ToolTip="{Binding ButtonToolTip}"
                                            VerticalAlignment="{Binding VerticalContentAlignment}">
                                            <local:ImageElement
                                                Foreground="{Binding Path=(local:ImageElement.Foreground)}"
                                                Source="{Binding ButtonSource}"
                                                SourceSize="{Binding ButtonSize}"/>
                                        </local:RotateElement>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="Auto" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasMenu" Value="True"/>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" 
                    Value="{local:ThemeKey ImageButtonMouseOverBackground}"/>
                <Setter Property="BorderBrush" 
                    Value="{local:ThemeKey ImageButtonMouseOverBorder}"/>
                <Setter Property="Foreground" 
                    Value="{local:ThemeKey ImageButtonMouseOverForeground}"/>
                <Setter Property="local:ImageElement.Foreground" 
                    Value="{local:ThemeKey ImageButtonMouseOverForeground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasMenu" Value="True"/>
                    <Condition Property="IsChecked" Value="True"/>
                    <Condition Property="IsMouseOver" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" 
                    Value="{local:ThemeKey ImageButtonCheckedBackground}"/>
                <Setter Property="BorderBrush" 
                    Value="{local:ThemeKey ImageButtonCheckedBorder}"/>
                <Setter Property="Foreground" 
                    Value="{local:ThemeKey ImageButtonCheckedForeground}"/>
                <Setter Property="local:ImageElement.Foreground" 
                    Value="{local:ThemeKey ImageButtonCheckedForeground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasMenu" Value="True"/>
                    <Condition Property="IsPressed" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" 
                    Value="{local:ThemeKey ImageButtonPressedBackground}"/>
                <Setter Property="BorderBrush" 
                    Value="{local:ThemeKey ImageButtonPressedBorder}"/>
                <Setter Property="Foreground" 
                    Value="{local:ThemeKey ImageButtonPressedForeground}"/>
                <Setter Property="local:ImageElement.Foreground" 
                    Value="{local:ThemeKey ImageButtonPressedForeground}"/>
            </MultiTrigger>
            <!-- /// -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasMenu" Value="False"/>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" 
                    Value="Transparent"/>
                <Setter Property="BorderBrush" 
                    Value="Transparent"/>
                <Setter Property="Foreground"
                    Value="{local:ThemeKey ImageButtonMouseOver}"/>
                <Setter Property="local:ImageElement.Foreground" 
                    Value="{local:ThemeKey ImageButtonMouseOver}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasMenu" Value="False"/>
                    <Condition Property="IsChecked" Value="True"/>
                    <Condition Property="IsMouseOver" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" 
                    Value="Transparent"/>
                <Setter Property="BorderBrush" 
                    Value="Transparent"/>
                <Setter Property="Foreground" 
                    Value="{local:ThemeKey ImageButtonChecked}"/>
                <Setter Property="local:ImageElement.Foreground" 
                    Value="{local:ThemeKey ImageButtonChecked}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasMenu" Value="False"/>
                    <Condition Property="IsPressed" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" 
                    Value="Transparent"/>
                <Setter Property="BorderBrush" 
                    Value="Transparent"/>
                <Setter Property="Foreground" 
                    Value="{local:ThemeKey ImageButtonPressed}"/>
                <Setter Property="local:ImageElement.Foreground" 
                    Value="{local:ThemeKey ImageButtonPressed}"/>
            </MultiTrigger>
            <!-- /// -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Self Content, Convert={x:Type Conversion:IsNullConverter}}" Value="False"/>
                    <Condition Binding="{Data:Self ContentVisibility}" Value="Visible"/>
                    <Condition Binding="{Data:Self Source, Convert={x:Type Conversion:IsNullConverter}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="ContentMargin" Value="3,0,0,0"/>
            </MultiDataTrigger>
            <!-- /// -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ButtonVisibility" Value="Visible"/>
                    <Condition Property="Content" Value="{x:Null}"/>
                    <Condition Property="Source" Value="{x:Null}"/>
                </MultiTrigger.Conditions>
                <Setter Property="ButtonMargin" Value="0"/>
            </MultiTrigger>
            <!-- /// -->
            <Trigger Property="HasMenu" Value="True">
                <Setter Property="Padding" Value="3" />
            </Trigger>
            <Trigger Property="HasMenu" Value="False">
                <Setter Property="Padding" Value="0" />
            </Trigger>
            <!-- /// -->
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{x:Static Linq:XElement.DisabledOpacity}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type local:FolderButton}" TargetType="{x:Type local:FolderButton}" BasedOn="{StaticResource {x:Type local:ImageButton}}">
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="ButtonVisibility" Value="{Data:CompareInt32Binding Items.Count, From=Self, Result=Visibility, Type=Greater}"/>
        <Setter Property="Content" Value="{Data:Self Path, Convert={x:Type Conversion:FileNameConverter}}"/>
        <Setter Property="g:DragDrop.IsDropTarget" Value="True"/>
        <Setter Property="ItemStyle">
            <Setter.Value>
                <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                    <Setter Property="Command" Value="{Data:Ancestor PlacementTarget.Command, {x:Type ContextMenu}}"/>
                    <Setter Property="CommandParameter" Value="{Binding Path}"/>
                    <Setter Property="Icon" Value="{Binding}"/>
                    <Setter Property="Linq:XMenuItem.IconTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <local:Thumbnail Path="{Binding Path}"/>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="Linq:XElement.ToolTipTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource {x:Static Linq:XExplorer.ToolTipTemplateKey}}"/>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="ToolTip" Value="{Binding Path}"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsHidden}" Value="True">
                            <Setter Property="Opacity" Value="{x:Static local:Explorer.HiddenOpacity}"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type Storage:Item}">
                    <TextBlock Text="{Data:Bind Path, Convert={x:Type Conversion:FileNameConverter}}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XControl.DropTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:DashedBorder
                        BorderBrush="{local:ThemeKey DropTargetBorder}"
                        BorderThickness="2">
                        <local:ImageElement Source="{Markup:SmallImage Plus.png}"
                            HorizontalAlignment="Center" 
                            VerticalAlignment="Center"/>
                    </local:DashedBorder>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XControl.DropTemplateVisibility" Value="Visible" />
        <Setter Property="Linq:XExplorer.CopyWarningTitle" Value="{Markup:Loc Copy}"/>
        <Setter Property="Linq:XExplorer.CopyWarningMessage" Value="{Markup:Loc Continue, Suffix=?}"/>
        <Setter Property="Linq:XExplorer.InvalidPathAlertMessage" Value="{Markup:Loc FolderDoesNotExist}"/>
        <Setter Property="Linq:XExplorer.InvalidPathAlertTitle" Value="{Markup:Loc FolderNotFound}"/>
        <Setter Property="Linq:XExplorer.MoveWarningTitle" Value="{Markup:Loc Move}"/>
        <Setter Property="Linq:XExplorer.MoveWarningMessage" Value="{Markup:Loc Continue, Suffix=?}"/>
        <Setter Property="Linq:XExplorer.WarnBeforeDrop" Value="True"/>
        <Setter Property="Linq:XElement.FadeIn" Value="True" />
        <Setter Property="Linq:XElement.ShellContextMenu" Value="{Data:Self Path}"/>
        <Setter Property="Linq:XElement.ToolTipTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource {x:Static Linq:XExplorer.ToolTipTemplateKey}}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ToolTip" Value="{Data:Self Path=(Linq:XExplorer.Path)}"/>
    </Style>
</ResourceDictionary>