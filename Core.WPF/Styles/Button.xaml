<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:g="urn:gong-wpf-dragdrop"
    xmlns:l="clr-namespace:Imagin.Core.Local.Extensions"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Conversion="clr-namespace:Imagin.Core.Conversion"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Markup="clr-namespace:Imagin.Core.Markup"
    xmlns:Storage="clr-namespace:Imagin.Core.Storage">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=Control}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Explorer}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Menu}"/>
    </ResourceDictionary.MergedDictionaries>
    <Style x:Key="{x:Type Button}" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Background" Value="{local:ThemeKey ActualKey=ButtonBackground}" />
        <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=ButtonBorder}" />
        <Setter Property="Border.CornerRadius" Value="0.5"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Cursor" Value="Arrow" />
        <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=ButtonForeground}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=ButtonForeground}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Padding" Value="24,6" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border 
                        Background="{TemplateBinding Background}" 
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{x:Static Linq:XElement.DisabledOpacity}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{local:ThemeKey Key=Button.MouseOver.Background}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey Key=Button.MouseOver.Border}" />
                <Setter Property="Foreground" Value="{local:ThemeKey Key=Button.MouseOver.Foreground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{local:ThemeKey Key=Button.MouseDown.Background}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey Key=Button.MouseDown.Border}" />
                <Setter Property="Foreground" Value="{local:ThemeKey Key=Button.MouseDown.Foreground}" />
            </Trigger>
            
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDefault" Value="True"/>
                    <Condition Property="IsMouseOver" Value="False"/>
                    <Condition Property="IsPressed" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=ButtonDefaultBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=ButtonDefaultBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=ButtonDefaultForeground}" />
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=ButtonDefaultForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDefault" Value="True"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=ButtonDefaultMouseOverBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=ButtonDefaultMouseOverBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=ButtonDefaultMouseOverForeground}" />
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=ButtonDefaultMouseOverForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDefault" Value="True"/>
                    <Condition Property="IsPressed" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=ButtonDefaultPressedBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=ButtonDefaultPressedBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=ButtonDefaultPressedForeground}" />
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=ButtonDefaultPressedForeground}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsCancel" Value="True"/>
                    <Condition Property="IsMouseOver" Value="False"/>
                    <Condition Property="IsPressed" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=ButtonCancelBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=ButtonCancelBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=ButtonCancelForeground}" />
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=ButtonCancelForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsCancel" Value="True"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=ButtonCancelMouseOverBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=ButtonCancelMouseOverBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=ButtonCancelMouseOverForeground}" />
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=ButtonCancelMouseOverForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsCancel" Value="True"/>
                    <Condition Property="IsPressed" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=ButtonCancelPressedBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=ButtonCancelPressedBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=ButtonCancelPressedForeground}" />
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=ButtonCancelPressedForeground}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- ... -->

    <Style x:Key="{x:Type local:TokenButton}" TargetType="{x:Type local:TokenButton}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Margin" Value="0,0,5,0"/>
        <Setter Property="Padding" Value="5,3"/>
    </Style>

    <Style x:Key="{x:Type local:WindowButton}" TargetType="{x:Type local:WindowButton}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="{local:ThemeKey ActualKey=WindowButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=WindowButtonBorder}"/>
        <Setter Property="Border.CornerRadius" Value="0"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ContentSize" Value="16,16"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:ImageElement DataContext="{Data:Ancestor local:WindowButton}"
                        IsHitTestVisible="False"
                        Source="{Binding Content}"
                        SourceSize="{Binding ContentSize}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=WindowButtonForeground}"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=WindowButtonForeground}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Width" Value="30"/>
        <Setter Property="Window.IsHitTestVisible" Value="True"/>
        <Style.Triggers>
            <!-- ... Default -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=WindowButtonMouseOverBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=WindowButtonMouseOverBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=WindowButtonMouseOverForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=WindowButtonMouseOverForeground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=WindowButtonPressedBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=WindowButtonPressedBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=WindowButtonPressedForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=WindowButtonPressedForeground}" />
            </Trigger>
            <!-- ... -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsDefault" Value="True"/>
                    <Condition Property="IsMouseOver" Value="False"/>
                    <Condition Property="IsPressed" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=WindowButtonBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=WindowButtonBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=WindowButtonForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=WindowButtonForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsDefault" Value="True"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=WindowButtonMouseOverBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=WindowButtonMouseOverBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=WindowButtonMouseOverForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=WindowButtonMouseOverForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsDefault" Value="True"/>
                    <Condition Property="IsPressed" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=WindowButtonPressedBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=WindowButtonPressedBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=WindowButtonPressedForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=WindowButtonPressedForeground}" />
            </MultiTrigger>
            <!-- ... -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsCancel" Value="True"/>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsMouseOver" Value="False"/>
                    <Condition Property="IsPressed" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=WindowButtonBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=WindowButtonBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=WindowButtonForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=WindowButtonForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsCancel" Value="True"/>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=WindowButtonMouseOverBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=WindowButtonMouseOverBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=WindowButtonMouseOverForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=WindowButtonMouseOverForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsCancel" Value="True"/>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsPressed" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=WindowButtonPressedBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=WindowButtonPressedBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=WindowButtonPressedForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=WindowButtonPressedForeground}" />
            </MultiTrigger>
            <!-- ... WindowButton -->
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=WindowButtonCheckedBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=WindowButtonCheckedBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=WindowButtonCheckedForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=WindowButtonCheckedForeground}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ... -->
    
    <Style x:Key="{x:Type local:ImageButton}" TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Background" Value="{local:ThemeKey Key=ImageButton.Background}"/>
        <Setter Property="BorderBrush" Value="{local:ThemeKey Key=ImageButton.Border}"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ButtonMargin" Value="3,0,0,0" />
        <Setter Property="ButtonSize" Value="12,12"/>
        <Setter Property="ButtonSource" Value="{Markup:InternalImage TriangleDown.png}"/>
        <Setter Property="ButtonToolTip" Value="{x:Null}" />
        <Setter Property="ButtonVisibility" Value="Collapsed" />
        <Setter Property="ContentMargin" Value="0" />
        <Setter Property="Cursor" Value="Arrow" />
        <Setter Property="Foreground" Value="{local:ThemeKey Key=ImageButton.Foreground}"/>
        <Setter Property="Border.CornerRadius" Value="2"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="SourceSize" Value="16,16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:ImageButton">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        Padding="{TemplateBinding Padding}">
                        <Grid Linq:XGrid.Columns="Auto,Auto,Auto">
                            <local:ImageElement
                                Source="{TemplateBinding Source}"
                                SourceSize="{TemplateBinding SourceSize}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Visibility="{TemplateBinding Source, Converter={x:Static Conversion:ObjectToVisibilityConverter.Default}}"/>

                            <ContentPresenter Grid.Column="1"
                                Margin="{TemplateBinding ContentMargin}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <ContentPresenter.Visibility>
                                    <MultiBinding Converter="{x:Static Conversion:BooleanToVisibilityMultiConverter.Default}" Mode="OneWay">
                                        <Data:TemplatedParent Converter="{x:Static Conversion:IsNullConverter.Default}" ConverterParameter="1" Path="Content"/>
                                        <Data:TemplatedParent Path="ContentVisibility"/>
                                    </MultiBinding>
                                </ContentPresenter.Visibility>
                            </ContentPresenter>

                            <local:RotateElement Grid.Column="2"
                                Cursor="Hand"
                                Margin="{TemplateBinding ButtonMargin}"
                                Rotate="{Data:TemplatedParent IsChecked}"
                                Rotation="-90,0"
                                ToolTip="{TemplateBinding ButtonToolTip}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Visibility="{TemplateBinding ButtonVisibility}">
                                <local:ImageElement Linq:XElement.Name="{x:Static local:ImageButton.ImageElementKey}"
                                    Foreground="{Data:TemplatedParent Path=(local:ImageElement.Foreground)}"
                                    Source="{TemplateBinding ButtonSource}"
                                    SourceSize="{TemplateBinding ButtonSize}"/>
                            </local:RotateElement>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="Auto" />
        <Style.Triggers>
            <Trigger Property="HasMenu" Value="True">
                <Setter Property="Padding" Value="3" />
            </Trigger>
            <Trigger Property="HasMenu" Value="False">
                <Setter Property="Padding" Value="0" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{x:Static Linq:XElement.DisabledOpacity}" />
            </Trigger>
            <!-- ... -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Self Content, Converter={x:Static Conversion:IsNullConverter.Default}}" Value="False"/>
                    <Condition Binding="{Data:Self ContentVisibility}" Value="Visible"/>
                    <Condition Binding="{Data:Self Source, Converter={x:Static Conversion:IsNullConverter.Default}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="ContentMargin" Value="3,0,0,0"/>
            </MultiDataTrigger>
            <!-- ... -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ButtonVisibility" Value="Visible"/>
                    <Condition Property="Content" Value="{x:Null}"/>
                    <Condition Property="Source" Value="{x:Null}"/>
                </MultiTrigger.Conditions>
                <Setter Property="ButtonMargin" Value="0"/>
            </MultiTrigger>
            <!-- ... -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasMenu" Value="True"/>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" 
                    Value="{local:ThemeKey Key=ImageButton.MouseOver.Background}"/>
                <Setter Property="BorderBrush" 
                    Value="{local:ThemeKey Key=ImageButton.MouseOver.Border}"/>
                <Setter Property="Foreground" 
                    Value="{local:ThemeKey Key=ImageButton.MouseOver.Foreground}"/>
                <Setter Property="local:ImageElement.Foreground" 
                    Value="{local:ThemeKey Key=ImageButton.MouseOver.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasMenu" Value="True"/>
                    <Condition Property="IsChecked" Value="True"/>
                    <Condition Property="IsMouseOver" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" 
                    Value="{local:ThemeKey Key=ImageButton.Checked.Background}"/>
                <Setter Property="BorderBrush" 
                    Value="{local:ThemeKey Key=ImageButton.Checked.Border}"/>
                <Setter Property="Foreground" 
                    Value="{local:ThemeKey Key=ImageButton.Checked.Foreground}"/>
                <Setter Property="local:ImageElement.Foreground" 
                    Value="{local:ThemeKey Key=ImageButton.Checked.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasMenu" Value="True"/>
                    <Condition Property="IsPressed" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" 
                    Value="{local:ThemeKey Key=ImageButton.Pressed.Background}"/>
                <Setter Property="BorderBrush" 
                    Value="{local:ThemeKey Key=ImageButton.Pressed.Border}"/>
                <Setter Property="Foreground" 
                    Value="{local:ThemeKey Key=ImageButton.Pressed.Foreground}"/>
                <Setter Property="local:ImageElement.Foreground" 
                    Value="{local:ThemeKey Key=ImageButton.Pressed.Foreground}"/>
            </MultiTrigger>
            <!-- ... -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasMenu" Value="False"/>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" 
                    Value="Transparent"/>
                <Setter Property="BorderBrush" 
                    Value="Transparent"/>
                <Setter Property="Foreground"
                    Value="{local:ThemeKey Key=ImageButton.MouseOver}"/>
                <Setter Property="local:ImageElement.Foreground" 
                    Value="{local:ThemeKey Key=ImageButton.MouseOver}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasMenu" Value="False"/>
                    <Condition Property="IsChecked" Value="True"/>
                    <Condition Property="IsMouseOver" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" 
                    Value="Transparent"/>
                <Setter Property="BorderBrush" 
                    Value="Transparent"/>
                <Setter Property="Foreground" 
                    Value="{local:ThemeKey Key=ImageButton.Checked}"/>
                <Setter Property="local:ImageElement.Foreground" 
                    Value="{local:ThemeKey Key=ImageButton.Checked}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasMenu" Value="False"/>
                    <Condition Property="IsPressed" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" 
                    Value="Transparent"/>
                <Setter Property="BorderBrush" 
                    Value="Transparent"/>
                <Setter Property="Foreground" 
                    Value="{local:ThemeKey Key=ImageButton.Pressed}"/>
                <Setter Property="local:ImageElement.Foreground" 
                    Value="{local:ThemeKey Key=ImageButton.Pressed}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type local:FolderButton}" TargetType="{x:Type local:FolderButton}" BasedOn="{StaticResource {x:Type local:ImageButton}}">
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="ButtonVisibility" Value="{Data:Self Items.IsEmpty, Converter={x:Static Conversion:BooleanToVisibilityConverter.Default}, ConverterParameter=1}"/>
        <Setter Property="Content" Value="{Data:Self Path, Converter={x:Static Conversion:FileNameConverter.Default}}"/>
        <Setter Property="g:DragDrop.IsDropTarget" Value="True"/>
        <Setter Property="ItemStyle">
            <Setter.Value>
                <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                    <Setter Property="Command" Value="{Data:Ancestor PlacementTarget.Command, {x:Type ContextMenu}}"/>
                    <Setter Property="CommandParameter" Value="{Binding Path}"/>
                    <Setter Property="Icon" Value="{Binding}"/>
                    <Setter Property="Linq:XMenuItem.IconTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <local:Thumbnail Path="{Binding Path}"/>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="Linq:XElement.ToolTipTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource {x:Static Linq:XExplorer.ToolTipTemplateKey}}"/>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="ToolTip" Value="{Binding Path}"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsHidden}" Value="True">
                            <Setter Property="Opacity" Value="{x:Static local:Explorer.HiddenOpacity}"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type Storage:Item}">
                    <TextBlock Text="{Binding Path, Converter={x:Static Conversion:FileNameConverter.Default}}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XControl.DropTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:DashedBorder
                        BorderBrush="{local:ThemeKey Key=DropTargetBorder}"
                        BorderThickness="2">
                        <local:ImageElement Source="{Markup:InternalImage Plus.png}"
                            HorizontalAlignment="Center" 
                            VerticalAlignment="Center"/>
                    </local:DashedBorder>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XControl.DropTemplateVisibility" Value="Visible" />
        <Setter Property="Linq:XExplorer.CopyWarningTitle" Value="{l:Loc Copy}"/>
        <Setter Property="Linq:XExplorer.CopyWarningMessage" Value="{l:Loc Continue, Suffix=?}"/>
        <Setter Property="Linq:XExplorer.InvalidPathAlertMessage" Value="{l:Loc FolderDoesNotExist}"/>
        <Setter Property="Linq:XExplorer.InvalidPathAlertTitle" Value="{l:Loc FolderNotFound}"/>
        <Setter Property="Linq:XExplorer.MoveWarningTitle" Value="{l:Loc Move}"/>
        <Setter Property="Linq:XExplorer.MoveWarningMessage" Value="{l:Loc Continue, Suffix=?}"/>
        <Setter Property="Linq:XExplorer.WarnBeforeDrop" Value="True"/>
        <Setter Property="Linq:XElement.FadeIn" Value="True" />
        <Setter Property="Linq:XElement.ShellContextMenu" Value="{Data:Self Path}"/>
        <Setter Property="Linq:XElement.ToolTipTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource {x:Static Linq:XExplorer.ToolTipTemplateKey}}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ToolTip" Value="{Data:Self Path=(Linq:XExplorer.Path)}"/>
    </Style>
</ResourceDictionary>