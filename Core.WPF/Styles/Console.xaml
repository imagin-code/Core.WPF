<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:l="clr-namespace:Imagin.Core.Local.Extensions"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Markup="clr-namespace:Imagin.Core.Markup">
    <Style x:Key="{x:Type local:Console}" TargetType="{x:Type local:Console}">
        <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=Text}"/>
        <Setter Property="HelpButtonTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:ImageButton 
                        Command="{Data:Ancestor ProcessCommand, {x:Type local:Console}}"
                        CommandParameter="?"
                        Source="{Markup:InternalImage Help.png}" 
                        ToolTip="{l:Loc Help}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XExplorer.CopyWarningTitle" Value="{l:Loc Copy}"/>
        <Setter Property="Linq:XExplorer.CopyWarningMessage" Value="{l:Loc Continue, Suffix=?}"/>
        <Setter Property="Linq:XExplorer.InvalidPathAlert" Value="True"/>
        <Setter Property="Linq:XExplorer.InvalidPathAlertMessage" Value="The folder '{0}' does not exist."/>
        <Setter Property="Linq:XExplorer.InvalidPathAlertTitle" Value="Folder not found"/>
        <Setter Property="Linq:XExplorer.MoveWarningTitle" Value="{l:Loc Move}"/>
        <Setter Property="Linq:XExplorer.MoveWarningMessage" Value="{l:Loc Continue, Suffix=?}"/>
        <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=Text}"/>
        <Setter Property="OutputFontFamily" Value="Consolas"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:Console}">
                    <Grid Linq:XGrid.Rows="*,Auto">
                        <Grid>
                            <Grid.Background>
                                <ImageBrush ImageSource="{TemplateBinding OutputBackgroundImage}" Stretch="{TemplateBinding OutputBackgroundStretch}"/>
                            </Grid.Background>
                            <TextBox x:Name="PART_TextBox"
                                AcceptsReturn="True"
                                Background="{TemplateBinding OutputBackground}"
                                BorderThickness="0"
                                Foreground="{TemplateBinding OutputForeground}"
			                    FontFamily="{TemplateBinding OutputFontFamily}"
			                    FontSize="{TemplateBinding OutputFontSize}"
                                FontStyle="{TemplateBinding OutputFontStyle}"
                                HorizontalAlignment="Stretch"
                                IsReadOnly="True"
                                Opacity="0.9"
                                Padding="5"
                                Linq:XElement.Wheel="True"
                                Linq:XElement.WheelIncrement="{TemplateBinding OutputFontSizeIncrement}"
                                Linq:XElement.WheelMaximum="{TemplateBinding OutputFontSizeMaximum}"
                                Linq:XElement.WheelMinimum="{TemplateBinding OutputFontSizeMinimum}"
                                Linq:XElement.WheelValue="{Data:TemplatedParent OutputFontSize, Mode=TwoWay}"
                                Linq:XTextBox.ClearButtonVisibility="Collapsed"
                                Linq:XTextBoxBase.ScrollToEnd="True"
                                Linq:XTextBoxBase.SelectAllOnFocus="False"
                                Linq:XTextBoxBase.TextTrimming="None"
                                ScrollViewer.HorizontalScrollBarVisibility="Auto"
                                ScrollViewer.VerticalScrollBarVisibility="Auto"
                                Text="{TemplateBinding Output}"
                                TextWrapping="{TemplateBinding OutputTextWrapping}"
                                VerticalAlignment="Stretch"
                                VerticalContentAlignment="Top"/>
                        </Grid>
                        <local:TopBorder Grid.Row="1" Height="30">
                            <Grid Linq:XGrid.Columns="*,Auto">
                                <TextBox
                                    Grid.Column="0" 
                                    BorderThickness="0"
                                    FontFamily="{TemplateBinding FontFamily}"
                                    Linq:XTextBox.ClearButtonVisibility="Visible"
                                    Linq:XTextBox.EnterButtonVisibility="Visible"
                                    Linq:XTextBox.EnterCommand="{Data:TemplatedParent ProcessCommand}"
                                    Linq:XTextBoxBase.Placeholder="{l:Loc Command}" 
                                    Text="{Data:TemplatedParent Line, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                    VerticalAlignment="Center" />
                                <ContentControl
                                    Grid.Column="1" 
                                    Content="{Markup:True}"
                                    ContentTemplate="{TemplateBinding HelpButtonTemplate}"
                                    Margin="0,0,5,0"
                                    VerticalAlignment="Center"/>
                            </Grid>
                        </local:TopBorder>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>