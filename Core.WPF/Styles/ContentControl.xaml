<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:l="clr-namespace:Imagin.Core.Local.Extensions"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Analytics="clr-namespace:Imagin.Core.Analytics;assembly=Imagin.Core"
    xmlns:Common="clr-namespace:Imagin.Core"
    xmlns:Conversion="clr-namespace:Imagin.Core.Conversion"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Markup="clr-namespace:Imagin.Core.Markup">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=Button}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Control}"/>
    </ResourceDictionary.MergedDictionaries>
    <!-- ... -->

    <Style x:Key="{x:Type ContentControl}" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
    </Style>

    <Style x:Key="{x:Type HeaderedContentControl}" TargetType="{x:Type HeaderedContentControl}" BasedOn="{StaticResource {x:Type ContentControl}}">
        <Setter Property="Linq:XHeaderedContentControl.HorizontalHeaderAlignment" Value="Stretch"/>
        <Setter Property="Linq:XHeaderedContentControl.VerticalHeaderAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition x:Name="PART_Row1" Height="Auto"/>
                                <RowDefinition x:Name="PART_Row2" Height="*"/>
                            </Grid.RowDefinitions>
                            <ContentPresenter ContentSource="Header" x:Name="ContentPresenter0" Linq:XElement.Name="{x:Static Linq:XHeaderedContentControl.HeaderKey}"
                                HorizontalAlignment="{Data:TemplatedParent Path=(Linq:XHeaderedContentControl.HorizontalHeaderAlignment)}"
                                Margin="{Data:TemplatedParent Path=(Linq:XHeaderedContentControl.HeaderPadding)}"
                                VerticalAlignment="{Data:TemplatedParent Path=(Linq:XHeaderedContentControl.VerticalHeaderAlignment)}"
                                Visibility="{Data:TemplatedParent Path=(Linq:XHeaderedContentControl.HeaderVisibility)}"/>
                            <ContentPresenter ContentSource="Content" x:Name="ContentPresenter1" Linq:XElement.Name="{x:Static Linq:XHeaderedContentControl.ContentKey}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="{TemplateBinding Padding}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Linq:XHeaderedContentControl.HeaderPlacement" Value="Top">
                            <Setter TargetName="ContentPresenter0" 
                                    Property="Grid.Row" Value="0"/>
                            <Setter TargetName="ContentPresenter1" 
                                    Property="Grid.Row" Value="1"/>
                            <Setter TargetName="PART_Row1" 
                                    Property="Height" Value="Auto"/>
                            <Setter TargetName="PART_Row2" 
                                    Property="Height" Value="*"/>
                        </Trigger>
                        <Trigger Property="Linq:XHeaderedContentControl.HeaderPlacement" Value="Bottom">
                            <Setter TargetName="ContentPresenter0"
                                    Property="Grid.Row" Value="1"/>
                            <Setter TargetName="ContentPresenter1" 
                                    Property="Grid.Row" Value="0"/>
                            <Setter TargetName="PART_Row1" 
                                    Property="Height" Value="*"/>
                            <Setter TargetName="PART_Row2" 
                                    Property="Height" Value="Auto"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ... -->

    <Style x:Key="{x:Type local:ContentControl3D}" TargetType="{x:Type local:ContentControl3D}" BasedOn="{StaticResource {x:Type ContentControl}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ContentControl3D}">
                    <Border
                      Background="{TemplateBinding Background}"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="{TemplateBinding BorderThickness}">
                        <Viewport3D x:Name="PART_Viewport">
                            <Viewport3D.Children>
                                <!-- ... LIGHT -->
                                <ModelVisual3D>
                                    <ModelVisual3D.Content>
                                        <Model3DGroup>
                                            <DirectionalLight Color="#444" Direction="0,0,-1" />
                                            <AmbientLight Color="#BBB" />
                                        </Model3DGroup>
                                    </ModelVisual3D.Content>
                                </ModelVisual3D>

                                <!-- ... BACK -->
                                <Viewport2DVisual3D>
                                    <Viewport2DVisual3D.Geometry>
                                        <MeshGeometry3D
                                       TriangleIndices="0,1,2 2,3,0"
                                       TextureCoordinates="0,1 1,1 1,0 0,0"
                                       Positions="-1,-1,0 1,-1,0 1,1,0 -1,1,0"/>
                                    </Viewport2DVisual3D.Geometry>

                                    <Viewport2DVisual3D.Transform>
                                        <RotateTransform3D>
                                            <RotateTransform3D.Rotation>
                                                <AxisAngleRotation3D Angle="180" />
                                            </RotateTransform3D.Rotation>
                                        </RotateTransform3D>
                                    </Viewport2DVisual3D.Transform>

                                    <Viewport2DVisual3D.Material>
                                        <DiffuseMaterial Viewport2DVisual3D.IsVisualHostMaterial="True" Brush="White" />
                                    </Viewport2DVisual3D.Material>

                                    <Viewport2DVisual3D.Visual>
                                        <ContentPresenter
                                          Content="{TemplateBinding BackContent}"
                                          ContentTemplate="{TemplateBinding BackContentTemplate}"/>
                                    </Viewport2DVisual3D.Visual>
                                </Viewport2DVisual3D>

                                <!-- ... FRONT -->
                                <Viewport2DVisual3D>
                                    <Viewport2DVisual3D.Geometry>
                                        <MeshGeometry3D
                                         TriangleIndices="0,1,2 2,3,0"
                                         TextureCoordinates="0,1 1,1 1,0 0,0"
                                         Positions="-1,-1,0 1,-1,0 1,1,0 -1,1,0"/>
                                    </Viewport2DVisual3D.Geometry>

                                    <Viewport2DVisual3D.Transform>
                                        <RotateTransform3D>
                                            <RotateTransform3D.Rotation>
                                                <AxisAngleRotation3D Angle="0"/>
                                            </RotateTransform3D.Rotation>
                                        </RotateTransform3D>
                                    </Viewport2DVisual3D.Transform>

                                    <Viewport2DVisual3D.Material>
                                        <DiffuseMaterial Viewport2DVisual3D.IsVisualHostMaterial="True" Brush="White" />
                                    </Viewport2DVisual3D.Material>

                                    <Viewport2DVisual3D.Visual>
                                        <ContentPresenter
                                          Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"/>
                                    </Viewport2DVisual3D.Visual>
                                </Viewport2DVisual3D>
                            </Viewport3D.Children>
                        </Viewport3D>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ... -->

    <DropShadowEffect x:Key="{x:Static local:DialogControl.DropShadowEffectKey}"
        BlurRadius="8" Color="{local:ThemeKey ActualKey=PopupDropShadow}" Opacity="0.5" ShadowDepth="3"/>

    <Style x:Key="{x:Type local:DialogControl}" TargetType="{x:Type local:DialogControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Background" Value="{local:ThemeKey ActualKey=DialogBackground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:DialogControl}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <Border Effect="{StaticResource {x:Static local:DialogControl.DropShadowEffectKey}}"
                            HorizontalAlignment="Center" VerticalAlignment="Center"
                            MaxHeight="720" Width="512">
                            <Grid Linq:XGrid.Rows="Auto,*,Auto" Linq:XGrid.AutoRows="True">
                                <Border Background="{local:ThemeKey ActualKey=DialogTitleBackground}" Padding="10">
                                    <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,*">
                                        <local:ImageElement
                                            Margin="0,0,5,0"
                                            Source="{Data:TemplatedParent Content.Image}"
                                            Foreground="{local:ThemeKey ActualKey=DialogTitleForeground}"/>
                                        <TextBlock Text="{Data:TemplatedParent Content.Title}"
                                            FontSize="15"
                                            Foreground="{local:ThemeKey ActualKey=DialogTitleForeground}"/>
                                    </Grid>
                                </Border>
                                <Border Background="{local:ThemeKey ActualKey=DialogBodyBackground}" Padding="10">
                                    <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Content}"/>
                                </Border>
                                <local:TopBorder Background="{local:ThemeKey ActualKey=DialogFooterBackground}"
                                    Padding="5">
                                    <ItemsControl
                                        HorizontalAlignment="Right"
                                        ItemsSource="{Data:TemplatedParent Content.Buttons}"
                                        VerticalAlignment="Center">
                                        <ItemsControl.ItemContainerStyle>
                                            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                                                <Setter Property="Command" Value="{Data:Ancestor CloseCommand, local:DialogPresenter}"/>
                                                <Setter Property="CommandParameter" Value="{Data:Self Path=(Linq:XButton.Result)}"/>
                                                <Setter Property="Margin" Value="3,0,0,0"/>
                                            </Style>
                                        </ItemsControl.ItemContainerStyle>
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <StackPanel Orientation="Horizontal"/>
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate>
                                                <ContentPresenter Content="{Binding}"/>
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                    </ItemsControl>
                                </local:TopBorder>
                            </Grid>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Data:Self Content, Converter={x:Static Conversion:IsStringConverter.Default}}" Value="True">
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate DataType="Common:DialogReference">
                                        <local:DialogContentControl Content="{Binding}"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Data:Self Content, Converter={x:Static Conversion:IsStringConverter.Default}}" Value="False">
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate DataType="Common:DialogReference">
                                        <ContentPresenter Content="{Binding Message}"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ... -->

    <Style x:Key="{x:Type local:DialogContentControl}" TargetType="{x:Type local:DialogContentControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate DataType="Common:DialogReference">
                    <TextBlock Text="{Binding Message}" TextWrapping="Wrap"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:DialogContentControl">
                    <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,*">
                        <local:ImageElement
                            Margin="0,0,10,0"
                            Source="{Data:TemplatedParent Content.Image, Converter={x:Static Conversion:UriToImageSourceConverter.Default}}"
                            SourceSize="{Data:TemplatedParent Content.ImageSize}"
                            Visibility="{Data:TemplatedParent Content.Image, Converter={x:Static Conversion:ObjectToVisibilityConverter.Default}}"/>
                        <Grid>
                            <StackPanel VerticalAlignment="Center">
                                <ContentPresenter Content="{TemplateBinding Content}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
                                <CheckBox Content="Do not show again"
                                    IsChecked="{Data:TemplatedParent Content.NeverShow.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                    Margin="0,10,0,0" 
                                    Visibility="{Data:TemplatedParent Content.NeverShow, Converter={x:Static Conversion:ObjectToVisibilityConverter.Default}}"/>
                            </StackPanel>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type local:ResultControl}" TargetType="{x:Type local:ResultControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Border.CornerRadius" Value="1"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type Analytics:Result}">
                    <TextBlock
                        Foreground="#FFF"
                        Text="{Binding Text}"
                        TextAlignment="Left"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="ImageTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:ImageElement
                        Margin="0,0,8,0"
                        Source="{Binding}"
                        SourceSize="32,32"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="local:ImageElement.Foreground" Value="White"/>
        <Setter Property="Padding" Value="20,16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ResultControl}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <Grid Linq:XGrid.Columns="Auto,*">
                            <ContentPresenter
                                Grid.Column="0"
                                Content="{TemplateBinding Image}"
                                ContentTemplate="{TemplateBinding ImageTemplate}"
                                ContentTemplateSelector="{TemplateBinding ImageTemplateSelector}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentPresenter
                                Grid.Column="1"
                                Content="{TemplateBinding Content}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Style.Triggers>
            <DataTrigger Binding="{Data:Self Content.Type}" Value="Error">
                <Setter Property="Background" Value="#C00"/>
                <Setter Property="Image" Value="{Markup:InternalImage 256-Error.png}"/>
            </DataTrigger>
            <DataTrigger Binding="{Data:Self Content.Type}" Value="Message">
                <Setter Property="Background" Value="#0066cc"/>
                <Setter Property="Image" Value="{Markup:InternalImage 256-Info.png}"/>
            </DataTrigger>
            <DataTrigger Binding="{Data:Self Content.Type}" Value="Success">
                <Setter Property="Background" Value="Green"/>
                <Setter Property="Image" Value="{Markup:InternalImage 256-Success.png}"/>
            </DataTrigger>
            <DataTrigger Binding="{Data:Self Content.Type}" Value="Warning">
                <Setter Property="Background" Value="Orange"/>
                <Setter Property="Image" Value="{Markup:InternalImage 256-Warning.png}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type local:TransitionControl}" TargetType="{x:Type local:TransitionControl}" BasedOn="{StaticResource {x:Type ContentControl}}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:TransitionControl}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2">
                        <Grid>
                            <ContentPresenter x:Name="PreviousContentPresentationSite"
                                Content="{x:Null}"
                                ContentTemplate="{x:Null}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <ContentPresenter.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </ContentPresenter.RenderTransform>
                            </ContentPresenter>
                            <ContentPresenter x:Name="CurrentContentPresentationSite"
                                Content="{x:Null}"
                                ContentTemplate="{x:Null}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <ContentPresenter.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </ContentPresenter.RenderTransform>
                            </ContentPresenter>
                        </Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="PresentationStates">
                                <VisualState x:Name="DefaultTransition">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="CurrentContentPresentationSite"
                                            Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="PreviousContentPresentationSite"
                                            Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Normal">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="PreviousContentPresentationSite"
                                            Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="UpTransition">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="CurrentContentPresentationSite"
                                            Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="CurrentContentPresentationSite"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="30" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="PreviousContentPresentationSite"
                                            Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="PreviousContentPresentationSite"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="-30" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="DownTransition">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="CurrentContentPresentationSite"
                                            Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="CurrentContentPresentationSite"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="-40" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="PreviousContentPresentationSite"
                                            Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="PreviousContentPresentationSite"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="40" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="RightTransition">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="CurrentContentPresentationSite"
                                            Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.400" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="CurrentContentPresentationSite"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="-30" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.700" Value="0">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <CubicEase EasingMode="EaseOut" />
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="PreviousContentPresentationSite"
                                            Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.100" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="PreviousContentPresentationSite"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.700" Value="30">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <CubicEase EasingMode="EaseOut" />
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="LeftTransition">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="CurrentContentPresentationSite"
                                            Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.400" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="CurrentContentPresentationSite"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="30" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.700" Value="0">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <CubicEase EasingMode="EaseOut" />
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="PreviousContentPresentationSite"
                                            Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.100" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="PreviousContentPresentationSite"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.700" Value="-30">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <CubicEase EasingMode="EaseOut" />
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="RightReplaceTransition">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="CurrentContentPresentationSite"
                                            Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="CurrentContentPresentationSite"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="-40" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="PreviousContentPresentationSite"
                                            Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="LeftReplaceTransition">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="CurrentContentPresentationSite"
                                            Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="CurrentContentPresentationSite"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="40" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames
                                            BeginTime="00:00:00"
                                            Storyboard.TargetName="PreviousContentPresentationSite"
                                            Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Transition" Value="Default" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
    </Style>
</ResourceDictionary>