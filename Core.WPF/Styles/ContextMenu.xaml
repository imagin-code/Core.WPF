<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Conversion="clr-namespace:Imagin.Core.Conversion"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Markup="clr-namespace:Imagin.Core.Markup"
    xmlns:Reflection="clr-namespace:System.Reflection;assembly=mscorlib">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=ItemsControl}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Popup}"/>
    </ResourceDictionary.MergedDictionaries>
    <DataTemplate x:Key="{x:Static Linq:XContextMenu.HeaderPatternKey}">
        <local:PatternElement Foreground="{local:ThemeKey Key=Text}"/>
    </DataTemplate>
    
    <Style x:Key="{x:Type ContextMenu}" TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource {x:Type ItemsControl}}">
        <Setter Property="Background" Value="{local:ThemeKey PopupBackground}"/>
        <Setter Property="BorderBrush" Value="{local:ThemeKey PopupBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Grid.IsSharedSizeScope" Value="True"/>
        <Setter Property="Linq:XContextMenu.HeaderIconTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:ImageElement Foreground="{local:ThemeKey Key=Text}" Source="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XItemsControl.EmptyTemplateVisibility" Value="Visible"/>
        <Setter Property="MaxHeight" Value="{x:Static Linq:XPopup.MaximumHeight}" />
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Grid Linq:XGrid.Rows="Auto,*,Auto" Linq:XGrid.AutoRows="True">
                        <ContentPresenter Content="{Data:TemplatedParent Path=(Linq:XContextMenu.Above)}" 
                            ContentTemplate="{Data:TemplatedParent Path=(Linq:XContextMenu.AboveTemplate)}"
                            Margin="0,0,0,5"
                            Visibility="{Data:VisibilityBinding Path=(Linq:XContextMenu.Above), From=TemplatedParent}"/>
                        <Border
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding Border.CornerRadius}">
                            <Grid Linq:XGrid.AutoRows="True" Linq:XGrid.Rows="Auto,*">
                                <local:BottomBorder Margin="1,0" Padding="5"
                                    Visibility="{Data:VisibilityBinding Path=(Linq:XContextMenu.Header), From=TemplatedParent}">
                                    <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,Auto,*" Linq:XPanel.Spacing="0,0,5,0" Linq:XPanel.SpacingExcept="Last">
                                        <ContentControl Content="{Data:TemplatedParent Path=(Linq:XContextMenu.HeaderIcon)}" 
                                            ContentTemplate="{Data:TemplatedParent Path=(Linq:XContextMenu.HeaderIconTemplate)}" 
                                            Foreground="{local:ThemeKey Key=Text}"
                                            Visibility="{Data:VisibilityBinding From=TemplatedParent, Path=(Linq:XContextMenu.HeaderIcon)}"/>
                                        <ContentControl Content="{Data:TemplatedParent Path=(Linq:XContextMenu.Header)}" 
                                            ContentTemplate="{Data:TemplatedParent Path=(Linq:XContextMenu.HeaderTemplate)}"
                                            Foreground="{local:ThemeKey Key=Text}"/>
                                        <ContentPresenter Content="{Markup:True}" 
                                            ContentTemplate="{DynamicResource {x:Static Linq:XContextMenu.HeaderPatternKey}}"/>
                                    </Grid>
                                </local:BottomBorder>
                                <Grid>
                                    <local:EmptyPresenter/>
                                    <ScrollViewer Linq:XScrollViewer.Overlap="True">
                                        <StackPanel
                                            IsItemsHost="True" 
                                            KeyboardNavigation.DirectionalNavigation="Cycle" 
                                            ScrollViewer.PanningMode="None"
                                            ScrollViewer.PanningRatio="0"
                                            ScrollViewer.VerticalScrollBarVisibility="Auto"/>
                                    </ScrollViewer>
                                </Grid>
                            </Grid>
                        </Border>
                        <ContentPresenter Content="{Data:TemplatedParent Path=(Linq:XContextMenu.Below)}" 
                            ContentTemplate="{Data:TemplatedParent Path=(Linq:XContextMenu.BelowTemplate)}"
                            Margin="0,5,0,0"
                            Visibility="{Data:VisibilityBinding Path=(Linq:XContextMenu.Below), From=TemplatedParent}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type local:MemberContextMenu}" TargetType="{x:Type local:MemberContextMenu}" BasedOn="{StaticResource {x:Type ContextMenu}}">
        <Setter Property="Linq:XContextMenu.Header" Value="{Data:Self Convert=Conversion:NameAttributeConverter, Path=(Linq:XMemberControl.ActualSource)}"/>
        <Setter Property="Linq:XContextMenu.HeaderIcon" Value="{Data:Self Convert=Conversion:ImageAttributeConverter, Path=(Linq:XMemberControl.ActualSource)}"/>
        <Setter Property="Linq:XContextMenu.HeaderIconTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:ImageElement Foreground="{local:ThemeKey Key=Text}" Source="{Data:Bind Convert=Conversion:StringToImageSourceConverter}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsSource" Value="{Data:Self Path=(Linq:XMemberControl.Members).View}"/>
        <Setter Property="Linq:XItemsControl.GroupContainerStyle">
            <Setter.Value>
                <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                    <Setter Property="Header" Value="{Data:MemberNameBinding}"/>
                    <Setter Property="Icon" Value="{Data:MemberImageBinding}"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type ICommand}">
                            <Setter Property="Command" Value="{Binding Value}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type Reflection:MethodInfo}">
                            <Setter Property="Command" Value="{Binding InvokeMethodCommand}"/>
                            <Setter Property="CommandParameter" Value="{Binding Member}"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XItemsControl.GroupsItself" Value="True"/>
        <Setter Property="Linq:XItemsControl.GroupStyle" Value="{DynamicResource {x:Static Linq:XItemsControl.MenuGroupStyleKey}}"/>
    </Style>
</ResourceDictionary>