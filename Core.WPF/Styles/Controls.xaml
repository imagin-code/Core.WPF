<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:l="http://wpflocalizeextension.codeplex.com"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Conversion="clr-namespace:Imagin.Core.Conversion"
    xmlns:Core="clr-namespace:Imagin.Core;assembly=Imagin.Core"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Markup="clr-namespace:Imagin.Core.Markup"
    xmlns:Media="clr-namespace:Imagin.Core.Media"
    xmlns:Numbers="clr-namespace:Imagin.Core.Numerics;assembly=Imagin.Core"
    xmlns:System="clr-namespace:System;assembly=mscorlib">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=Button}"/>
        <ResourceDictionary Source="{local:StyleKey Key=ComboBox}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Control}"/>
        <ResourceDictionary Source="{local:StyleKey Key=ProgressBar}"/>
        <ResourceDictionary Source="{local:StyleKey Key=TextBlock}"/>
        <ResourceDictionary Source="{local:StyleKey Key=TextBox}"/>
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="{x:Type local:DirectionControl}" TargetType="{x:Type local:DirectionControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="EIcon" 
            Value="{Markup:SmallImage Image=ArrowE}" />
        <Setter Property="ELabel" 
            Value="{Markup:Loc Right}" />
        <Setter Property="NIcon" 
            Value="{Markup:SmallImage Image=ArrowN}" />
        <Setter Property="NLabel" 
            Value="{Markup:Loc Top}" />
        <Setter Property="NEIcon" 
            Value="{Markup:SmallImage Image=ArrowNE}" />
        <Setter Property="NELabel" 
            Value="{Markup:Loc TopRight}" />
        <Setter Property="NWIcon" 
            Value="{Markup:SmallImage Image=ArrowNW}" />
        <Setter Property="NWLabel" 
            Value="{Markup:Loc TopLeft}" />
        <Setter Property="OriginIcon" 
            Value="{Markup:SmallImage Image=ArrowP}" />
        <Setter Property="OriginLabel" 
            Value="{Markup:Loc Center}" />
        <Setter Property="SIcon" 
            Value="{Markup:SmallImage Image=ArrowS}" />
        <Setter Property="SLabel" 
            Value="{Markup:Loc Bottom}" />
        <Setter Property="SEIcon" 
            Value="{Markup:SmallImage Image=ArrowSE}" />
        <Setter Property="SELabel" 
            Value="{Markup:Loc BottomRight}" />
        <Setter Property="SWIcon" 
            Value="{Markup:SmallImage Image=ArrowSW}" />
        <Setter Property="SWLabel" 
            Value="{Markup:Loc BottomLeft}" />
        <Setter Property="WIcon" 
            Value="{Markup:SmallImage Image=ArrowW}" />
        <Setter Property="WLabel" 
            Value="{Markup:Loc Left}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:DirectionControl">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <ItemsControl ClipToBounds="True" ItemsSource="{TemplateBinding Directions}">
                            <ItemsControl.ItemContainerStyle>
                                <Style TargetType="{x:Type ContentPresenter}">
                                    <Setter Property="Grid.Row" Value="{Binding Row}" />
                                    <Setter Property="Grid.Column" Value="{Binding Column}" />
                                    <Setter Property="Opacity" Value="0" />
                                    <Style.Triggers>
                                        <EventTrigger RoutedEvent="ContentPresenter.SizeChanged">
                                            <BeginStoryboard>
                                                <BeginStoryboard.Storyboard>
                                                    <Storyboard>
                                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1.0" Duration="0:0:0.5" AccelerationRatio="0.4" DecelerationRatio="0.4"/>
                                                    </Storyboard>
                                                </BeginStoryboard.Storyboard>
                                            </BeginStoryboard>
                                        </EventTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ItemsControl.ItemContainerStyle>
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <Grid Linq:XGrid.Columns="0,24,24,24,0" Linq:XGrid.Rows="0,24,24,24,0"/>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <local:ImageButton
                                        Command="{Data:Ancestor ShiftCommand, local:DirectionControl}"
                                        CommandParameter="{Binding}"
                                        Source="{Binding Icon}"
                                        SourceSize="16,16"
                                        ToolTip="{Binding Name}"/>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- /// -->

    <Style x:Key="{x:Static local:DownloadControl.ProgressBarStyleKey}" TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource {x:Type ProgressBar}}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="MinHeight" Value="15"/>
    </Style>

    <Style x:Key="{x:Static local:DownloadControl.TextBlockStyleKey}" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}"/>

    <Style x:Key="{x:Type local:DownloadControl}" TargetType="{x:Type local:DownloadControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:DownloadControl">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <StackPanel Linq:XPanel.Spacing="0,0,0,5" Linq:XPanel.SpacingExcept="Last">
                            <ContentPresenter Content="{TemplateBinding Message}"
                                ContentTemplate="{TemplateBinding MessageTemplate}"
                                ContentTemplateSelector="{TemplateBinding MessageTemplateSelector}"
                                Visibility="{Data:VisibilityBinding Message, From=TemplatedParent}"/>

                            <ProgressBar Value="{TemplateBinding Progress}"
                                Style="{StaticResource {x:Static local:DownloadControl.ProgressBarStyleKey}}"/>

                            <local:TitleLabel Content="{Markup:Loc Progress, Suffix=:}"/>
                            <TextBlock FontStyle="Italic" Text="{TemplateBinding Processed}"
                                Style="{StaticResource {x:Static local:DownloadControl.TextBlockStyleKey}}"/>

                            <local:TitleLabel Content="{Markup:Loc Remaining, Suffix=:}"/>
                            <TextBlock FontStyle="Italic" Text="{Data:TemplatedParent Remaining, Convert={x:Type Conversion:ShortTimeConverter}}"
                                Style="{StaticResource {x:Static local:DownloadControl.TextBlockStyleKey}}"/>

                            <local:TitleLabel Content="{Markup:Loc Speed, Suffix=:}"/>
                            <TextBlock FontStyle="Italic" Text="{Data:TemplatedParent Speed, Convert={x:Type Conversion:FileSpeedConverter}}"
                                Style="{StaticResource {x:Static local:DownloadControl.TextBlockStyleKey}}"/>
                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- /// -->

    <Style x:Key="{x:Type local:DualColorControl}" TargetType="{x:Type local:DualColorControl}" BasedOn="{StaticResource {x:Type FrameworkElement}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:DualColorControl">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <Grid Linq:XGrid.Rows="Auto,*">
                            <Grid 
                                x:Name="PART_Grid"
                                Background="Transparent"
                                ToolTip="{Markup:Loc Reset}">
                                <Border 
                                    Cursor="Hand"
                                    Background="{x:Static Media:CheckerBrush.Default}"
                                    BorderThickness="1"
                                    BorderBrush="Black"
                                    Margin="5,5,0,0"
                                    HorizontalAlignment="Left" 
                                    VerticalAlignment="Top">
                                    <Rectangle 
                                        Width="10" 
                                        Height="10" 
                                        Fill="{Data:TemplatedParent DefaultBackground, Convert={x:Type Conversion:ColorToSolidColorBrushConverter}}"/>
                                </Border>
                                <Border 
                                    Cursor="Hand" 
                                    Background="{x:Static Media:CheckerBrush.Default}"
                                    BorderThickness="1"
                                    BorderBrush="Black"
                                    HorizontalAlignment="Left" 
                                    VerticalAlignment="Top">
                                    <Rectangle
                                        Width="10" 
                                        Height="10" 
                                        Fill="{Data:TemplatedParent DefaultForeground, Convert={x:Type Conversion:ColorToSolidColorBrushConverter}}"/>
                                </Border>
                            </Grid>
                            <Grid 
                                Grid.Row="1" 
                                Margin="0,5,0,0">
                                <local:ColorBox  
                                    Height="22" 
                                    HorizontalAlignment="Left"
                                    Margin="10,10,0,0" 
                                    ToolTip="{Markup:Loc Background}"
                                    Value="{Data:TemplatedParent BackgroundColor, Mode=TwoWay}"
                                    VerticalAlignment="Top"
                                    Width="22"/>
                                <local:ColorBox  
                                    Height="22" 
                                    HorizontalAlignment="Left"
                                    ToolTip="{Markup:Loc Foreground}"
                                    Value="{Data:TemplatedParent ForegroundColor, Mode=TwoWay}"
                                    VerticalAlignment="Top"
                                    Width="22"/>

                                <Rectangle
                                    x:Name="PART_Rectangle"
                                    Cursor="Hand" 
                                    Height="15" 
                                    HorizontalAlignment="Left" 
                                    Margin="20,-10,0,0" 
                                    Stroke="{x:Null}" 
                                    ToolTip="{Markup:Loc Swap}"
                                    VerticalAlignment="Top" 
                                    Width="16">
                                    <Rectangle.Fill>
                                        <DrawingBrush Viewbox="0,0,11.381,12.011" ViewboxUnits="Absolute"  Stretch="Uniform">
                                            <DrawingBrush.Drawing>
                                                <DrawingGroup>
                                                    <GeometryDrawing Brush="#FF231F20" Geometry="M3.45,5.3119929 L-3.0517605E-06,2.6559988 3.45,4.6386617E-06 z"/>
                                                    <DrawingGroup>
                                                        <DrawingGroup.Transform>
                                                            <MatrixTransform Matrix="1,0,0,1,6.069,8.561"/>
                                                        </DrawingGroup.Transform>
                                                        <GeometryDrawing Brush="#FF231F20" Geometry="M5.3120054,0 L2.6560036,3.4499878 1.8798841E-06,0 z"/>
                                                    </DrawingGroup>
                                                    <DrawingGroup>
                                                        <DrawingGroup.Transform>
                                                            <MatrixTransform Matrix="1,0,0,1,2.009,2.1"/>
                                                        </DrawingGroup.Transform>
                                                        <GeometryDrawing Geometry="M6.5110028,6.5119882 C6.5110028,3.1890015 3.8230035,0.50001216 0.50000435,0.50001216">
                                                            <GeometryDrawing.Pen>
                                                                <Pen Brush="#FF231F20" DashCap="Flat" EndLineCap="Flat" LineJoin="Miter" MiterLimit="10" StartLineCap="Flat" Thickness="1"/>
                                                            </GeometryDrawing.Pen>
                                                        </GeometryDrawing>
                                                    </DrawingGroup>
                                                </DrawingGroup>
                                            </DrawingBrush.Drawing>
                                        </DrawingBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                            </Grid>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type local:FadeControl}" TargetType="{x:Type local:FadeControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:FadeControl}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <Grid>
                            <ContentPresenter x:Name="Content1" Content="{TemplateBinding Content1}"/>
                            <ContentPresenter x:Name="Content2" Content="{TemplateBinding Content2}" Opacity="0"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Duration="0:0:0.15"
                                            From="1"
                                            To="0"
                                            Storyboard.TargetName="Content1"
                                            Storyboard.TargetProperty="Opacity"/>
                                        <DoubleAnimation
                                            Duration="0:0:0.15"
                                            From="0"
                                            To="1"
                                            Storyboard.TargetName="Content2"
                                            Storyboard.TargetProperty="Opacity"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Duration="0:0:0.15"
                                            From="0"
                                            To="1"
                                            Storyboard.TargetName="Content1"
                                            Storyboard.TargetProperty="Opacity"/>
                                        <DoubleAnimation
                                            Duration="0:0:0.15"
                                            From="1"
                                            To="0"
                                            Storyboard.TargetName="Content2"
                                            Storyboard.TargetProperty="Opacity"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <Setter TargetName="Content1" Property="IsHitTestVisible" Value="False"/>
                            <Setter TargetName="Content2" Property="IsHitTestVisible" Value="True"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="Content1" Property="IsHitTestVisible" Value="True"/>
                            <Setter TargetName="Content2" Property="IsHitTestVisible" Value="False"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type local:PatternControl}" TargetType="{x:Type local:PatternControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="#11000000"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ClosedLineStroke">
            <Setter.Value>
                <LinearGradientBrush>
                    <GradientStop Offset="0" Color="#55008C00"/>
                    <GradientStop Offset="0.5" Color="#AA008C00"/>
                    <GradientStop Offset="1" Color="#008C00"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="DotBackground">
            <Setter.Value>
                <LinearGradientBrush>
                    <GradientStop Offset="0" Color="#555"/>
                    <GradientStop Offset="1" Color="#383c40"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="DotBorderBrush" Value="#181818"/>
        <Setter Property="DotBorderThickness" Value="1"/>
        <Setter Property="DotLength" Value="48"/>
        <Setter Property="InnerDotBackground">
            <Setter.Value>
                <LinearGradientBrush>
                    <GradientStop Offset="0" Color="#e8e8e8"/>
                    <GradientStop Offset="0.5" Color="#FFF"/>
                    <GradientStop Offset="1" Color="#e8e8e8"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="InnerDotConnectedBackground">
            <Setter.Value>
                <LinearGradientBrush>
                    <GradientStop Offset="0" Color="#46b546"/>
                    <GradientStop Offset="0.5" Color="#73d073"/>
                    <GradientStop Offset="1" Color="#46b546"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="InnerDotLength" Value="28"/>
        <Setter Property="LineStroke" Value="10"/>
        <Setter Property="OpenLineStroke">
            <Setter.Value>
                <LinearGradientBrush>
                    <GradientStop Offset="0" Color="#DDD"/>
                    <GradientStop Offset="0.25" Color="#E0E0E0"/>
                    <GradientStop Offset="0.5" Color="#EAEAEA"/>
                    <GradientStop Offset="1" Color="#F0F0F0"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:PatternControl">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <Border.Resources>
                            <Data:Reference x:Key="PatternView" Data="{Data:TemplatedParent}"/>
                        </Border.Resources>
                        <Viewbox>
                            <Grid x:Name="PART_Grid">
                                <ItemsControl ItemsSource="{TemplateBinding Lines}">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <Line
                                                x:Name="PART_Line"
                                                Stroke="{Binding Data.ClosedLineStroke, Source={StaticResource PatternView}}"
                                                StrokeThickness="{Binding Data.LineStroke, Source={StaticResource PatternView}}"
                                                X1="{Binding X1, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                                X2="{Binding X2, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                                Y1="{Binding Y1, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                                Y2="{Binding Y2, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding IsOpen}" Value="True">
                                                    <Setter TargetName="PART_Line" Property="Stroke" Value="{Binding Data.OpenLineStroke, Source={StaticResource PatternView}}"/>
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <Canvas/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                </ItemsControl>
                                <ItemsControl ItemsSource="{TemplateBinding Dots}"
                                    Height="{TemplateBinding CanvasLength}"
                                    Width="{TemplateBinding CanvasLength}">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <Border 
                                                x:Name="PART_Border"
                                                Background="{Binding Data.DotBackground, Source={StaticResource PatternView}}"
                                                BorderBrush="{Binding Data.DotBorderBrush, Source={StaticResource PatternView}}"
                                                BorderThickness="{Binding Data.DotBorderThickness, Source={StaticResource PatternView}}"
                                                CornerRadius="999"
                                                Height="{Binding Data.DotLength, Source={StaticResource PatternView}}"
                                                HorizontalAlignment="Center"
                                                VerticalAlignment="Center"
                                                Width="{Binding Data.DotLength, Source={StaticResource PatternView}}">
                                                <Border 
                                                    x:Name="PART_InnerBorder"
                                                    Background="{Binding Data.InnerDotBackground, Source={StaticResource PatternView}}"
                                                    CornerRadius="999"
                                                    Height="{Binding Data.InnerDotLength, Source={StaticResource PatternView}}"
                                                    Width="{Binding Data.InnerDotLength, Source={StaticResource PatternView}}">
                                                </Border>
                                            </Border>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding IsConnected}" Value="True">
                                                    <Setter TargetName="PART_InnerBorder" Property="Background" Value="{Binding Data.InnerDotConnectedBackground, Source={StaticResource PatternView}}"/>
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <UniformGrid Columns="3" Rows="3"/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                </ItemsControl>
                            </Grid>
                        </Viewbox>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type local:PatternElement}" TargetType="{x:Type local:PatternElement}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Stretch" Value="Fill"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:PatternElement">
                    <Rectangle Height="5" Stretch="{TemplateBinding Stretch}">
                        <Rectangle.Fill>
                            <VisualBrush 
                                TileMode="Tile" Viewport="0,0,4,5" 
                                ViewportUnits="Absolute" Viewbox="0,0,4,5"    
                                ViewboxUnits="Absolute">
                                <VisualBrush.Visual>
                                    <Canvas Height="5">
                                        <Rectangle Canvas.Left="0" Canvas.Top="0" 
                                            Fill="{TemplateBinding Foreground}" Height="1" Width="1"/>
                                        <Rectangle Canvas.Left="2" Canvas.Top="2" 
                                            Fill="{TemplateBinding Foreground}" Height="1" Width="1"/>
                                        <Rectangle Canvas.Left="0" Canvas.Top="4" 
                                            Fill="{TemplateBinding Foreground}" Height="1" Width="1"/>
                                    </Canvas>
                                </VisualBrush.Visual>
                            </VisualBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- /// -->

    <Storyboard x:Key="MarchingAnts">
        <DoubleAnimationUsingKeyFrames 
            BeginTime="00:00:00" 
            Storyboard.TargetProperty="(Shape.StrokeDashOffset)" 
            RepeatBehavior="Forever">
            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
            <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="10"/>
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>

    <Style x:Key="{x:Type local:SelectionControl}" TargetType="{x:Type local:SelectionControl}" BasedOn="{StaticResource {x:Type FrameworkElement}}"/>

    <Style x:Key="{x:Type local:SelectionRectangle}" TargetType="{x:Type local:SelectionRectangle}" BasedOn="{StaticResource {x:Type local:SelectionControl}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:SelectionRectangle">
                    <Grid>
                        <Rectangle
                            HorizontalAlignment="Stretch"
                            SnapsToDevicePixels="True"
                            Stroke="{TemplateBinding StrokePrimary}"
                            StrokeThickness="{TemplateBinding StrokeThickness}"
                            VerticalAlignment="Stretch"/>
                        <Rectangle
                            Fill="{TemplateBinding Fill}"
                            HorizontalAlignment="Stretch"
                            SnapsToDevicePixels="True"
                            Stroke="{TemplateBinding StrokeSecondary}"
                            StrokeDashArray="2"
                            StrokeDashOffset="0"
                            StrokeThickness="{TemplateBinding StrokeThickness}"
                            VerticalAlignment="Stretch">
                            <Rectangle.Triggers>
                                <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                    <BeginStoryboard Storyboard="{StaticResource MarchingAnts}"/>
                                </EventTrigger>
                            </Rectangle.Triggers>
                        </Rectangle>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type local:SelectionPolygon}" TargetType="{x:Type local:SelectionPolygon}" BasedOn="{StaticResource {x:Type local:SelectionControl}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:SelectionPolygon">
                    <Grid>
                        <Polygon
                            Points="{Data:TemplatedParent Path.Points}"
                            Stroke="{TemplateBinding StrokePrimary}"
                            StrokeThickness="{TemplateBinding StrokeThickness}"/>
                        <Polygon
                            Fill="{TemplateBinding Fill}" 
                            Points="{Data:TemplatedParent Path.Points}"
                            Stroke="{TemplateBinding StrokeSecondary}"
                            StrokeDashArray="2" 
                            StrokeDashOffset="0"
                            StrokeThickness="{TemplateBinding StrokeThickness}">
                            <Polygon.Triggers>
                                <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                    <BeginStoryboard Storyboard="{StaticResource MarchingAnts}"/>
                                </EventTrigger>
                            </Polygon.Triggers>
                        </Polygon>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- /// -->

    <Style x:Key="{x:Type local:SlideshowControl}" TargetType="{x:Type local:SlideshowControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:SlideshowControl}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <Border.Resources>
                            <Data:Reference x:Key="SlideshowControl" Data="{Data:TemplatedParent}"/>
                        </Border.Resources>
                        <Grid>
                            <local:FillElement x:Name="PART_Background" 
                                Fill="{TemplateBinding DefaultBackground}"
                                Visibility="Collapsed"/>
                            <local:TransitionControl
                                Background="Transparent"
                                Content="{TemplateBinding SelectedImageSource}"
                                Transition="{TemplateBinding Transition}">
                                <local:TransitionControl.ContentTemplate>
                                    <DataTemplate>
                                        <Grid>
                                            <Image 
                                                HorizontalAlignment="Stretch"
                                                Opacity="{Binding Data.BackgroundOpacity, Source={StaticResource SlideshowControl}}"
                                                RenderOptions.BitmapScalingMode="{Binding Data.ScalingMode, Mode=OneWay, Source={StaticResource SlideshowControl}}"
                                                Source="{Binding}"
                                                Stretch="UniformToFill"
                                                VerticalAlignment="Stretch"
                                                Visibility="{Data:Bind Data.BackgroundBlur, Convert={x:Type Conversion:BooleanToVisibilityConverter}, Source={StaticResource SlideshowControl}}">
                                                <Image.Effect>
                                                    <BlurEffect Radius="100"/>
                                                </Image.Effect>
                                            </Image>
                                            <Grid Linq:XElement.ShellContextMenu="{Binding Data.SelectedImage, Source={StaticResource SlideshowControl}}">
                                                <Grid.Background>
                                                    <ImageBrush
                                                        RenderOptions.BitmapScalingMode="{Binding Data.ScalingMode, Mode=OneWay, Source={StaticResource SlideshowControl}}"
                                                        ImageSource="{Binding}"
                                                        Stretch="{Binding Data.Stretch, Source={StaticResource SlideshowControl}}"/>
                                                </Grid.Background>
                                            </Grid>
                                            <!--
                                            <Viewbox>
                                                <Image/>
                                            </Viewbox>
                                            -->
                                        </Grid>
                                    </DataTemplate>
                                </local:TransitionControl.ContentTemplate>
                                <local:TransitionControl.ToolTip>
                                    <ContentPresenter Content="{Binding Data.SelectedImage, Source={StaticResource SlideshowControl}}"
                                        ContentTemplate="{StaticResource {x:Static Linq:XExplorer.ToolTipTemplateKey}}"/>
                                </local:TransitionControl.ToolTip>
                            </local:TransitionControl>
                            <local:ImageButton
                                x:Name="PART_Previous"
                                Command="{Data:TemplatedParent PreviousCommand}"
                                HorizontalAlignment="Left"
                                Margin="10,0,0,0"
                                Opacity="0"
                                Source="{Markup:SmallImage 128-ArrowLeft.png}"
                                SourceSize="72,48"
                                VerticalAlignment="Center"
                                Visibility="Collapsed"/>
                            <local:ImageButton
                                x:Name="PART_Next"
                                Command="{Data:TemplatedParent NextCommand}"
                                HorizontalAlignment="Right"
                                Margin="0,0,10,0"
                                Opacity="0"
                                Source="{Markup:SmallImage 128-ArrowRight.png}"
                                SourceSize="72,48"
                                VerticalAlignment="Center"
                                Visibility="Collapsed"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Duration="0:0:0.3"
                                            From="0"
                                            To="1"
                                            Storyboard.TargetName="PART_Previous"
                                            Storyboard.TargetProperty="Opacity"/>
                                        <DoubleAnimation
                                            Duration="0:0:0.3"
                                            From="0"
                                            To="1"
                                            Storyboard.TargetName="PART_Next"
                                            Storyboard.TargetProperty="Opacity"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Duration="0:0:0.3"
                                            From="1"
                                            To="0"
                                            Storyboard.TargetName="PART_Previous"
                                            Storyboard.TargetProperty="Opacity"/>
                                        <DoubleAnimation
                                            Duration="0:0:0.3"
                                            From="1"
                                            To="0"
                                            Storyboard.TargetName="PART_Next"
                                            Storyboard.TargetProperty="Opacity"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="PathType" Value="Folder">
                            <Setter TargetName="PART_Previous" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_Next" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="SelectedImageSource" Value="{x:Null}">
                            <Setter TargetName="PART_Background" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type local:StackControl}" TargetType="{x:Type local:StackControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:StackControl">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <StackPanel Linq:XElement.Name="{x:Static local:StackControl.StackPanelKey}" Orientation="{Data:TemplatedParent Orientation, Convert={x:Type Conversion:InverseOrientationConverter}}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- /// -->

    <Style x:Key="{x:Static local:ThicknessControl.DoubleUpDownStyleKey}" TargetType="local:DoubleUpDown" BasedOn="{StaticResource {x:Type local:DoubleUpDown}}"/>

    <Style x:Key="{x:Type local:ThicknessControl}" TargetType="{x:Type local:ThicknessControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Spacing" Value="0,0,2,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:ThicknessControl">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="*,*,*,*"
                            Linq:XElement.Name="{x:Static local:ThicknessControl.GridKey}"
                            Linq:XPanel.Spacing="{TemplateBinding Spacing}"
                            Linq:XPanel.SpacingExcept="Last"
                            Linq:XPanel.VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                            <local:DoubleUpDown
                                Minimum="{TemplateBinding Minimum}"
                                Maximum="{TemplateBinding Maximum}"
                                Style="{StaticResource {x:Static local:ThicknessControl.DoubleUpDownStyleKey}}"
                                ToolTip="{Markup:Loc Left}"/>
                            <local:DoubleUpDown
                                Minimum="{TemplateBinding Minimum}"
                                Maximum="{TemplateBinding Maximum}"
                                Style="{StaticResource {x:Static local:ThicknessControl.DoubleUpDownStyleKey}}"
                                ToolTip="{Markup:Loc Top}"/>
                            <local:DoubleUpDown
                                Minimum="{TemplateBinding Minimum}"
                                Maximum="{TemplateBinding Maximum}"
                                Style="{StaticResource {x:Static local:ThicknessControl.DoubleUpDownStyleKey}}"
                                ToolTip="{Markup:Loc Right}"/>
                            <local:DoubleUpDown
                                Minimum="{TemplateBinding Minimum}"
                                Maximum="{TemplateBinding Maximum}"
                                Style="{StaticResource {x:Static local:ThicknessControl.DoubleUpDownStyleKey}}"
                                ToolTip="{Markup:Loc Bottom}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- /// -->

    <Style x:Key="{x:Static local:UnitControl.ComboBoxStyleKey}" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}"/>

    <Style x:Key="{x:Static local:UnitControl.DoubleUpDownStyleKey}" TargetType="{x:Type local:DoubleUpDown}" BasedOn="{StaticResource {x:Type local:DoubleUpDown}}"/>

    <Style x:Key="{x:Type local:UnitControl}" TargetType="{x:Type local:UnitControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Spacing" Value="0,0,2,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:UnitControl">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="*,Auto"
                            Linq:XPanel.Spacing="{TemplateBinding Spacing}"
                            Linq:XPanel.SpacingExcept="Last"
                            Linq:XPanel.VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                            <local:DoubleUpDown Margin="0,0,5,0"
                                IsReadOnly="{TemplateBinding IsReadOnly}"
                                Style="{StaticResource {x:Static local:UnitControl.DoubleUpDownStyleKey}}"
                                ToolTip="{Markup:Loc Value}"
                                Value="{Data:TemplatedParent ActualValue, Mode=TwoWay}"/>
                            <ContentPresenter x:Name="ContentPresenter0" Content="{TemplateBinding IsReadOnly}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter TargetName="ContentPresenter0" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <TextBlock Text="{Data:Bind Unit, Convert=Conversion:AbbreviationAttributeConverter, From=FindAncestor, FromType={x:Type local:UnitControl}}"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="False">
                            <Setter TargetName="ContentPresenter0" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <ComboBox
                                            ItemsSource="{Markup:Enumerate {x:Type Numbers:Unit}}"
                                            SelectedItem="{Data:Ancestor Unit, local:UnitControl, Mode=TwoWay}"
                                            Style="{StaticResource {x:Static local:UnitControl.ComboBoxStyleKey}}"
                                            ToolTip="{Markup:Loc Unit}"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- /// -->

    <Style x:Key="{x:Type local:GridLines}" TargetType="{x:Type local:GridLines}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Pen">
            <Setter.Value>
                <Pen Thickness="1" Brush="Black" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:GridLines}">
                    <Border
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <Border.Background>
                            <DrawingBrush Viewport="0,0,5,5" ViewportUnits="Absolute" TileMode="Tile">
                                <DrawingBrush.Drawing>
                                    <DrawingGroup>
                                        <DrawingGroup.Children>
                                            <GeometryDrawing Geometry="M-.5,0 L50,0 M0,10 L50,10 M0,20 L50,20 M0,30 L50,30 M0,40 L50,40 M0,0 L0,50 M10,0 L10,50 M20,0 L20,50 M30,0 L30,50 M40,0 L40,50"
                                                Pen="{Data:TemplatedParent Pen}"/>
                                        </DrawingGroup.Children>
                                    </DrawingGroup>
                                </DrawingBrush.Drawing>
                            </DrawingBrush>
                        </Border.Background>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>