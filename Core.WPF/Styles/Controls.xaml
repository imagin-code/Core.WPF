<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:l="clr-namespace:Imagin.Core.Local.Extensions"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Conversion="clr-namespace:Imagin.Core.Conversion"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Markup="clr-namespace:Imagin.Core.Markup"
    xmlns:Media="clr-namespace:Imagin.Core.Media"
    xmlns:Numbers="clr-namespace:Imagin.Core.Numerics;assembly=Imagin.Core"
    xmlns:System="clr-namespace:System;assembly=mscorlib">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=Button}"/>
        <ResourceDictionary Source="{local:StyleKey Key=ComboBox}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Control}"/>
        <ResourceDictionary Source="{local:StyleKey Key=ProgressBar}"/>
        <ResourceDictionary Source="{local:StyleKey Key=TextBlock}"/>
        <ResourceDictionary Source="{local:StyleKey Key=TextBox}"/>
    </ResourceDictionary.MergedDictionaries>
    <!-- ... -->
    
    <Style x:Key="{x:Type local:CarouselControl}" TargetType="{x:Type local:CarouselControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="LeftButtonTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:ImageButton
                        Command="{Binding}"
                        Margin="0,0,10,0"
                        Source="{Markup:InternalImage 128-ArrowLeft.png}"
                        SourceSize="72,48"
                        ToolTip="{l:Loc Previous}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="RightButtonTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:ImageButton
                        Command="{Binding}"
                        Margin="10,0,0,0"
                        Source="{Markup:InternalImage 128-ArrowRight.png}"
                        SourceSize="72,48"
                        ToolTip="{l:Loc Next}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:CarouselControl">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,*,Auto">
                            <Grid.Resources>
                                <Data:Reference x:Key="CarouselControl" Data="{Data:TemplatedParent}"/>
                            </Grid.Resources>
                            <ContentPresenter
                                Content="{Data:TemplatedParent PreviousCommand}"
                                ContentTemplate="{TemplateBinding LeftButtonTemplate}"/>

                            <ListBox Linq:XElement.Name="{x:Static local:CarouselControl.ListBoxKey}"
                                BorderThickness="0"
                                ItemsSource="{TemplateBinding ItemsSource}"
                                ItemTemplate="{TemplateBinding ItemTemplate}"
                                Linq:XItemsControl.SortDirection="{TemplateBinding SortDirection}"
                                Linq:XItemsControl.SortName="{TemplateBinding SortName}"
                                Margin="5,0"
                                Padding="0"
                                ScrollViewer.HorizontalScrollBarVisibility="Auto"
                                ScrollViewer.VerticalScrollBarVisibility="Hidden"
                                SelectedIndex="{Data:TemplatedParent SelectedIndex, Mode=TwoWay}"
                                SelectedItem="{Data:TemplatedParent SelectedItem, Mode=TwoWay}"
                                SelectionMode="Single">
                                <ListBox.ItemContainerStyle>
                                    <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                                        <Setter Property="Visibility">
                                            <Setter.Value>
                                                <MultiBinding Converter="{x:Static local:CarouselControl.VisibilityConverter}">
                                                    <Binding/>
                                                    <Binding Path="Data.ItemsSource" Source="{StaticResource CarouselControl}"/>
                                                    <Binding Path="Data.ItemsSource.Count" Source="{StaticResource CarouselControl}"/>
                                                    <Binding Path="Data.Columns" Source="{StaticResource CarouselControl}"/>
                                                    <Binding Path="Data.Index" Source="{StaticResource CarouselControl}"/>
                                                    <Binding Path="Data.SortDirection" Source="{StaticResource CarouselControl}"/>
                                                    <Binding Path="Data.SortName" Source="{StaticResource CarouselControl}"/>
                                                    <Binding Path="Data" Source="{StaticResource CarouselControl}"/>
                                                </MultiBinding>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ListBox.ItemContainerStyle>
                                <ListBox.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <UniformGrid>
                                            <UniformGrid.Columns>
                                                <MultiBinding Converter="{x:Static local:CarouselControl.ColumnConverter}">
                                                    <Binding Path="Data.Columns" Source="{StaticResource CarouselControl}"/>
                                                    <Binding Path="Data.ItemsSource.Count" Source="{StaticResource CarouselControl}"/>
                                                </MultiBinding>
                                            </UniformGrid.Columns>
                                        </UniformGrid>
                                    </ItemsPanelTemplate>
                                </ListBox.ItemsPanel>
                            </ListBox>

                            <ContentPresenter Content="{Data:TemplatedParent NextCommand}"
                                ContentTemplate="{TemplateBinding RightButtonTemplate}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type local:DirectionControl}" TargetType="{x:Type local:DirectionControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="EIcon" 
            Value="{Markup:InternalImage Image=ArrowE}" />
        <Setter Property="ELabel" 
            Value="{l:Loc Right}" />
        <Setter Property="NIcon" 
            Value="{Markup:InternalImage Image=ArrowN}" />
        <Setter Property="NLabel" 
            Value="{l:Loc Top}" />
        <Setter Property="NEIcon" 
            Value="{Markup:InternalImage Image=ArrowNE}" />
        <Setter Property="NELabel" 
            Value="{l:Loc TopRight}" />
        <Setter Property="NWIcon" 
            Value="{Markup:InternalImage Image=ArrowNW}" />
        <Setter Property="NWLabel" 
            Value="{l:Loc TopLeft}" />
        <Setter Property="OriginIcon" 
            Value="{Markup:InternalImage Image=ArrowP}" />
        <Setter Property="OriginLabel" 
            Value="{l:Loc Center}" />
        <Setter Property="SIcon" 
            Value="{Markup:InternalImage Image=ArrowS}" />
        <Setter Property="SLabel" 
            Value="{l:Loc Bottom}" />
        <Setter Property="SEIcon" 
            Value="{Markup:InternalImage Image=ArrowSE}" />
        <Setter Property="SELabel" 
            Value="{l:Loc BottomRight}" />
        <Setter Property="SWIcon" 
            Value="{Markup:InternalImage Image=ArrowSW}" />
        <Setter Property="SWLabel" 
            Value="{l:Loc BottomLeft}" />
        <Setter Property="WIcon" 
            Value="{Markup:InternalImage Image=ArrowW}" />
        <Setter Property="WLabel" 
            Value="{l:Loc Left}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:DirectionControl">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <ItemsControl ClipToBounds="True" ItemsSource="{TemplateBinding Directions}">
                            <ItemsControl.ItemContainerStyle>
                                <Style TargetType="{x:Type ContentPresenter}">
                                    <Setter Property="Grid.Row" Value="{Binding Row}" />
                                    <Setter Property="Grid.Column" Value="{Binding Column}" />
                                    <Setter Property="Opacity" Value="0" />
                                    <Style.Triggers>
                                        <EventTrigger RoutedEvent="ContentPresenter.SizeChanged">
                                            <BeginStoryboard>
                                                <BeginStoryboard.Storyboard>
                                                    <Storyboard>
                                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1.0" Duration="0:0:0.5" AccelerationRatio="0.4" DecelerationRatio="0.4"/>
                                                    </Storyboard>
                                                </BeginStoryboard.Storyboard>
                                            </BeginStoryboard>
                                        </EventTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ItemsControl.ItemContainerStyle>
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <Grid Linq:XGrid.Columns="0,24,24,24,0" Linq:XGrid.Rows="0,24,24,24,0"/>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <local:ImageButton
                                        Command="{Data:Ancestor ShiftCommand, local:DirectionControl}"
                                        CommandParameter="{Binding}"
                                        Source="{Binding Icon}"
                                        SourceSize="16,16"
                                        ToolTip="{Binding Name}"/>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ... -->

    <Style x:Key="{x:Static local:DownloadControl.ProgressBarStyleKey}" TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource {x:Type ProgressBar}}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="MinHeight" Value="15"/>
    </Style>

    <Style x:Key="{x:Static local:DownloadControl.TextBlockStyleKey}" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}"/>

    <Style x:Key="{x:Type local:DownloadControl}" TargetType="{x:Type local:DownloadControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:DownloadControl">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <StackPanel Linq:XPanel.Spacing="0,0,0,5" Linq:XPanel.SpacingExcept="Last">
                            <ContentPresenter Content="{TemplateBinding Message}"
                                ContentTemplate="{TemplateBinding MessageTemplate}"
                                ContentTemplateSelector="{TemplateBinding MessageTemplateSelector}"
                                Visibility="{Data:VisibilityBinding Message, Relative=TemplatedParent}"/>

                            <ProgressBar Value="{TemplateBinding Progress}"
                                Style="{StaticResource {x:Static local:DownloadControl.ProgressBarStyleKey}}"/>

                            <local:TitleLabel Content="{l:Loc Progress, Suffix=:}"/>
                            <TextBlock FontStyle="Italic" Text="{TemplateBinding Processed}"
                                Style="{StaticResource {x:Static local:DownloadControl.TextBlockStyleKey}}"/>

                            <local:TitleLabel Content="{l:Loc Remaining, Suffix=:}"/>
                            <TextBlock FontStyle="Italic" Text="{TemplateBinding Remaining, Converter={x:Static Conversion:ShortTimeConverter.Default}}"
                                Style="{StaticResource {x:Static local:DownloadControl.TextBlockStyleKey}}"/>

                            <local:TitleLabel Content="{l:Loc Speed, Suffix=:}"/>
                            <TextBlock FontStyle="Italic" Text="{TemplateBinding Speed, Converter={x:Static Conversion:FileSpeedConverter.Default}}"
                                Style="{StaticResource {x:Static local:DownloadControl.TextBlockStyleKey}}"/>
                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ... -->

    <Style x:Key="{x:Type local:DualColorControl}" TargetType="{x:Type local:DualColorControl}" BasedOn="{StaticResource {x:Type FrameworkElement}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:DualColorControl">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <Grid Linq:XGrid.Rows="Auto,*">
                            <Grid 
                                x:Name="PART_Grid"
                                Background="Transparent"
                                ToolTip="{l:Loc Reset}">
                                <Border 
                                    Cursor="Hand"
                                    Background="{x:Static Media:CheckerBrush.Default}"
                                    BorderThickness="1"
                                    BorderBrush="Black"
                                    Margin="5,5,0,0"
                                    HorizontalAlignment="Left" 
                                    VerticalAlignment="Top">
                                    <Rectangle 
                                        Width="10" 
                                        Height="10" 
                                        Fill="{TemplateBinding DefaultBackground, Converter={x:Static Conversion:ColorToSolidColorBrushConverter.Default}}"/>
                                </Border>
                                <Border 
                                    Cursor="Hand" 
                                    Background="{x:Static Media:CheckerBrush.Default}"
                                    BorderThickness="1"
                                    BorderBrush="Black"
                                    HorizontalAlignment="Left" 
                                    VerticalAlignment="Top">
                                    <Rectangle
                                        Width="10" 
                                        Height="10" 
                                        Fill="{TemplateBinding DefaultForeground, Converter={x:Static Conversion:ColorToSolidColorBrushConverter.Default}}"/>
                                </Border>
                            </Grid>
                            <Grid 
                                Grid.Row="1" 
                                Margin="0,5,0,0">
                                <local:ColorBox  
                                    Height="22" 
                                    HorizontalAlignment="Left"
                                    Margin="10,10,0,0" 
                                    ToolTip="{l:Loc Background}"
                                    Value="{Data:TemplatedParent BackgroundColor, Mode=TwoWay}"
                                    VerticalAlignment="Top"
                                    Width="22"/>
                                <local:ColorBox  
                                    Height="22" 
                                    HorizontalAlignment="Left"
                                    ToolTip="{l:Loc Foreground}"
                                    Value="{Data:TemplatedParent ForegroundColor, Mode=TwoWay}"
                                    VerticalAlignment="Top"
                                    Width="22"/>

                                <Rectangle
                                    x:Name="PART_Rectangle"
                                    Cursor="Hand" 
                                    Height="15" 
                                    HorizontalAlignment="Left" 
                                    Margin="20,-10,0,0" 
                                    Stroke="{x:Null}" 
                                    ToolTip="{l:Loc Swap}"
                                    VerticalAlignment="Top" 
                                    Width="16">
                                    <Rectangle.Fill>
                                        <DrawingBrush Viewbox="0,0,11.381,12.011" ViewboxUnits="Absolute"  Stretch="Uniform">
                                            <DrawingBrush.Drawing>
                                                <DrawingGroup>
                                                    <GeometryDrawing Brush="#FF231F20" Geometry="M3.45,5.3119929 L-3.0517605E-06,2.6559988 3.45,4.6386617E-06 z"/>
                                                    <DrawingGroup>
                                                        <DrawingGroup.Transform>
                                                            <MatrixTransform Matrix="1,0,0,1,6.069,8.561"/>
                                                        </DrawingGroup.Transform>
                                                        <GeometryDrawing Brush="#FF231F20" Geometry="M5.3120054,0 L2.6560036,3.4499878 1.8798841E-06,0 z"/>
                                                    </DrawingGroup>
                                                    <DrawingGroup>
                                                        <DrawingGroup.Transform>
                                                            <MatrixTransform Matrix="1,0,0,1,2.009,2.1"/>
                                                        </DrawingGroup.Transform>
                                                        <GeometryDrawing Geometry="M6.5110028,6.5119882 C6.5110028,3.1890015 3.8230035,0.50001216 0.50000435,0.50001216">
                                                            <GeometryDrawing.Pen>
                                                                <Pen Brush="#FF231F20" DashCap="Flat" EndLineCap="Flat" LineJoin="Miter" MiterLimit="10" StartLineCap="Flat" Thickness="1"/>
                                                            </GeometryDrawing.Pen>
                                                        </GeometryDrawing>
                                                    </DrawingGroup>
                                                </DrawingGroup>
                                            </DrawingBrush.Drawing>
                                        </DrawingBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                            </Grid>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type local:ErrorControl}" TargetType="{x:Type local:ErrorControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ErrorControl}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <StackPanel Linq:XPanel.Spacing="0,0,0,5" Linq:XPanel.SpacingExcept="Last">
                            <TextBlock
                                FontStyle="Italic"
                                FontWeight="Bold"
                                Opacity="0.6"
                                Text="{Data:TemplatedParent Error.Name}"
                                TextTrimming="CharacterEllipsis"
                                TextWrapping="{TemplateBinding Wrap}"
                                ToolTip="{Data:Self Text}"/>
                            <TextBlock
                                Text="{Data:TemplatedParent Error.Text}"
                                TextTrimming="CharacterEllipsis"
                                TextWrapping="{TemplateBinding Wrap}"
                                ToolTip="{Data:Self Text}"/>
                            <Expander IsExpanded="False" Visibility="{Data:VisibilityBinding InternalError, Relative=TemplatedParent}">
                                <Expander.Header>
                                    <TextBlock
                                        FontSize="12"
                                        FontWeight="Bold"
                                        Opacity="0.6"
                                        Text="{l:Loc Internal}"
                                        TextTrimming="CharacterEllipsis"/>
                                </Expander.Header>
                                <Border
                                    BorderBrush="#11000000"
                                    BorderThickness="1"
                                    Padding="10">
                                    <ContentPresenter Content="{TemplateBinding InternalError}">
                                        <ContentPresenter.ContentTemplate>
                                            <DataTemplate>
                                                <local:ErrorControl Error="{Binding}"/>
                                            </DataTemplate>
                                        </ContentPresenter.ContentTemplate>
                                    </ContentPresenter>
                                </Border>
                            </Expander>
                            <Expander IsExpanded="False" Visibility="{Data:VisibilityBinding Error.StackTrace, Relative=TemplatedParent}">
                                <Expander.Header>
                                    <TextBlock
                                        FontSize="12"
                                        FontWeight="Bold"
                                        Opacity="0.6"
                                        Text="{l:Loc Stack}"
                                        TextTrimming="CharacterEllipsis"/>
                                </Expander.Header>
                                <Border 
                                    BorderBrush="#11000000"
                                    BorderThickness="1"
                                    Padding="10">
                                    <TextBlock
                                        FontStyle="Italic"
                                        Text="{Data:TemplatedParent Error.StackTrace}"
                                        TextTrimming="CharacterEllipsis"
                                        TextWrapping="{TemplateBinding Wrap}"
                                        ToolTip="{Data:Self Text}"/>
                                </Border>
                            </Expander>
                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type local:GradientControl}" TargetType="{x:Type local:GradientControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="PreviewBorderStyle">
            <Setter.Value>
                <Style TargetType="Border">
                    <Setter Property="Background" Value="{x:Static Media:CheckerBrush.Default}"/>
                    <Setter Property="BorderBrush" Value="Black"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="Height" Value="42"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:GradientControl}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <Grid Linq:XGrid.AutoRows="True" Linq:XGrid.Rows="Auto,Auto"
                            Linq:XPanel.Spacing="0,0,0,10" 
                            Linq:XPanel.SpacingExcept="Last">
                            <Border Style="{TemplateBinding PreviewBorderStyle}">
                                <Rectangle DataContext="{Data:TemplatedParent}" Fill="{Media:GradientStepBinding Gradient}"/>
                            </Border>
                            <Grid Linq:XGrid.Columns="Auto,*,Auto" Linq:XGrid.Rows="Auto,Auto"
                                Margin="0,10,0,0">
                                <Slider Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="0"
                                    Height="22"
                                    IsSnapToTickEnabled="True"
                                    Margin="10,0"
                                    Maximum="{Data:TemplatedParent Steps, Converter={x:Static Conversion:SubtractConverter.Default}, ConverterParameter=1}"
                                    Minimum="0"
                                    SmallChange="1"
                                    TickPlacement="BottomRight"
                                    TickFrequency="1"
                                    Value="{Data:TemplatedParent SelectedStepIndex, Converter={x:Static Conversion:Int32ToDoubleConverter.Default}, Mode=TwoWay}"
                                    VerticalAlignment="Center"/>
                                <local:Int32UpDown Grid.Column="2" Grid.Row="0"
                                    Minimum="1"
                                    Maximum="25"
                                    Value="{Data:TemplatedParent Steps, Mode=TwoWay}"
                                    VerticalAlignment="Center"
                                    Width="75"/>

                                <local:ColorBox Grid.Column="0" Grid.Row="1" 
                                    Value="{Data:TemplatedParent SelectedStep.Color, Converter={x:Static Conversion:StringColorConverter.Default}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                    VerticalAlignment="Center"/>
                                <Slider Grid.Column="1" Grid.Row="1"
                                    Height="22"
                                    IsSnapToTickEnabled="True"
                                    LargeChange="0.05"
                                    Margin="10"
                                    Maximum="1.0"
                                    Minimum="0"
                                    SmallChange="0.01"
                                    TickPlacement="BottomRight"
                                    TickFrequency="0.01"
                                    Value="{Data:TemplatedParent SelectedStep.Offset, Mode=TwoWay}"
                                    VerticalAlignment="Center"/>
                                <local:DoubleUpDown Grid.Column="2" Grid.Row="1"
                                    Minimum="0"
                                    Maximum="1.0"
                                    Increment="0.01"
                                    StringFormat="N2"
                                    Value="{Data:TemplatedParent SelectedStep.Offset, Mode=TwoWay}"
                                    VerticalAlignment="Center"
                                    Width="75"/>
                            </Grid>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type local:MatrixControl}" TargetType="{x:Type local:MatrixControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Offset="0" Color="#11000000"/>
                    <GradientStop Offset="1" Color="#22000000"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="#33000000"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Height" Value="{Data:Self Zoom}"/>
        <Setter Property="IsEditable" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:MatrixControl}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <Border.Resources>
                            <Data:Reference x:Key="Matrix" 
                                    Data="{TemplateBinding Matrix}"/>
                            <Data:Reference x:Key="MatrixControl" 
                                    Data="{Data:TemplatedParent}"/>
                        </Border.Resources>
                        <Grid>
                            <ItemsControl ItemsSource="{Data:TemplatedParent Matrix.Normalized}" Visibility="{TemplateBinding WeightVisibility}">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <UniformGrid Columns="{Binding Data.Columns, Source={StaticResource MatrixControl}}" Rows="{Binding Data.Rows, Source={StaticResource MatrixControl}}"
                                            SnapsToDevicePixels="True"
                                            UseLayoutRounding="True"/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <Rectangle Fill="{Binding Data.WeightBrush, Source={StaticResource MatrixControl}}"
                                            Opacity="{Binding}"/>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                            <ItemsControl ItemsSource="{TemplateBinding EditableMatrix}">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <UniformGrid Columns="{Binding Data.Columns, Source={StaticResource MatrixControl}}" Rows="{Binding Data.Rows, Source={StaticResource MatrixControl}}"/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <local:DoubleUpDown 
                                            CanUpDown="False"
                                            IsReadOnly="{Binding Data.IsEditable, Converter={x:Static Conversion:InverseBooleanConverter.Default}, Source={StaticResource MatrixControl}}"
                                            TextAlignment="Center"
                                            Value="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                            Visibility="{Binding Data.LabelVisibility, Source={StaticResource MatrixControl}}">
                                            <local:DoubleUpDown.Style>
                                                <Style TargetType="local:DoubleUpDown" BasedOn="{StaticResource {x:Type local:DoubleUpDown}}">
                                                    <Setter Property="BorderThickness" Value="0"/>
                                                    <Style.Triggers>
                                                        <Trigger Property="IsFocused" Value="True">
                                                            <Setter Property="BorderThickness" Value="1"/>
                                                        </Trigger>
                                                        <Trigger Property="IsKeyboardFocused" Value="True">
                                                            <Setter Property="BorderThickness" Value="1"/>
                                                        </Trigger>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="BorderThickness" Value="1"/>
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </local:DoubleUpDown.Style>
                                        </local:DoubleUpDown>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="WeightBrush">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Offset="0" Color="#02c307"/>
                    <GradientStop Offset="1" Color="#029000"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="WeightVisibility" Value="Visible"/>
        <Setter Property="Width" Value="{Data:Self Zoom}"/>
    </Style>

    <Style x:Key="{x:Type local:PatternControl}" TargetType="{x:Type local:PatternControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="#11000000"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ClosedLineStroke">
            <Setter.Value>
                <LinearGradientBrush>
                    <GradientStop Offset="0" Color="#55008C00"/>
                    <GradientStop Offset="0.5" Color="#AA008C00"/>
                    <GradientStop Offset="1" Color="#008C00"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="DotBackground">
            <Setter.Value>
                <LinearGradientBrush>
                    <GradientStop Offset="0" Color="#555"/>
                    <GradientStop Offset="1" Color="#383c40"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="DotBorderBrush" Value="#181818"/>
        <Setter Property="DotBorderThickness" Value="1"/>
        <Setter Property="DotLength" Value="48"/>
        <Setter Property="InnerDotBackground">
            <Setter.Value>
                <LinearGradientBrush>
                    <GradientStop Offset="0" Color="#e8e8e8"/>
                    <GradientStop Offset="0.5" Color="#FFF"/>
                    <GradientStop Offset="1" Color="#e8e8e8"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="InnerDotConnectedBackground">
            <Setter.Value>
                <LinearGradientBrush>
                    <GradientStop Offset="0" Color="#46b546"/>
                    <GradientStop Offset="0.5" Color="#73d073"/>
                    <GradientStop Offset="1" Color="#46b546"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="InnerDotLength" Value="28"/>
        <Setter Property="LineStroke" Value="10"/>
        <Setter Property="OpenLineStroke">
            <Setter.Value>
                <LinearGradientBrush>
                    <GradientStop Offset="0" Color="#DDD"/>
                    <GradientStop Offset="0.25" Color="#E0E0E0"/>
                    <GradientStop Offset="0.5" Color="#EAEAEA"/>
                    <GradientStop Offset="1" Color="#F0F0F0"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:PatternControl">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <Border.Resources>
                            <Data:Reference x:Key="PatternView" Data="{Data:TemplatedParent}"/>
                        </Border.Resources>
                        <Viewbox>
                            <Grid x:Name="PART_Grid">
                                <ItemsControl
                                    ItemsSource="{TemplateBinding Lines}">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <Line
                                                x:Name="PART_Line"
                                                Stroke="{Binding Data.ClosedLineStroke, Source={StaticResource PatternView}}"
                                                StrokeThickness="{Binding Data.LineStroke, Source={StaticResource PatternView}}"
                                                X1="{Binding X1, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                                X2="{Binding X2, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                                Y1="{Binding Y1, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                                Y2="{Binding Y2, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding IsOpen}" Value="True">
                                                    <Setter TargetName="PART_Line" Property="Stroke" Value="{Binding Data.OpenLineStroke, Source={StaticResource PatternView}}"/>
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <Canvas/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                </ItemsControl>
                                <ItemsControl 
                                    Height="{TemplateBinding CanvasLength}"
                                    ItemsSource="{TemplateBinding Dots}"
                                    Width="{TemplateBinding CanvasLength}">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <Border 
                                                x:Name="PART_Border"
                                                Background="{Binding Data.DotBackground, Source={StaticResource PatternView}}"
                                                BorderBrush="{Binding Data.DotBorderBrush, Source={StaticResource PatternView}}"
                                                BorderThickness="{Binding Data.DotBorderThickness, Source={StaticResource PatternView}}"
                                                CornerRadius="999"
                                                Height="{Binding Data.DotLength, Source={StaticResource PatternView}}"
                                                HorizontalAlignment="Center"
                                                VerticalAlignment="Center"
                                                Width="{Binding Data.DotLength, Source={StaticResource PatternView}}">
                                                <Border 
                                                    x:Name="PART_InnerBorder"
                                                    Background="{Binding Data.InnerDotBackground, Source={StaticResource PatternView}}"
                                                    CornerRadius="999"
                                                    Height="{Binding Data.InnerDotLength, Source={StaticResource PatternView}}"
                                                    Width="{Binding Data.InnerDotLength, Source={StaticResource PatternView}}">
                                                </Border>
                                            </Border>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding IsConnected}" Value="True">
                                                    <Setter TargetName="PART_InnerBorder" Property="Background" Value="{Binding Data.InnerDotConnectedBackground, Source={StaticResource PatternView}}"/>
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <UniformGrid Columns="3" Rows="3"/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                </ItemsControl>
                            </Grid>
                        </Viewbox>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type local:PointControl}" TargetType="{x:Type local:PointControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Background" Value="#11000000"/>
        <Setter Property="BorderBrush" Value="#33000000"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Height" Value="{Data:Self Zoom}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:PointControl}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        ClipToBounds="False">
                        <Border.Resources>
                            <Data:Reference x:Key="PointControl" Data="{Data:TemplatedParent}"/>
                        </Border.Resources>
                        <Grid ClipToBounds="False">
                            <Viewbox>
                                <Polygon Fill="#11000000"
                                    Points="{TemplateBinding Points}"
                                    Stroke="#22000000">
                                    <Polygon.StrokeThickness>
                                        <MultiBinding Converter="{x:Static Conversion:ZoomMultiConverter.Default}" Mode="OneWay">
                                            <Binding>
                                                <Binding.Source>
                                                    <System:Double>2</System:Double>
                                                </Binding.Source>
                                            </Binding>
                                            <Data:TemplatedParent Path="Zoom"/>
                                        </MultiBinding>
                                    </Polygon.StrokeThickness>
                                </Polygon>
                            </Viewbox>
                            <ItemsControl ItemsSource="{TemplateBinding MovablePoints}">
                                <ItemsControl.ItemContainerStyle>
                                    <Style TargetType="FrameworkElement">
                                        <Setter Property="Canvas.Left">
                                            <Setter.Value>
                                                <MultiBinding Converter="{x:Static Conversion:MathMultiConverter.Default}">
                                                    <Binding Path="X"/>
                                                    <Binding Source="{x:Static Numbers:NumberOperation.Multiply}"/>
                                                    <Binding Path="Data.Zoom" Source="{StaticResource PointControl}"/>
                                                    <Binding Source="{x:Static Numbers:NumberOperation.Subtract}"/>
                                                    <Binding>
                                                        <Binding.Source>
                                                            <System:Double>8</System:Double>
                                                        </Binding.Source>
                                                    </Binding>
                                                </MultiBinding>
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="Canvas.Top">
                                            <Setter.Value>
                                                <MultiBinding Converter="{x:Static Conversion:MathMultiConverter.Default}">
                                                    <Binding Path="Y"/>
                                                    <Binding Source="{x:Static Numbers:NumberOperation.Multiply}"/>
                                                    <Binding Path="Data.Zoom" Source="{StaticResource PointControl}"/>
                                                    <Binding Source="{x:Static Numbers:NumberOperation.Subtract}"/>
                                                    <Binding>
                                                        <Binding.Source>
                                                            <System:Double>8</System:Double>
                                                        </Binding.Source>
                                                    </Binding>
                                                </MultiBinding>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ItemsControl.ItemContainerStyle>
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <Canvas/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <Ellipse
                                            Fill="#00bb24"
                                            Height="16" Width="16"
                                            SnapsToDevicePixels="False"
                                            Stroke="#44000000"
                                            StrokeThickness="6"
                                            ToolTip="{Binding}">
                                            <Ellipse.ContextMenu>
                                                <ContextMenu DataContext="{Data:Self PlacementTarget.DataContext}">
                                                    <MenuItem Header="Insert after"
                                                            Command="{Binding Data.InsertAfterCommand, Source={StaticResource PointControl}}"
                                                            CommandParameter="{Binding}"/>
                                                    <MenuItem Header="Insert before"
                                                            Command="{Binding Data.InsertBeforeCommand, Source={StaticResource PointControl}}"
                                                            CommandParameter="{Binding}"/>
                                                    <Separator/>
                                                    <MenuItem Header="Remove"
                                                            Command="{Binding Data.RemoveCommand, Source={StaticResource PointControl}}"
                                                            CommandParameter="{Binding}"/>
                                                </ContextMenu>
                                            </Ellipse.ContextMenu>
                                        </Ellipse>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Width" Value="{Data:Self Zoom}"/>
    </Style>

    <!-- ... -->

    <Storyboard x:Key="MarchingAnts">
        <DoubleAnimationUsingKeyFrames 
            BeginTime="00:00:00" 
            Storyboard.TargetProperty="(Shape.StrokeDashOffset)" 
            RepeatBehavior="Forever">
            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
            <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="10"/>
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>

    <Style x:Key="{x:Type local:SelectionControl}" TargetType="{x:Type local:SelectionControl}" BasedOn="{StaticResource {x:Type FrameworkElement}}"/>

    <Style x:Key="{x:Type local:SelectionRectangle}" TargetType="{x:Type local:SelectionRectangle}" BasedOn="{StaticResource {x:Type local:SelectionControl}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:SelectionRectangle">
                    <Grid>
                        <Rectangle
                            HorizontalAlignment="Stretch"
                            SnapsToDevicePixels="True"
                            Stroke="{TemplateBinding StrokePrimary}"
                            StrokeThickness="{TemplateBinding StrokeThickness}"
                            VerticalAlignment="Stretch"/>
                        <Rectangle
                            Fill="{TemplateBinding Fill}"
                            HorizontalAlignment="Stretch"
                            SnapsToDevicePixels="True"
                            Stroke="{TemplateBinding StrokeSecondary}"
                            StrokeDashArray="2"
                            StrokeDashOffset="0"
                            StrokeThickness="{TemplateBinding StrokeThickness}"
                            VerticalAlignment="Stretch">
                            <Rectangle.Triggers>
                                <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                    <BeginStoryboard Storyboard="{StaticResource MarchingAnts}"/>
                                </EventTrigger>
                            </Rectangle.Triggers>
                        </Rectangle>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type local:SelectionPolygon}" TargetType="{x:Type local:SelectionPolygon}" BasedOn="{StaticResource {x:Type local:SelectionControl}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:SelectionPolygon">
                    <Grid>
                        <Polygon
                            Points="{Data:TemplatedParent Path.Points}"
                            Stroke="{TemplateBinding StrokePrimary}"
                            StrokeThickness="{TemplateBinding StrokeThickness}"/>
                        <Polygon
                            Fill="{TemplateBinding Fill}" 
                            Points="{Data:TemplatedParent Path.Points}"
                            Stroke="{TemplateBinding StrokeSecondary}"
                            StrokeDashArray="2" 
                            StrokeDashOffset="0"
                            StrokeThickness="{TemplateBinding StrokeThickness}">
                            <Polygon.Triggers>
                                <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                    <BeginStoryboard Storyboard="{StaticResource MarchingAnts}"/>
                                </EventTrigger>
                            </Polygon.Triggers>
                        </Polygon>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ... -->

    <Style x:Key="{x:Type local:SlideControl}" TargetType="{x:Type local:SlideControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:SlideControl}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <Border.Resources>
                            <Data:Reference x:Key="SlideView" Data="{Data:TemplatedParent}"/>
                        </Border.Resources>
                        <Grid>
                            <local:FillElement x:Name="PART_DefaultBackground" 
                                Fill="{TemplateBinding DefaultBackground}"
                                Visibility="Collapsed"/>
                            <local:TransitionControl
                                Background="Transparent"
                                Content="{TemplateBinding SelectedImageSource}"
                                Transition="{TemplateBinding Transition}">
                                <local:TransitionControl.ContentTemplate>
                                    <DataTemplate>
                                        <Grid>
                                            <Image 
                                                HorizontalAlignment="Stretch"
                                                Opacity="{Binding Data.BackgroundOpacity, Source={StaticResource SlideView}}"
                                                RenderOptions.BitmapScalingMode="{Binding Data.ScalingMode, Mode=OneWay, Source={StaticResource SlideView}}"
                                                Source="{Binding}"
                                                Stretch="UniformToFill"
                                                VerticalAlignment="Stretch"
                                                Visibility="{Binding Data.BackgroundBlur, Converter={x:Static Conversion:BooleanToVisibilityConverter.Default}, Source={StaticResource SlideView}}">
                                                <Image.Effect>
                                                    <BlurEffect Radius="100"/>
                                                </Image.Effect>
                                            </Image>
                                            <Viewbox>
                                                <Image
                                                    Linq:XElement.ShellContextMenu="{Binding Data.SelectedImage, Source={StaticResource SlideView}}"
                                                    RenderOptions.BitmapScalingMode="{Binding Data.ScalingMode, Mode=OneWay, Source={StaticResource SlideView}}"
                                                    Source="{Binding}"/>
                                            </Viewbox>
                                        </Grid>
                                    </DataTemplate>
                                </local:TransitionControl.ContentTemplate>
                                <local:TransitionControl.ToolTip>
                                    <ContentPresenter Content="{Binding Data.SelectedImage, Source={StaticResource SlideView}}"
                                        ContentTemplate="{StaticResource {x:Static Linq:XExplorer.ToolTipTemplateKey}}"/>
                                </local:TransitionControl.ToolTip>
                            </local:TransitionControl>
                            <local:ImageButton
                                x:Name="PART_Previous"
                                Command="{Data:TemplatedParent PreviousCommand}"
                                HorizontalAlignment="Left"
                                Margin="10,0,0,0"
                                Opacity="0"
                                Source="{Markup:InternalImage 128-ArrowLeft.png}"
                                SourceSize="72,48"
                                VerticalAlignment="Center"
                                Visibility="Collapsed"/>
                            <local:ImageButton
                                x:Name="PART_Next"
                                Command="{Data:TemplatedParent NextCommand}"
                                HorizontalAlignment="Right"
                                Margin="0,0,10,0"
                                Opacity="0"
                                Source="{Markup:InternalImage 128-ArrowRight.png}"
                                SourceSize="72,48"
                                VerticalAlignment="Center"
                                Visibility="Collapsed"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Duration="0:0:0.3"
                                            From="0"
                                            To="1"
                                            Storyboard.TargetName="PART_Previous"
                                            Storyboard.TargetProperty="Opacity"/>
                                        <DoubleAnimation
                                            Duration="0:0:0.3"
                                            From="0"
                                            To="1"
                                            Storyboard.TargetName="PART_Next"
                                            Storyboard.TargetProperty="Opacity"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Duration="0:0:0.3"
                                            From="1"
                                            To="0"
                                            Storyboard.TargetName="PART_Previous"
                                            Storyboard.TargetProperty="Opacity"/>
                                        <DoubleAnimation
                                            Duration="0:0:0.3"
                                            From="1"
                                            To="0"
                                            Storyboard.TargetName="PART_Next"
                                            Storyboard.TargetProperty="Opacity"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="PathType" Value="Folder">
                            <Setter TargetName="PART_Previous" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_Next" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="SelectedImageSource" Value="{x:Null}">
                            <Setter TargetName="PART_DefaultBackground" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type local:StackControl}" TargetType="{x:Type local:StackControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:StackControl">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <StackPanel Linq:XElement.Name="{x:Static local:StackControl.StackPanelKey}" Orientation="{TemplateBinding Orientation, Converter={x:Static Conversion:InverseOrientationConverter.Default}}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ... -->

    <Style x:Key="{x:Static local:ThicknessControl.DoubleUpDownStyleKey}" TargetType="local:DoubleUpDown" BasedOn="{StaticResource {x:Type local:DoubleUpDown}}"/>

    <Style x:Key="{x:Type local:ThicknessControl}" TargetType="{x:Type local:ThicknessControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Spacing" Value="0,0,2,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:ThicknessControl">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="*,*,*,*"
                            Linq:XElement.Name="{x:Static local:ThicknessControl.GridKey}"
                            Linq:XPanel.Spacing="{TemplateBinding Spacing}"
                            Linq:XPanel.SpacingExcept="Last"
                            Linq:XPanel.VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                            <local:DoubleUpDown
                                Minimum="{TemplateBinding Minimum}"
                                Maximum="{TemplateBinding Maximum}"
                                Style="{StaticResource {x:Static local:ThicknessControl.DoubleUpDownStyleKey}}"
                                ToolTip="{l:Loc Left}"/>
                            <local:DoubleUpDown
                                Minimum="{TemplateBinding Minimum}"
                                Maximum="{TemplateBinding Maximum}"
                                Style="{StaticResource {x:Static local:ThicknessControl.DoubleUpDownStyleKey}}"
                                ToolTip="{l:Loc Top}"/>
                            <local:DoubleUpDown
                                Minimum="{TemplateBinding Minimum}"
                                Maximum="{TemplateBinding Maximum}"
                                Style="{StaticResource {x:Static local:ThicknessControl.DoubleUpDownStyleKey}}"
                                ToolTip="{l:Loc Right}"/>
                            <local:DoubleUpDown
                                Minimum="{TemplateBinding Minimum}"
                                Maximum="{TemplateBinding Maximum}"
                                Style="{StaticResource {x:Static local:ThicknessControl.DoubleUpDownStyleKey}}"
                                ToolTip="{l:Loc Bottom}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- ... -->

    <Style x:Key="{x:Static local:UnitControl.ComboBoxStyleKey}" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}"/>

    <Style x:Key="{x:Static local:UnitControl.DoubleUpDownStyleKey}" TargetType="{x:Type local:DoubleUpDown}" BasedOn="{StaticResource {x:Type local:DoubleUpDown}}"/>

    <Style x:Key="{x:Type local:UnitControl}" TargetType="{x:Type local:UnitControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Spacing" Value="0,0,2,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:UnitControl">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="*,Auto"
                            Linq:XPanel.Spacing="{TemplateBinding Spacing}"
                            Linq:XPanel.SpacingExcept="Last"
                            Linq:XPanel.VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                            <local:DoubleUpDown Margin="0,0,5,0"
                                IsReadOnly="{TemplateBinding IsReadOnly}"
                                Style="{StaticResource {x:Static local:UnitControl.DoubleUpDownStyleKey}}"
                                ToolTip="{l:Loc Value}"
                                Value="{Data:TemplatedParent ActualValue, Mode=TwoWay}"/>
                            <ContentPresenter x:Name="ContentPresenter0" Content="{TemplateBinding IsReadOnly}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter TargetName="ContentPresenter0" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <TextBlock Text="{Data:AbbreviationBinding Unit, Relative=FindAncestor, RelativeType={x:Type local:UnitControl}}"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="False">
                            <Setter TargetName="ContentPresenter0" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <ComboBox
                                            ItemsSource="{Markup:Enumerate {x:Type SharedMedia:Unit}}"
                                            SelectedItem="{Data:Ancestor Unit, local:UnitControl, Mode=TwoWay}"
                                            Style="{StaticResource {x:Static local:UnitControl.ComboBoxStyleKey}}"
                                            ToolTip="{l:Loc Unit}"
                                            Width="96"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- ... -->

    <Style x:Key="{x:Type local:GridLines}" TargetType="{x:Type local:GridLines}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Pen">
            <Setter.Value>
                <Pen Thickness="1" Brush="Black" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:GridLines}">
                    <Border
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <Border.Background>
                            <DrawingBrush Viewport="0,0,5,5" ViewportUnits="Absolute" TileMode="Tile">
                                <DrawingBrush.Drawing>
                                    <DrawingGroup>
                                        <DrawingGroup.Children>
                                            <GeometryDrawing Geometry="M-.5,0 L50,0 M0,10 L50,10 M0,20 L50,20 M0,30 L50,30 M0,40 L50,40 M0,0 L0,50 M10,0 L10,50 M20,0 L20,50 M30,0 L30,50 M40,0 L40,50"
                                                Pen="{Data:TemplatedParent Pen}"/>
                                        </DrawingGroup.Children>
                                    </DrawingGroup>
                                </DrawingBrush.Drawing>
                            </DrawingBrush>
                        </Border.Background>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>