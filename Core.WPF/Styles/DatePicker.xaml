<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:l="clr-namespace:Imagin.Core.Local.Extensions"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Conversion="clr-namespace:Imagin.Core.Conversion"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Markup="clr-namespace:Imagin.Core.Markup">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=Calendar}"/>
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="{x:Type DatePicker}" TargetType="{x:Type DatePicker}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="#11000000" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CalendarStyle">
            <Setter.Value>
                <Style TargetType="{x:Type Calendar}" BasedOn="{StaticResource {x:Type Calendar}}">
                    <Setter Property="Background" Value="{local:ThemeKey Key=PopupBackground}"/>
                    <Setter Property="BorderBrush" Value="{local:ThemeKey Key=PopupBorder}"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="DisplayMode" Value="Month"/>
                    <Setter Property="Effect">
                        <Setter.Value>
                            <DropShadowEffect
                                BlurRadius="8"
                                Color="{local:ThemeKey Key=PopupDropShadow}"
                                Opacity="0.32"
                                ShadowDepth="3"/>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{local:ThemeKey Key=Text}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="IsTodayHighlighted" Value="True" />
        <Setter Property="Linq:XDatePicker.Placeholder" Value="{l:Loc Date}" />
        <Setter Property="Linq:XDatePicker.PlaceholderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock 
                        Opacity="0.4"
                        Text="{Binding}"
                        TextTrimming="CharacterEllipsis"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=Text}"/>
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="SelectedDateFormat" Value="Short" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePicker}">
                    <Border x:Name="PART_Root"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid Linq:XGrid.Columns="*,Auto"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <ContentPresenter Grid.Column="0" Grid.Row="0"
                                Content="{Data:TemplatedParent Path=(Linq:XDatePicker.Placeholder)}" 
                                ContentTemplate="{Data:TemplatedParent Path=(Linq:XDatePicker.PlaceholderTemplate)}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                IsHitTestVisible="False"
                                Margin="{TemplateBinding Padding}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Visibility="{Data:TemplatedParent DisplayDate, Converter={x:Static Conversion:ObjectToVisibilityConverter.Default}, ConverterParameter=1}"/>
                            <DatePickerTextBox x:Name="PART_TextBox"
                                Grid.Column="0"
                                Grid.Row="0"
                                Foreground="{TemplateBinding Foreground}"
                                Focusable="{TemplateBinding Focusable}"
                                HorizontalContentAlignment="Stretch"
                                Linq:XTextBox.ClearButtonVisibility="Collapsed"
                                Padding="{TemplateBinding Padding}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <local:ImageButton x:Name="PART_Button"
                                Grid.Column="1" Grid.Row="0"
                                ContentTemplate="{Markup:EmptyTemplate}"
                                ContentVisibility="Collapsed"
                                Focusable="False"
                                Margin="0,0,5,0"
                                Source="{Markup:InternalImage Calendar.png}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Popup x:Name="PART_Popup"
                                AllowsTransparency="True"
                                Margin="0"
                                Placement="Bottom"
                                PlacementTarget="{Data:TemplatedParent}"
                                StaysOpen="False"
                                Width="{TemplateBinding ActualWidth}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=TextBoxFocusedBorder}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsFocused" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=TextBoxMouseOverBorder}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>