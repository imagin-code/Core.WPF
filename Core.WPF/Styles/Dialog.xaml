<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:e="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:l="http://wpflocalizeextension.codeplex.com"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Behavior="clr-namespace:Imagin.Core.Behavior"
    xmlns:Conversion="clr-namespace:Imagin.Core.Conversion"
    xmlns:Core="clr-namespace:Imagin.Core;assembly=Imagin.Core"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Markup="clr-namespace:Imagin.Core.Markup">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=Button}"/>
        <ResourceDictionary Source="{local:StyleKey Key=ContentControl}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Control}"/>
    </ResourceDictionary.MergedDictionaries>
    <DropShadowEffect x:Key="{x:Static local:DialogControl.DropShadowEffectKey}"
        BlurRadius="8" Color="{local:ThemeKey PopupDropShadow}" Opacity="0.5" ShadowDepth="3"/>

    <DataTemplate x:Key="{x:Static local:DialogControl.HeaderPatternKey}">
        <local:PatternElement Foreground="{local:ThemeKey DialogTitleForeground}"/>
    </DataTemplate>

    <Style x:Key="{x:Type local:DialogControl}" TargetType="{x:Type local:DialogControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Background" Value="{Data:Self Content.Background, Convert=Conversion:ByteVector4ToSolidColorBrushConverter}"/>
        <Setter Property="ButtonStyle" Value="{Data:Options DialogButtonStyle}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:DialogControl}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}">
                        <Border Effect="{StaticResource {x:Static local:DialogControl.DropShadowEffectKey}}"
                            Background="{local:ThemeKey Key=DialogBackgroundSecondary}"
                            HorizontalAlignment="Center" VerticalAlignment="Center"
                            MaxHeight="{Data:TemplatedParent Content.MaxHeight}" 
                            MaxWidth="{Data:TemplatedParent Content.MaxWidth}" 
                            MinWidth="{Data:TemplatedParent Content.MinWidth}">
                            <Grid Linq:XGrid.Rows="Auto,*,Auto,Auto" Linq:XGrid.AutoRows="True">
                                <local:BottomBorder Background="{local:ThemeKey DialogTitleBackground}"
                                    BorderBrush="{local:ThemeKey DialogTitleBorder}"
                                    Padding="10" 
                                    Visibility="{Data:VisibilityBinding Content.Title, From=TemplatedParent}">
                                    <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,Auto,*,Auto,Auto">
                                        <local:ImageElement Source="{Data:TemplatedParent Content.Image, Convert={x:Type Conversion:UriToImageSourceConverter}}"
                                            Foreground="{local:ThemeKey DialogTitleForeground}"
                                            Margin="0,0,5,0"
                                            Visibility="{Data:VisibilityBinding Source, From=Self}"/>
                                        <TextBlock Text="{Data:TemplatedParent Content.Title}"
                                            FontSize="15"
                                            Foreground="{local:ThemeKey DialogTitleForeground}"/>
                                        <ContentPresenter Content="{Markup:True}" ContentTemplate="{DynamicResource {x:Static local:DialogControl.HeaderPatternKey}}" Margin="10,0"/>
                                        <local:MemberGrid DataContext="{Data:TemplatedParent}" Source="{local:SourceBinding Content, Core:HeaderItemAttribute}" 
                                            GroupName="None" Log="True"
                                            Linq:XItemsControl.EmptyTemplate="{Markup:EmptyTemplate}"
                                            Orientation="Horizontal" View="All"/>
                                        <local:ImageToggleButton DataContext="{Data:TemplatedParent}"
                                            Margin="5,0,0,0"
                                            Source="{Markup:SmallImage Image=TriangleDown}"
                                            ToolTip="{Markup:Loc Actions}"
                                            Visibility="{Data:Bind Convert=Conversion:ObjectHasMemberWithAttributeVisibilityConverter, ConverterParameter={x:Type Core:HeaderOptionAttribute}}">
                                            <local:ImageToggleButton.Menu>
                                                <local:MemberContextMenu DataContext="{Data:Self PlacementTarget.DataContext}" 
                                                    Linq:XMemberControl.Source="{local:SourceBinding Content, {x:Type Core:HeaderOptionAttribute}}"/>
                                            </local:ImageToggleButton.Menu>
                                        </local:ImageToggleButton>
                                        <ContentPresenter Content="{TemplateBinding ButtonStyle}">
                                            <ContentPresenter.ContentTemplateSelector>
                                                <local:KeyTemplateSelector>
                                                    <local:KeyTemplate DataKey="{x:Static local:ButtonStyle.Apple}">
                                                        <local:KeyTemplate.Resources>
                                                            <Style TargetType="Button" BasedOn="{StaticResource {x:Static Linq:XButton.DefaultStyleKey}}">
                                                                <Setter Property="Background" Value="{Data:Self Foreground, Convert=Conversion:SolidColorBrushBrightnessConverter, Parameter=70}" />
                                                                <Setter Property="Border.CornerRadius" Value="999"/>
                                                                <Setter Property="BorderThickness" Value="0" />
                                                                <Setter Property="Cursor" Value="Hand" />
                                                                <Setter Property="Height" Value="12"/>
                                                                <Setter Property="Padding" Value="0" />
                                                                <Setter Property="Width" Value="12"/>
                                                                <Setter Property="Window.IsHitTestVisible" Value="True"/>
                                                                <Style.Triggers>
                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                        <Setter Property="Background" Value="{Data:Self Foreground, Convert=Conversion:SolidColorBrushBrightnessConverter, Parameter=50}" />
                                                                    </Trigger>
                                                                    <Trigger Property="IsPressed" Value="True">
                                                                        <Setter Property="Background" Value="{Data:Self Foreground, Convert=Conversion:SolidColorBrushBrightnessConverter, Parameter=30}" />
                                                                    </Trigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                            <Style TargetType="local:ImageElement" BasedOn="{StaticResource {x:Type local:ImageElement}}">
                                                                <Setter Property="Window.IsHitTestVisible" Value="False"/>
                                                            </Style>
                                                        </local:KeyTemplate.Resources>
                                                        <Button Foreground="#CC3344"
                                                            Command="{Data:Ancestor CloseCommand, local:DialogPresenter}"
                                                            ToolTip="{Markup:Loc Close}"/>
                                                    </local:KeyTemplate>
                                                    <local:KeyTemplate DataKey="{x:Static local:ButtonStyle.Classic}">
                                                        <local:WindowButton
                                                            Command="{Data:Ancestor CloseCommand, local:DialogPresenter}"
                                                            Content="{Markup:SmallImage X.png}"
                                                            Margin="1"
                                                            ToolTip="{Markup:Loc Close}"/>
                                                    </local:KeyTemplate>
                                                    <local:KeyTemplate DataKey="{x:Static local:ButtonStyle.Simple}">
                                                        <local:ImageButton
                                                            Command="{Data:Ancestor CloseCommand, local:DialogPresenter}"
                                                            Source="{Markup:SmallImage X.png}"
                                                            ToolTip="{Markup:Loc Close}"/>
                                                    </local:KeyTemplate>
                                                </local:KeyTemplateSelector>
                                            </ContentPresenter.ContentTemplateSelector>
                                        </ContentPresenter>
                                    </Grid>
                                </local:BottomBorder>
                                <Border Background="{local:ThemeKey DialogBodyBackground}"
                                    Padding="{TemplateBinding Padding}">
                                    <ContentPresenter x:Name="Content" Content="{Data:TemplatedParent Content.Content}">
                                        <e:Interaction.Behaviors>
                                            <Behavior:DynamicResourceBehavior Key="{Data:TemplatedParent Content.ContentTemplate}" Property="{x:Static ContentPresenter.ContentTemplateProperty}" />
                                        </e:Interaction.Behaviors>
                                    </ContentPresenter>
                                </Border>
                                <local:TopBorder Background="{local:ThemeKey DialogFooterBackground}"
                                    BorderBrush="{local:ThemeKey DialogFooterBorder}"
                                    Padding="10" 
                                    Visibility="{Data:VisibilityBinding Content.Buttons, From=TemplatedParent}">
                                    <ItemsControl
                                        HorizontalAlignment="Right"
                                        ItemsSource="{Data:TemplatedParent Content.Buttons}"
                                        VerticalAlignment="Center">
                                        <ItemsControl.ItemContainerStyle>
                                            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                                                <Setter Property="Command" Value="{Data:Ancestor CloseCommand, local:DialogPresenter}"/>
                                                <Setter Property="CommandParameter" Value="{Data:Self Path=(Linq:XButton.Result)}"/>
                                                <Setter Property="Margin" Value="3,0,0,0"/>
                                            </Style>
                                        </ItemsControl.ItemContainerStyle>
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <StackPanel Orientation="Horizontal"/>
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                    </ItemsControl>
                                </local:TopBorder>
                                <Border Background="{local:ThemeKey Key=Accent}" Height="3"/>
                            </Grid>
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>