<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:e="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:l="http://wpflocalizeextension.codeplex.com"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Analytics="clr-namespace:Imagin.Core.Analytics"
    xmlns:Behavior="clr-namespace:Imagin.Core.Behavior"
    xmlns:Conversion="clr-namespace:Imagin.Core.Conversion"
    xmlns:Core="clr-namespace:Imagin.Core;assembly=Imagin.Core"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Markup="clr-namespace:Imagin.Core.Markup"
    xmlns:Models="clr-namespace:Imagin.Core.Models"
    xmlns:Reflection="clr-namespace:Imagin.Core.Reflection"
    xmlns:SharedAnalytics="clr-namespace:Imagin.Core.Analytics;assembly=Imagin.Core">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=Color}"/>
        <ResourceDictionary Source="{local:StyleKey Key=ComboBox}"/>
        <ResourceDictionary Source="{local:StyleKey Key=ContentControl}"/>
        <ResourceDictionary Source="{local:StyleKey Key=ContextMenu}"/>
        <ResourceDictionary Source="{local:StyleKey Key=DataGrid}"/>
        <ResourceDictionary Source="{local:StyleKey Key=FrameworkElement}"/>
        <ResourceDictionary Source="{local:StyleKey Key=GridSplitter}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Menu}"/>
        <ResourceDictionary Source="{local:StyleKey Key=TabControl}"/>
        <ResourceDictionary Source="{local:StyleKey Key=TextBlock}"/>
        <ResourceDictionary Source="{local:StyleKey Key=ToolBar}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Window}"/>
    </ResourceDictionary.MergedDictionaries>
    <!-- Find  -->

    <DataTemplate x:Key="{x:Static local:DockControl.FindTemplateKey}">
        <local:FindBox CloseCommand="{Data:Ancestor DockControl.CloseFindCommand, local:DockRootControl}"
            FindText="{Data:PanelBinding FindText, Models:FindPanel}"
            HorizontalAlignment="Right"
            Linq:XElement.CanResize="True"
            Linq:XElement.ResizeCoerceAxis="X"
            Linq:XElement.ResizeCoerceDirection="SW"
            Linq:XElement.ResizeSnap="1"
            MinWidth="360"
            ResultsCommand="{Data:Ancestor DockControl.FindResultsCommand, local:DockRootControl}"
            VerticalAlignment="Top">
            <Linq:XElement.ResizeThumbStyle>
                <Style TargetType="{x:Type Thumb}">
                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Thumb}">
                                <Rectangle Cursor="SizeWE" Fill="Transparent" Height="16" Width="16"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Linq:XElement.ResizeThumbStyle>
            <local:FindBox.Visibility>
                <Data:MultiBind Converter="{x:Static local:DockControl.SearchVisibilityConverter}">
                    <Binding/>
                    <Data:Ancestor Path="DockControl.ActiveFind" Type="local:DockRootControl"/>
                </Data:MultiBind>
            </local:FindBox.Visibility>
        </local:FindBox>
    </DataTemplate>

    <!-- Panel -->
    
    <DataTemplate x:Key="{x:Static local:DockControl.PanelOptionsTemplateKey}">
        <local:MemberGrid Source="{local:SourceBinding Core:OptionAttribute}"
            BorderThickness="0"
            GroupName="Category"
            HeaderVisibility="Collapsed"/>
    </DataTemplate>

    <!-- Content -->

    <DataTemplate x:Key="{x:Static local:DockControl.ContentHeaderTemplateKey}">
        <local:BottomBorder>
            <local:MemberGrid Source="{local:SourceBinding Core:HeaderAttribute}"
                HeaderVisibility="Collapsed"
                Orientation="Horizontal"
                Padding="5"
                View="All"/>
        </local:BottomBorder>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:DockControl.ContentFooterTemplateKey}">
        <local:TopBorder>
            <local:MemberGrid Source="{local:SourceBinding Core:FooterAttribute}"
                HeaderVisibility="Collapsed"
                Orientation="Horizontal"
                Padding="5"
                View="All"/>
        </local:TopBorder>
    </DataTemplate>

    <!-- Document -->

    <ContextMenu x:Key="{x:Static local:DockControl.DocumentMenuKey}" x:Shared="False"
        DataContext="{Data:Self PlacementTarget.DataContext}"
        Linq:XElement.RelativeTag="local:DockRootControl"
        Linq:XElement.RelativeTagSource="{Data:Self PlacementTarget}">
        <ContextMenu.Resources>
            <Data:Reference x:Key="DockControl" Data="{Data:Ancestor Tag.DockControl, ContextMenu}"/>
        </ContextMenu.Resources>
        <MenuItem Header="{Markup:Loc Dock}"
            Command="{Binding Data.DockDocumentCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Image=Dock}"/>
        <MenuItem Header="{Markup:Loc DockAll}"
            Command="{Binding Data.DockAllDocumentsCommand, Source={StaticResource DockControl}}"
            Icon="{Markup:SmallImage Image=DockAll}"/>
        <Separator/>
        <MenuItem Header="{Markup:Loc Float}"
            Command="{Binding Data.FloatCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Image=Float}"/>
        <MenuItem Header="{Markup:Loc FloatAll}"
            Command="{Binding Data.FloatAllDocumentsCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Image=FloatAll}"/>
        <Separator/>
        <MenuItem Header="{Markup:Loc Minimize}"
            Command="{Binding Data.MinimizeCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Minimize.png}"
            Visibility="{Data:Self IsEnabled, Convert={x:Type Conversion:BooleanToVisibilityConverter}}"/>
        <MenuItem Header="{Markup:Loc MinimizeAll}"
            Command="{Binding Data.MinimizeAllCommand, Source={StaticResource DockControl}}"
            Icon="{Markup:SmallImage Image=MinimizeAll}"
            Visibility="{Data:Self IsEnabled, Convert={x:Type Conversion:BooleanToVisibilityConverter}}"/>
        <Separator/>
        <MenuItem Header="{Markup:Loc MoveToPreviousGroup}"
            Command="{Binding Data.MoveDocumentToPreviousGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Image=MoveToPreviousGroup}"
            Visibility="{Data:Self IsEnabled, Convert={x:Type Conversion:BooleanToVisibilityConverter}}"/>
        <MenuItem Header="{Markup:Loc MoveAllToPreviousGroup}"
            Command="{Binding Data.MoveAllDocumentsToPreviousGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Image=MoveAllToPreviousGroup}"
            Visibility="{Data:Self IsEnabled, Convert={x:Type Conversion:BooleanToVisibilityConverter}}"/>
        <Separator/>
        <MenuItem Header="{Markup:Loc MoveToNextGroup}"
            Command="{Binding Data.MoveDocumentToNextGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Image=MoveToNextGroup}"
            Visibility="{Data:Self IsEnabled, Convert={x:Type Conversion:BooleanToVisibilityConverter}}"/>
        <MenuItem Header="{Markup:Loc MoveAllToNextGroup}"
            Command="{Binding Data.MoveAllDocumentsToNextGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Image=MoveAllToNextGroup}"
            Visibility="{Data:Self IsEnabled, Convert={x:Type Conversion:BooleanToVisibilityConverter}}"/>
        <Separator/>
        <MenuItem Header="{Markup:Loc NewHorizontalGroup}"
            Command="{Binding Data.NewDocumentHorizontalGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Image=GroupHorizontal}"/>
        <MenuItem Header="{Markup:Loc NewVerticalGroup}"
            Command="{Binding Data.NewDocumentVerticalGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Image=GroupVertical}"/>
        <Separator/>
        <MenuItem Header="{Markup:Loc Restore}"
            Command="{Binding Data.RestoreCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Restore.png}"
            Visibility="{Data:Self IsEnabled, Convert={x:Type Conversion:BooleanToVisibilityConverter}}"/>
        <MenuItem Header="{Markup:Loc RestoreAll}"
            Command="{Binding Data.RestoreAllCommand, Source={StaticResource DockControl}}"
            Icon="{Markup:SmallImage Image=RestoreAll}"
            Visibility="{Data:Self IsEnabled, Convert={x:Type Conversion:BooleanToVisibilityConverter}}"/>
        <Separator/>
        <MenuItem Header="{Markup:Loc Close}"
            Command="{Binding Data.CloseDocumentCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Close.png}"/>
        <MenuItem Header="{Markup:Loc CloseAll}"
            Command="{Binding Data.CloseAllDocumentsCommand, Source={StaticResource DockControl}}"
            Icon="{Markup:SmallImage CloseAll.png}"/>
        <MenuItem Header="{Markup:Loc CloseAllButThis}"
            Command="{Binding Data.CloseAllDocumentsButThisCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage CloseAllButThis.png}"/>
    </ContextMenu>

    <DataTemplate x:Key="{x:Static local:DockControl.DocumentTemplateKey}">
        <Grid Linq:XGrid.AutoRows="True" Linq:XGrid.Rows="Auto,*,Auto">
            <ContentPresenter x:Name="Header" Content="{Binding}" ContentTemplate="{Markup:EmptyTemplate}"/>
            <Grid>
                <ContentPresenter Content="{Binding}"
                    ContentTemplate="{Data:Ancestor DockControl.DocumentTemplate, local:DockRootControl}"
                    ContentTemplateSelector="{Data:Ancestor DockControl.DocumentTemplateSelector, local:DockRootControl}"/>
                <ContentPresenter Content="{Binding}"
                    ContentTemplate="{StaticResource {x:Static local:DockControl.FindTemplateKey}}"/>
            </Grid>
            <ContentPresenter x:Name="Footer" Content="{Binding}" ContentTemplate="{Markup:EmptyTemplate}"/>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Data:Bind Convert=Conversion:ObjectHasMemberWithAttributeConverter, Parameter={x:Type Core:FooterAttribute}}" Value="True">
                <Setter TargetName="Footer" Property="ContentTemplate" Value="{StaticResource {x:Static local:DockControl.ContentFooterTemplateKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Data:Bind Convert=Conversion:ObjectHasMemberWithAttributeConverter, Parameter={x:Type Core:HeaderAttribute}}" Value="True">
                <Setter TargetName="Header" Property="ContentTemplate" Value="{StaticResource {x:Static local:DockControl.ContentHeaderTemplateKey}}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- Panels -->

    <ContextMenu x:Key="{x:Static local:DockControl.PanelMenuKey}" x:Shared="False" 
        DataContext="{Data:Self PlacementTarget.DataContext}"
        Linq:XElement.RelativeTag="local:DockRootControl"
        Linq:XElement.RelativeTagSource="{Data:Self PlacementTarget}">
        <ContextMenu.Resources>
            <Data:Reference x:Key="DockControl" Data="{Data:Ancestor Tag.DockControl, ContextMenu}"/>
        </ContextMenu.Resources>
        <MenuItem Header="{Markup:Loc Collapse}"
            Command="{Binding Data.CollapsePanelsCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Image=Collapse}"/>
        <MenuItem Header="{Markup:Loc Expand}"
            Command="{Binding Data.ExpandPanelsCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Image=Expand}"/>
        <Separator/>
        <MenuItem Header="{Markup:Loc Dock}"
            Command="{Binding Data.DockPanelCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Image=Dock}"/>
        <MenuItem Header="{Markup:Loc DockAll}"
            Command="{Binding Data.DockAllPanelsCommand, Source={StaticResource DockControl}}"
            Icon="{Markup:SmallImage Image=DockAll}"/>
        <Separator/>
        <MenuItem Header="{Markup:Loc Float}"
            Command="{Binding Data.FloatCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Image=Float}"/>
        <MenuItem Header="{Markup:Loc FloatAll}"
            Command="{Binding Data.FloatAllPanelsCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Image=FloatAll}"/>
        <Separator/>
        <MenuItem Header="{Markup:Loc Hide}"
            Command="{Binding Data.HideCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Image=Hide}"/>
        <MenuItem Header="{Markup:Loc HideAll}"
            Command="{Binding Data.HideAllCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Image=HideAll}"/>
        <Separator/>
        <MenuItem Header="{Markup:Loc MoveToNextGroup}"
            Command="{Binding Data.MovePanelToNextGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Image=MoveToNextGroup}"/>
        <MenuItem Header="{Markup:Loc MoveAllToNextGroup}"
            Command="{Binding Data.MoveAllPanelsToNextGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Image=MoveAllToNextGroup}"/>
        <Separator/>
        <MenuItem Header="{Markup:Loc MoveToPreviousGroup}"
            Command="{Binding Data.MovePanelToPreviousGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Image=MoveToPreviousGroup}"/>
        <MenuItem Header="{Markup:Loc MoveAllToPreviousGroup}"
            Command="{Binding Data.MoveAllPanelsToPreviousGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Image=MoveAllToPreviousGroup}"/>
        <Separator/>
        <MenuItem Header="{Markup:Loc NewHorizontalGroup}"
            Command="{Binding Data.NewPanelHorizontalGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Image=GroupHorizontal}"/>
        <MenuItem Header="{Markup:Loc NewVerticalGroup}"
            Command="{Binding Data.NewPanelVerticalGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Image=GroupVertical}"/>
        <Separator/>
        <MenuItem Header="{Markup:Loc Pin}"
            Command="{Binding Data.PinCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Image=Pin}"
            Visibility="{Data:VisibilityBinding IsEnabled, From=Self}"/>
        <MenuItem Header="{Markup:Loc PinAll}"
            Command="{Binding Data.PinAllCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Image=PinAll}"/>
        <Separator/>
        <MenuItem Header="{Markup:Loc ShowAll}"
            Command="{Binding Data.ShowAllCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Image=ShowAll}"/>
        <Separator/>
        <MenuItem Header="{Markup:Loc Unpin}"
            Command="{Binding Data.UnpinCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Image=Unpin}"
            Visibility="{Data:VisibilityBinding IsEnabled, From=Self}"/>
        <MenuItem Header="{Markup:Loc UnpinAll}"
            Command="{Binding Data.UnpinAllCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:SmallImage Image=UnpinAll}"
            Visibility="{Data:VisibilityBinding IsEnabled, From=Self}"/>
    </ContextMenu>

    <!-- /// -->

    <DataTemplate x:Key="{x:Static local:DockControl.PanelHeaderPatternKey}">
        <local:PatternElement Foreground="{Data:Ancestor FrameworkElement, Path=(local:ImageElement.Foreground)}"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:DockControl.PanelHeaderTemplateKey}">
        <Grid Linq:XGrid.Columns="Auto,Auto,Auto,*,Auto,Auto,Auto,Auto,Auto">
            <ContentPresenter Grid.Column="0"
                Content="{Binding}"
                ContentTemplate="{Data:Ancestor DockControl.PanelIconTemplate, local:DockRootControl}"
                ContentTemplateSelector="{Data:Ancestor DockControl.PanelIconTemplateSelector, local:DockRootControl}"/>
            <ContentPresenter Grid.Column="1"
                Content="{Binding}"
                ContentTemplate="{Data:Ancestor DockControl.PanelTitleTemplate, local:DockRootControl}"
                Margin="5,0"/>
            <local:ProgressCircle Grid.Column="2"
                Height="16"
                Margin="0,0,5,0"
                Width="16"
                Visibility="{Data:VisibilityBinding IsBusy}"/>
            <ContentPresenter Grid.Column="3" Content="{Binding}"
                ContentTemplate="{DynamicResource {x:Static local:DockControl.PanelHeaderPatternKey}}"/>
            <local:MemberGrid Grid.Column="4" 
                Linq:XItemsControl.EmptyTemplate="{Markup:EmptyTemplate}"
                Margin="5,0,0,0" 
                Orientation="Horizontal" 
                Source="{local:SourceBinding Core:HeaderItemAttribute}"/>
            <local:ImageToggleButton Grid.Column="5"
                IsChecked="{Data:TwoWay IsOptionsVisible}"
                Padding="5,2"
                Source="{Markup:SmallImage Image=Options}"
                ToolTip="{Markup:Loc Options}"
                Visibility="{Data:Bind Convert=Conversion:ObjectHasMemberWithAttributeVisibilityConverter, Parameter={x:Type Core:OptionAttribute}}"/>
            <local:ImageToggleButton Grid.Column="6"
                Padding="5,2"
                Source="{Markup:SmallImage Image=TriangleDown}"
                ToolTip="{Markup:Loc Actions}"
                Visibility="{Data:Bind Convert=Conversion:ObjectHasMemberWithAttributeVisibilityConverter, ConverterParameter={x:Type Core:HeaderOptionAttribute}}">
                <local:ImageToggleButton.Menu>
                    <local:MemberContextMenu DataContext="{Data:Self PlacementTarget.DataContext}" 
                        Linq:XMemberControl.Source="{local:SourceBinding {x:Type Core:HeaderOptionAttribute}}"/>
                </local:ImageToggleButton.Menu>
            </local:ImageToggleButton>
            <local:ImageButton Grid.Column="7"
                Command="{Data:Ancestor DockControl.PinCommand, local:DockRootControl}"
                CommandParameter="{Binding}"
                Margin="0,0,5,0"
                Source="{Markup:SmallImage Pin.png}"
                ToolTip="{Markup:Loc Pin}"
                Visibility="{Data:VisibilityBinding IsEnabled, From=Self}"/>
            <local:ImageButton Grid.Column="7"
                Command="{Data:Ancestor DockControl.UnpinCommand, local:DockRootControl}"
                CommandParameter="{Binding}"
                Margin="0,0,5,0"
                Source="{Markup:SmallImage Unpin.png}"
                ToolTip="{Markup:Loc Unpin}"
                Visibility="{Data:Self IsEnabled, Convert={x:Type Conversion:BooleanToVisibilityConverter}}"/>
            <local:ImageButton Grid.Column="8"
                Command="{Data:Ancestor DockControl.HideCommand, local:DockRootControl}"
                CommandParameter="{Binding}"
                Source="{Markup:SmallImage X.png}"
                ToolTip="{Markup:Loc Hide}"
                Visibility="{Data:Self IsEnabled, Convert={x:Type Conversion:BooleanToVisibilityConverter}}"/>
        </Grid>
    </DataTemplate>
    
    <DataTemplate x:Key="{x:Static local:DockControl.PanelBodyTemplateKey}">
        <Grid Linq:XGrid.AutoRows="True" Linq:XGrid.Rows="Auto,*">
            <ProgressBar 
                Background="#22000000"
                Height="4"
                Linq:XProgressBar.ContentTemplate="{Markup:EmptyTemplate}"
                Maximum="1" Minimum="0" 
                Value="{Binding Progress}"
                Visibility="{Data:VisibilityBinding ProgressVisibility}"/>
            <Grid>
                <Grid Visibility="{Data:VisibilityBinding IsOptionsVisible, Invert=True}">
                    <Grid Linq:XGrid.AutoRows="True" Linq:XGrid.Rows="Auto,*,Auto">
                        <ContentPresenter x:Name="Header" Content="{Binding}" ContentTemplate="{Markup:EmptyTemplate}"/>
                        <ContentPresenter x:Name="Content" Content="{Binding}"
                            ContentTemplate="{Data:Ancestor DockControl.PanelTemplate, local:DockRootControl}"
                            ContentTemplateSelector="{Data:Ancestor DockControl.PanelTemplateSelector, local:DockRootControl}"/>
                        <ContentPresenter x:Name="Footer" Content="{Binding}" ContentTemplate="{Markup:EmptyTemplate}"/>
                    </Grid>
                    <ContentPresenter Content="{Binding}"
                        ContentTemplate="{StaticResource {x:Static local:DockControl.FindTemplateKey}}"/>
                </Grid>
                <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource {x:Static local:DockControl.PanelOptionsTemplateKey}}"
                    Visibility="{Data:VisibilityBinding IsOptionsVisible}"/>
            </Grid>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Data:Ancestor local:DockRootControl}" Value="{x:Null}">
                <Setter TargetName="Content" Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <ContentPresenter Content="{Binding}">
                                <e:Interaction.Behaviors>
                                    <Behavior:DynamicResourceBehavior Key="{Binding ActualTemplateKey}" Property="{x:Static ContentPresenter.ContentTemplateProperty}"/>
                                </e:Interaction.Behaviors>
                            </ContentPresenter>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Data:Bind Convert=Conversion:ObjectHasMemberWithAttributeConverter, Parameter={x:Type Core:FooterAttribute}}" Value="True">
                <Setter TargetName="Footer" Property="ContentTemplate" Value="{StaticResource {x:Static local:DockControl.ContentFooterTemplateKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Data:Bind Convert=Conversion:ObjectHasMemberWithAttributeConverter, Parameter={x:Type Core:HeaderAttribute}}" Value="True">
                <Setter TargetName="Header" Property="ContentTemplate" Value="{StaticResource {x:Static local:DockControl.ContentHeaderTemplateKey}}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:DockControl.PanelTemplateKey}">
        <HeaderedContentControl 
            Header="{Binding}"
            Linq:XHeaderedContentControl.HeaderPlacement="{Data:Ancestor DockControl.PanelHeaderPlacement, local:DockRootControl}">
            <HeaderedContentControl.Resources>
                <Data:Reference x:Key="DockControl" Data="{Data:Ancestor DockControl, local:DockRootControl}"/>
            </HeaderedContentControl.Resources>
            <HeaderedContentControl.HeaderTemplate>
                <DataTemplate>
                    <local:DockPanelHeaderControl
                        ContextMenu="{StaticResource {x:Static local:DockControl.PanelMenuKey}}"
                        local:XDockControl.Drag="True"
                        local:XDockControl.DragTarget="{x:Null}"
                        Visibility="{Data:VisibilityBinding TitleVisibility}">
                        <ContentPresenter x:Name="ContentPresenter" Content="{Binding}" 
                            ContentTemplate="{Binding Data.PanelHeaderTemplate, Source={StaticResource DockControl}}"
                            ContentTemplateSelector="{Binding Data.PanelHeaderTemplateSelector, Source={StaticResource DockControl}}"/>
                    </local:DockPanelHeaderControl>
                    <DataTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Data.PanelHeaderTemplate, Source={StaticResource DockControl}}" Value="{x:Null}"/>
                                <Condition Binding="{Binding Data.PanelHeaderTemplateSelector, Source={StaticResource DockControl}}" Value="{x:Null}"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{StaticResource {x:Static local:DockControl.PanelHeaderTemplateKey}}"/>
                        </MultiDataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </HeaderedContentControl.HeaderTemplate>
            <local:PanelPresenter Content="{Binding}"/>
        </HeaderedContentControl>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:DockControl.PanelTitleHeaderTemplateKey}">
        <ContentControl
            Background="Transparent"
            Content="{Binding}"
            ContentTemplate="{Data:Ancestor DockControl.PanelTitleHeaderTemplate, local:DockRootControl}"
            Linq:XElement.MouseEnterCommand="{Data:Ancestor SelectCommand, local:DockRootControl}"
            Linq:XElement.MouseEnterCommandParameter="{Data:Self}"
            Linq:XElement.MouseLeaveCommand="{Data:Ancestor UnselectCommand, local:DockRootControl}"
            local:XDockControl.Drag="True"
            local:XDockControl.DragTarget="{Binding}"
            Padding="5,2.5"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:DockControl.CollapsedPanelTitleHeaderTemplateKey}">
        <Border
            Background="Transparent"
            ContextMenu="{StaticResource {x:Static local:DockControl.PanelMenuKey}}"
            Linq:XElement.MouseEnterCommand="{Data:Ancestor SelectCommand, local:DockRootControl}"
            Linq:XElement.MouseEnterCommandParameter="{Data:Self}"
            Linq:XElement.MouseLeaveCommand="{Data:Ancestor UnselectCommand, local:DockRootControl}"
            local:XDockControl.Drag="True"
            local:XDockControl.DragTarget="{Binding}"
            Padding="10,5"
            VerticalAlignment="Center">
            <local:ImageElement Source="{Data:Bind Icon, Convert={x:Type Conversion:NullConverter}}"/>
        </Border>
    </DataTemplate>

    <!-- /// -->

    <Style x:Key="{x:Type local:PanelPresenter}" TargetType="{x:Type local:PanelPresenter}">
        <Setter Property="ContentTemplate" Value="{DynamicResource {x:Static local:DockControl.PanelBodyTemplateKey}}"/>
    </Style>

    <!-- Markers -->

    <Style x:Key="{x:Static local:DockControl.EmptyMarkerStyleKey}" TargetType="{x:Type local:ImageElement}" BasedOn="{StaticResource {x:Type local:ImageElement}}">
        <Setter Property="Foreground" Value="{local:ThemeKey DockControlEmptyMarkerSourceColor}"/>
    </Style>

    <Style x:Key="{x:Static local:DockControl.PrimaryMarkerStyleKey}" TargetType="{x:Type local:ImageElement}" BasedOn="{StaticResource {x:Type local:ImageElement}}">
        <Setter Property="Foreground" Value="{local:ThemeKey DockControlPrimaryMarkerSourceColor}"/>
        <Setter Property="Margin" Value="2.5"/>
        <Setter Property="SourceSize" Value="32,32"/>
    </Style>

    <Style x:Key="{x:Static local:DockControl.SecondaryMarkerStyleKey}" TargetType="{x:Type local:ImageElement}" BasedOn="{StaticResource {x:Type local:ImageElement}}">
        <Setter Property="Foreground" Value="{local:ThemeKey DockControlSecondaryMarkerSourceColor}"/>
        <Setter Property="SourceSize" Value="32,32"/>
    </Style>

    <!-- Selection -->

    <Style x:Key="{x:Static local:DockControl.SelectionStyleKey}" TargetType="{x:Type Polygon}">
        <Setter Property="Fill" Value="{local:ThemeKey DockControlSelectionBackground}"/>
        <Setter Property="Stroke" Value="{local:ThemeKey DockControlSelectionBorder}"/>
        <Setter Property="StrokeThickness" Value="5"/>
    </Style>

    <!-- Styles -->
    
    <Style x:Key="{x:Static local:DockControl.DocumentStyle}" TargetType="TabItem" BasedOn="{StaticResource {x:Type TabItem}}">
        <Setter Property="Content" Value="{Binding}"/>
        <Setter Property="Linq:XElement.PreviewMouseLeftButtonUpCommand" Value="{Data:Ancestor DockControl.DockTabCommand, local:DockRootControl}"/>
        <Setter Property="Linq:XElement.PreviewMouseLeftButtonUpCommandParameter" Value="{Data:Self}"/>
        <Setter Property="Linq:XToolTip.Header" Value="{Binding ToolTip}"/>
        <Setter Property="ToolTip" Value="{Binding ToolTip}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Data:IsBinding Models:Document}" Value="True">
                <Setter Property="ContentTemplate" Value="{StaticResource {x:Static local:DockControl.DocumentTemplateKey}}"/>
                <Setter Property="Linq:XToolTip.HeaderTemplate" Value="{Data:Ancestor DockControl.DocumentToolTipHeaderTemplate, local:DockRootControl}"/>
                <Setter Property="Linq:XToolTip.HeaderTemplateSelector" Value="{Data:Ancestor DockControl.DocumentToolTipHeaderTemplateSelector, local:DockRootControl}"/>
                <Setter Property="Linq:XElement.ToolTipTemplate" Value="{Data:Ancestor DockControl.DocumentToolTipTemplate, local:DockRootControl}"/>
                <Setter Property="Linq:XElement.ToolTipTemplateSelector" Value="{Data:Ancestor DockControl.DocumentToolTipTemplateSelector, local:DockRootControl}"/>
            </DataTrigger>
            <DataTrigger Binding="{Data:IsBinding Models:Panel}" Value="True">
                <Setter Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <local:PanelPresenter Content="{Binding}"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                <Setter Property="Linq:XElement.ToolTipTemplate" Value="{Data:Ancestor DockControl.PanelToolTipTemplate, local:DockRootControl}"/>
                <Setter Property="Linq:XElement.ToolTipTemplateSelector" Value="{Data:Ancestor DockControl.PanelToolTipTemplateSelector, local:DockRootControl}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Self IsSelected}" Value="True"/>
                    <Condition Binding="{Data:Ancestor Active, local:DockDocumentControl}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey TabControlBorderActive}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey TabControlBorderActive}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Self IsSelected}" Value="True"/>
                    <Condition Binding="{Data:Ancestor Active, local:DockDocumentControl}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey TabControlBorder}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey TabControlBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey TabItemForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey TabItemForeground}"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static local:DockControl.PanelStyle}" TargetType="TabItem" BasedOn="{StaticResource {x:Type TabItem}}">
        <Setter Property="Content" Value="{Binding}"/>
        <Setter Property="ContentTemplate" Value="{StaticResource {x:Static local:DockControl.PanelTemplateKey}}"/>
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
        <Setter Property="Linq:XElement.PreviewMouseLeftButtonUpCommand" Value="{Data:Ancestor DockControl.DockTabCommand, local:DockRootControl}"/>
        <Setter Property="Linq:XElement.PreviewMouseLeftButtonUpCommandParameter" Value="{Data:Self}"/>
        <Setter Property="Linq:XElement.ToolTipTemplate" Value="{Data:Ancestor DockControl.PanelToolTipTemplate, local:DockRootControl}"/>
        <Setter Property="Linq:XElement.ToolTipTemplateSelector" Value="{Data:Ancestor DockControl.PanelToolTipTemplateSelector, local:DockRootControl}"/>
        <Setter Property="Linq:XToolTip.Header" Value="{Binding ToolTip}"/>
        <Setter Property="Linq:XToolTip.HeaderTemplate" Value="{Data:Ancestor DockControl.PanelToolTipHeaderTemplate, local:DockRootControl}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="ToolTip" Value="{Binding ToolTip}"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Self IsSelected}" Value="True"/>
                    <Condition Binding="{Data:Ancestor Active, {x:Type local:DockPanelControl}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey TabControlBorderActive}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey TabControlBorderActive}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Self IsSelected}" Value="True"/>
                    <Condition Binding="{Data:Ancestor Active, {x:Type local:DockPanelControl}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey TabControlBorder}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey TabControlBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey TabItemForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey TabItemForeground}"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static local:DockControl.GridSplitterStyleKey}" TargetType="{x:Type GridSplitter}" BasedOn="{StaticResource {x:Type GridSplitter}}">
        <Setter Property="DragIncrement" Value="16"/>
    </Style>

    <!-- DockControl -->

    <Style x:Key="{x:Type local:DockControl}" TargetType="{x:Type local:DockControl}">
        <Setter Property="DefaultPanelTemplate">
            <Setter.Value>
                <DataTemplate DataType="Models:Panel">
                    <ContentPresenter Content="{Binding}">
                        <e:Interaction.Behaviors>
                            <Behavior:DynamicResourceBehavior Key="{Binding ActualTemplateKey}" Property="{x:Static ContentPresenter.ContentTemplateProperty}"/>
                        </e:Interaction.Behaviors>
                    </ContentPresenter>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="DocumentHeaderTemplate">
            <Setter.Value>
                <DataTemplate DataType="Models:Document">
                    <Grid
                        Background="Transparent"
                        Linq:XElement.MouseEnterCommand="{Data:Ancestor SelectCommand, {x:Type local:DockRootControl}}"
                        Linq:XElement.MouseEnterCommandParameter="{Data:Self}"
                        local:XDockControl.Drag="True"
                        local:XDockControl.DragTarget="{Binding}">
                        <Grid.Resources>
                            <Data:Reference x:Key="DockControl" Data="{Data:Ancestor DockControl, {x:Type local:DockRootControl}}"/>
                        </Grid.Resources>
                        <Grid Linq:XGrid.Columns="Auto,Auto,Auto,Auto,Auto" Linq:XPanel.VerticalContentAlignment="Center"
                            ContextMenu="{StaticResource {x:Static local:DockControl.DocumentMenuKey}}">
                            <ContentPresenter Grid.Column="0"
                                Content="{Binding}"
                                ContentTemplate="{Data:Ancestor DockControl.DocumentIconTemplate, local:DockRootControl}"
                                ContentTemplateSelector="{Data:Ancestor DockControl.DocumentIconTemplateSelector, local:DockRootControl}"/>
                            <ContentPresenter Grid.Column="1"
                                Content="{Binding}"
                                ContentTemplate="{Data:Ancestor DockControl.DocumentTitleTemplate, local:DockRootControl}"
                                ContentTemplateSelector="{Data:Ancestor DockControl.DocumentTitleTemplateSelector, local:DockRootControl}"/>
                            <local:ProgressCircle Grid.Column="2"
                                Height="16" Width="16"
                                Margin="5,0,0,0"
                                Visibility="{Data:VisibilityBinding IsBusy}"/>
                            <Grid Grid.Column="3"
                                Margin="5,0,0,0"
                                Visibility="{Data:Bind CanMinimize, Convert={x:Type Conversion:BooleanToVisibilityConverter}}">
                                <local:ImageButton x:Name="MinimizeButton"
                                    Command="{Data:Ancestor DockControl.MinimizeCommand, {x:Type local:DockRootControl}}"
                                    CommandParameter="{Binding}"
                                    Source="{Markup:SmallImage Minus.png}"
                                    SourceSize="12,12"
                                    ToolTip="{Markup:Loc Minimize}"
                                    Visibility="{Data:Self IsEnabled, Convert={x:Type Conversion:BooleanToVisibilityConverter}}"/>
                                <local:ImageButton x:Name="RestoreButton"
                                    Command="{Data:Ancestor DockControl.RestoreCommand, {x:Type local:DockRootControl}}"
                                    CommandParameter="{Binding}"
                                    Source="{Markup:SmallImage Restore.png}"
                                    SourceSize="12,12"
                                    ToolTip="{Markup:Loc Restore}"
                                    Visibility="{Data:Self IsEnabled, Convert={x:Type Conversion:BooleanToVisibilityConverter}}"/>
                            </Grid>
                            <local:ImageButton Grid.Column="4" x:Name="CloseButton"
                                Command="{Data:Ancestor DockControl.CloseDocumentCommand, {x:Type local:DockRootControl}}"
                                CommandParameter="{Binding}"
                                Margin="5,0,0,0"
                                Source="{Markup:SmallImage XRound.png}"
                                SourceSize="12,12"
                                ToolTip="{Markup:Loc Close}"
                                Visibility="{Data:Bind CanClose, Convert={x:Type Conversion:BooleanToVisibilityConverter}}"/>
                        </Grid>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="DocumentIconTemplate">
            <Setter.Value>
                <DataTemplate DataType="Models:Document">
                    <local:ImageElement
                        HorizontalAlignment="Center"
                        Source="{Binding Icon}"
                        VerticalAlignment="Center"
                        Visibility="{Data:VisibilityBinding Icon}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="DocumentToolTipHeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Data:NameAttributeBinding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="DocumentToolTipTemplate" Value="{DynamicResource {x:Static local:MemberGrid.ObjectToolTipKey}}"/>
        <Setter Property="DocumentTitleTemplate">
            <Setter.Value>
                <DataTemplate DataType="Models:Document">
                    <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FocusManager.IsFocusScope" Value="True"/>
        <Setter Property="MinimizedDocumentPlacement" Value="Bottom"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="PanelHeaderPlacement" Value="Top"/>
        <Setter Property="PanelIconTemplate">
            <Setter.Value>
                <DataTemplate DataType="Models:Panel">
                    <local:ImageElement
                        HorizontalAlignment="Center"  
                        Source="{Binding Icon}"
                        VerticalAlignment="Center"
                        Visibility="{Data:VisibilityBinding Icon}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="PanelTitleTemplate">
            <Setter.Value>
                <DataTemplate DataType="Models:Panel">
                    <TextBlock TextTrimming="CharacterEllipsis">
                        <TextBlock.Style>
                            <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding TitleLocalized}" Value="True">
                                        <Setter Property="Text" Value="{Data:LocalBinding Title}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding TitleLocalized}" Value="False">
                                        <Setter Property="Text" Value="{Binding Title}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="PanelTitleHeaderTemplate">
            <Setter.Value>
                <DataTemplate DataType="Models:Panel">
                    <Grid>
                        <Grid Linq:XGrid.Columns="Auto,Auto,*,Auto"
                            Background="Transparent"
                            ContextMenu="{StaticResource {x:Static local:DockControl.PanelMenuKey}}">
                            <local:ImageElement x:Name="Icon"
                                Margin="0,0,5,0"
                                Source="{Data:Bind Icon, Convert={x:Type Conversion:NullConverter}}"
                                VerticalAlignment="Center"
                                Visibility="{Data:Bind Icon, Convert={x:Type Conversion:ObjectToVisibilityConverter}}"/>
                            <ContentPresenter Grid.Column="1"
                                Content="{Binding}"
                                ContentTemplate="{Data:Ancestor DockControl.PanelTitleTemplate, local:DockRootControl}"
                                ContentTemplateSelector="{Data:Ancestor DockControl.PanelTitleTemplateSelector, local:DockRootControl}"
                                VerticalAlignment="Center"/>
                            <local:ImageButton Grid.Column="3" x:Name="HideButton"
                                Command="{Data:Ancestor DockControl.HideCommand, local:DockRootControl}"
                                CommandParameter="{Binding}"
                                Margin="5,0,0,0"
                                Source="{Markup:SmallImage X.png}"
                                SourceSize="12,12"
                                ToolTip="{Markup:Loc Hide}"
                                VerticalAlignment="Center"
                                Visibility="{Data:Bind CanHide, Convert={x:Type Conversion:BooleanToVisibilityConverter}}"/>
                        </Grid>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="PanelToolTipHeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Data:NameAttributeBinding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="PanelToolTipTemplate" Value="{DynamicResource {x:Static local:MemberGrid.ObjectToolTipKey}}"/>
        <Setter Property="ProgressTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:ProgressCircle
                        Height="64"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Width="64"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:DockControl}">
                    <Grid>
                        <Border Linq:XElement.Name="{x:Static local:DockControl.BorderKey}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Linq:XElement.FadeTrigger="True"
                            Linq:XElement.FadeTriggerSource="{Data:TemplatedParent Refreshing, Convert={x:Type Conversion:InverseBooleanConverter}}"
                            Padding="{TemplateBinding Padding}"/>
                        <ContentPresenter
                            ContentTemplate="{TemplateBinding ProgressTemplate}"
                            Linq:XElement.FadeTrigger="True"
                            Linq:XElement.FadeTriggerSource="{TemplateBinding Refreshing}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- DockContentControl -->

    <Style x:Key="{x:Type local:DockContentControl}" TargetType="{x:Type local:DockContentControl}" BasedOn="{StaticResource {x:Type local:CacheTabControl}}">
        <Style.Triggers>
            <Trigger Property="Active" Value="True">
                <Setter Property="BorderBrush" Value="{local:ThemeKey TabControlBorderActive}"/>
            </Trigger>
            <Trigger Property="Active" Value="False">
                <Setter Property="BorderBrush" Value="{local:ThemeKey TabControlBorder}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- DockDocumentControl -->

    <Style x:Key="{x:Type local:DockDocumentControl}" TargetType="{x:Type local:DockDocumentControl}" BasedOn="{StaticResource {x:Type local:DockContentControl}}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource {x:Static local:DockControl.DocumentStyle}}"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentPresenter x:Name="ContentPresenter" Content="{Binding}"/>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Data:IsBinding Models:Document}" Value="True">
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{Data:Ancestor DockControl.DocumentHeaderTemplate, local:DockRootControl}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Data:IsBinding Models:Panel}" Value="True">
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{StaticResource {x:Static local:DockControl.PanelTitleHeaderTemplateKey}}"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XTabControl.OverflowIconTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentPresenter x:Name="ContentPresenter" Content="{Binding}"/>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Data:IsBinding Models:Document}" Value="True">
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{Data:Ancestor DockControl.DocumentIconTemplate, local:DockRootControl}"/>
                            <Setter TargetName="ContentPresenter" Property="ContentTemplateSelector" Value="{Data:Ancestor DockControl.DocumentIconTemplateSelector, local:DockRootControl}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Data:IsBinding Models:Panel}" Value="True">
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{Data:Ancestor DockControl.PanelIconTemplate, local:DockRootControl}"/>
                            <Setter TargetName="ContentPresenter" Property="ContentTemplateSelector" Value="{Data:Ancestor DockControl.PanelIconTemplateSelector, local:DockRootControl}"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XTabControl.OverflowItemCommand" Value="{Data:Ancestor DockControl.SelectCommand, local:DockRootControl}"/>
        <Setter Property="Linq:XTabControl.OverflowItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentPresenter x:Name="ContentPresenter" Content="{Binding}"/>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Data:IsBinding Models:Document}" Value="True">
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{Data:Ancestor DockControl.DocumentTitleTemplate, local:DockRootControl}"/>
                            <Setter TargetName="ContentPresenter" Property="ContentTemplateSelector" Value="{Data:Ancestor DockControl.DocumentTitleTemplateSelector, local:DockRootControl}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Data:IsBinding Models:Panel}" Value="True">
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{Data:Ancestor DockControl.PanelTitleTemplate, local:DockRootControl}"/>
                            <Setter TargetName="ContentPresenter" Property="ContentTemplateSelector" Value="{Data:Ancestor DockControl.PanelTitleTemplateSelector, local:DockRootControl}"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Ancestor DockControl.EmptyDocumentGroupVisibility, local:DockRootControl}" Value="Collapsed"/>
                    <Condition Binding="{Data:Self Source.Count}" Value="0"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <!-- DockPanelControl -->

    <Style x:Key="{x:Type local:DockPanelControl}" TargetType="{x:Type local:DockPanelControl}" BasedOn="{StaticResource {x:Type local:DockContentControl}}">
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Ancestor Orientation, local:DockGroupControl}" Value="Horizontal"/>
                    <Condition Binding="{Data:Self Collapse}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <WrapPanel Orientation="Vertical"/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Ancestor Orientation, local:DockGroupControl}" Value="Vertical"/>
                    <Condition Binding="{Data:Self Collapse}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <WrapPanel Orientation="Horizontal"/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Ancestor DockControl.EmptyPanelGroupVisibility, local:DockRootControl}" Value="Collapsed"/>
                    <Condition Binding="{Data:Self Source.Count}" Value="1"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Linq:XTabControl.HeaderVisibility" Value="Collapsed"/>
            </MultiDataTrigger>
            <Trigger Property="Collapse" Value="True">
                <Setter Property="Background" Value="{local:ThemeKey PopupBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey TabControlBorder}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="ItemContainerStyle">
                    <Setter.Value>
                        <Style TargetType="TabItem" BasedOn="{StaticResource {x:Type TabItem}}">
                            <Setter Property="Content" Value="{Binding}"/>
                            <Setter Property="ContentTemplate" Value="{StaticResource {x:Static local:DockControl.PanelTemplateKey}}"/>
                            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                            <Setter Property="Linq:XElement.PreviewMouseLeftButtonUpCommand" Value="{Data:Ancestor DockControl.DockTabCommand, local:DockRootControl}"/>
                            <Setter Property="Linq:XElement.PreviewMouseLeftButtonUpCommandParameter" Value="{Data:Self}"/>
                            <Setter Property="Linq:XElement.ToolTipTemplate" Value="{Data:Ancestor DockControl.PanelToolTipTemplate, local:DockRootControl}"/>
                            <Setter Property="Linq:XElement.ToolTipTemplateSelector" Value="{Data:Ancestor DockControl.PanelToolTipTemplateSelector, local:DockRootControl}"/>
                            <Setter Property="Padding" Value="0"/>
                            <Setter Property="ToolTip" Value="{Binding ToolTip}"/>
                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Data:Self IsSelected}" Value="True"/>
                                        <Condition Binding="{Data:Ancestor Active, {x:Type local:DockPanelControl}}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" Value="{local:ThemeKey TabControlBorderActive}"/>
                                    <Setter Property="BorderBrush" Value="{local:ThemeKey TabControlBorderActive}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Data:Self IsSelected}" Value="True"/>
                                        <Condition Binding="{Data:Ancestor Active, {x:Type local:DockPanelControl}}" Value="False"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" Value="{local:ThemeKey TabControlBorder}"/>
                                    <Setter Property="BorderBrush" Value="{local:ThemeKey TabControlBorder}"/>
                                    <Setter Property="Foreground" Value="{local:ThemeKey TabItemForeground}"/>
                                    <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey TabItemForeground}"/>
                                </MultiDataTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="False"/>
                                        <Condition Property="IsMouseOver" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" Value="{local:ThemeKey TabItemMouseOverBackground}" />
                                    <Setter Property="BorderBrush" Value="{local:ThemeKey TabItemMouseOverBorder}" />
                                    <Setter Property="Foreground" Value="{local:ThemeKey TabItemMouseOverForeground}" />
                                    <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey TabItemMouseOverForeground}" />
                                </MultiTrigger>
                            </Style.Triggers>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="ItemTemplate" Value="{StaticResource {x:Static local:DockControl.CollapsedPanelTitleHeaderTemplateKey}}"/>
                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Setter Property="Padding" Value="0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="local:DockPanelControl">
                            <Grid ClipToBounds="True"
                                KeyboardNavigation.TabNavigation="Local"
                                SnapsToDevicePixels="True">
                                <Grid.Resources>
                                    <Data:Reference x:Key="DockPanelControl" Data="{Data:TemplatedParent}"/>
                                </Grid.Resources>
                                <Border x:Name="Border"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}">
                                    <Grid Linq:XGrid.AutoRows="True" Linq:XGrid.Rows="Auto,*">
                                        <!-- ... Header -->
                                        <local:DockPanelHeaderControl
                                            ContextMenu="{StaticResource {x:Static local:DockControl.PanelMenuKey}}"
                                            local:XDockControl.Drag="True"
                                            local:XDockControl.DragTarget="{x:Null}"
                                            Padding="7.5">
                                            <ContentPresenter Content="{Binding}"
                                                HorizontalAlignment="Center"
                                                VerticalAlignment="Center"
                                                ContentTemplate="{DynamicResource {x:Static local:DockControl.PanelHeaderPatternKey}}"/>
                                        </local:DockPanelHeaderControl>
                                        <!-- ... Content -->
                                        <ItemsPresenter/>
                                    </Grid>
                                </Border>
                                <!--
                                Linq:XElement.CanResize="True"
                                Linq:XElement.ResizeCoerceAxis="X"
                                Linq:XElement.ResizeCoerceDirection="W"
                                Linq:XElement.ResizeSnap="1"
                                <Linq:XElement.ResizeThumbStyle>
                                    <Style TargetType="{x:Type Thumb}">
                                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type Thumb}">
                                                    <Rectangle Cursor="SizeWE" Fill="Transparent" Height="16" Width="16"/>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Linq:XElement.ResizeThumbStyle>
                                -->
                                <Popup x:Name="Popup"
                                    IsOpen="{TemplateBinding IsMenuVisible}"
                                    PopupAnimation="Slide"
                                    PlacementTarget="{Binding ElementName=Border}">
                                    <local:PopupBorder x:Name="PopupBorder">
                                        <Grid x:Name="Grid0" Linq:XElement.Name="{x:Static local:CacheTabControl.ContentKey}"
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            KeyboardNavigation.DirectionalNavigation="Contained"
                                            KeyboardNavigation.TabIndex="2"
                                            KeyboardNavigation.TabNavigation="Local"
                                            Margin="{TemplateBinding Padding}"
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    </local:PopupBorder>
                                </Popup>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Data:Ancestor Orientation, local:DockGroupControl}" Value="Horizontal">
                                    <Setter TargetName="Popup" Property="Placement" Value="Left"/>
                                    <Setter TargetName="PopupBorder" Property="Height" Value="{Binding ActualHeight, ElementName=Border}"/>
                                    <Setter TargetName="PopupBorder" Property="MaxWidth" Value="720"/>
                                    <Setter TargetName="PopupBorder" Property="MinWidth" Value="128"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Data:Ancestor Orientation, local:DockGroupControl}" Value="Vertical">
                                    <Setter TargetName="Popup" Property="Placement" Value="Bottom"/>
                                    <Setter TargetName="PopupBorder" Property="MaxHeight" Value="720"/>
                                    <Setter TargetName="PopupBorder" Property="MinHeight" Value="128"/>
                                    <Setter TargetName="PopupBorder" Property="Width" Value="{Binding ActualWidth, ElementName=Border}"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            </Trigger>
            <Trigger Property="Collapse" Value="False">
                <Setter Property="ItemContainerStyle" Value="{StaticResource {x:Static local:DockControl.PanelStyle}}"/>
                <Setter Property="ItemTemplate" Value="{StaticResource {x:Static local:DockControl.PanelTitleHeaderTemplateKey}}"/>
                <Setter Property="Linq:XTabControl.OverflowIconTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <ContentControl
                                Content="{Binding}"
                                ContentTemplate="{Data:Self Tag.DockControl.PanelIconTemplate}"
                                ContentTemplateSelector="{Data:Self Tag.DockControl.PanelIconTemplateSelector}"
                                Linq:XElement.RelativeTag="{x:Type local:DockRootControl}"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Linq:XTabControl.OverflowItemCommand" Value="{Data:Ancestor DockControl.SelectCommand, local:DockRootControl}"/>
                <Setter Property="Linq:XTabControl.OverflowItemTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <ContentControl
                                Content="{Binding}"
                                ContentTemplate="{Data:Self Tag.DockControl.PanelTitleTemplate}"
                                ContentTemplateSelector="{Data:Self Tag.DockControl.PanelTitleTemplateSelector}"
                                Linq:XElement.RelativeTag="{x:Type local:DockRootControl}"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="TabStripPlacement" Value="Bottom"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- DockRootControl -->

    <Style x:Key="{x:Static local:DockRootControl.GridSplitterStyleKey}" TargetType="GridSplitter" BasedOn="{StaticResource {x:Type GridSplitter}}">
        <Setter Property="Background" Value="#11000000"/>
        <Setter Property="ResizeBehavior" Value="PreviousAndNext"/>
        <Setter Property="ShowsPreview" Value="True"/>
        <Style.Triggers>
            <Trigger Property="ResizeDirection" Value="Columns">
                <Setter Property="Height" Value="Auto"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="VerticalAlignment" Value="Stretch"/>
                <Setter Property="Width" Value="4"/>
            </Trigger>
            <Trigger Property="ResizeDirection" Value="Rows">
                <Setter Property="Height" Value="4"/>
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="Width" Value="Auto"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type local:DockRootControl}" TargetType="{x:Type local:DockRootControl}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="PopupTransition" Value="Left"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:DockRootControl">
                    <Grid Linq:XGrid.Columns="Auto,*,Auto" Linq:XGrid.Rows="Auto,*,Auto">
                        <Grid.Resources>
                            <DataTemplate x:Key="DockPanelBar.ItemTemplate" x:Shared="False" DataType="{x:Type Models:Panel}">
                                <local:DockPanelButton Content="{Binding}" Margin="0,0,5,0"/>
                            </DataTemplate>
                        </Grid.Resources>
                        
                        <!-- ... Pin (Top) -->
                        <local:DockPanelBar Grid.Column="1" Grid.ColumnSpan="1" Grid.Row="0" Grid.RowSpan="1"
                            ItemsSource="{TemplateBinding TopPanels}"
                            ItemTemplate="{StaticResource DockPanelBar.ItemTemplate}"
                            Margin="0,0,0,5"
                            Visibility="{Data:CompareInt32Binding TopPanels.Count, From=TemplatedParent, Result=Visibility, Type=Greater}">
                            <local:DockPanelBar.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </local:DockPanelBar.ItemsPanel>
                        </local:DockPanelBar>

                        <!-- ... Pin (Left) -->
                        <local:DockPanelBar Grid.Column="0" Grid.ColumnSpan="1" Grid.Row="0" Grid.RowSpan="3"
                            ItemsSource="{TemplateBinding LeftPanels}"
                            ItemTemplate="{StaticResource DockPanelBar.ItemTemplate}"
                            Margin="0,0,5,0"
                            RenderTransformOrigin="0.5,0.5"
                            Visibility="{Data:CompareInt32Binding LeftPanels.Count, From=TemplatedParent, Result=Visibility, Type=Greater}">
                            <local:DockPanelBar.LayoutTransform>
                                <RotateTransform Angle="-90"/>
                            </local:DockPanelBar.LayoutTransform>
                            <local:DockPanelBar.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </local:DockPanelBar.ItemsPanel>
                        </local:DockPanelBar>

                        <!-- /// -->
                        <Grid Grid.Column="1" Grid.ColumnSpan="1" Grid.Row="1" Grid.RowSpan="1">
                            <HeaderedContentControl Linq:XHeaderedContentControl.HeaderPlacement="{Data:TemplatedParent DockControl.MinimizedDocumentPlacement}">
                                <HeaderedContentControl.Header>
                                    <ToolBar
                                        ItemsSource="{Data:TemplatedParent Minimized}"
                                        Margin="0,5,0,0"
                                        Visibility="{Data:CompareInt32Binding Minimized.Count, From=TemplatedParent, Result=Visibility, Type=Greater}">
                                        <ToolBar.ItemTemplate>
                                            <DataTemplate>
                                                <local:DockDocumentButton
                                                    Content="{Binding}"
                                                    ContentTemplate="{Data:Ancestor DockControl.DocumentHeaderTemplate, local:DockRootControl}"
                                                    local:XDockControl.Drag="True"
                                                    local:XDockControl.DragTarget="{Binding}"
                                                    Margin="0,0,5,0"/>
                                            </DataTemplate>
                                        </ToolBar.ItemTemplate>
                                    </ToolBar>
                                </HeaderedContentControl.Header>
                                <ContentPresenter ContentSource="Content"/>
                            </HeaderedContentControl>
                            <!-- ... Markers -->
                            <Grid>
                                <Grid.Visibility>
                                    <Data:MultiBind Converter="{x:Static local:DockRootControl.MarkerVisibilityConverter}">
                                        <Data:TemplatedParent Path="DockControl.Drag.MouseOver"/>
                                        <Data:TemplatedParent Path="."/>
                                    </Data:MultiBind>
                                </Grid.Visibility>
                                <!-- ... Secondary/Tertiary -->
                                <Canvas>
                                    <Polygon IsHitTestVisible="False"
                                        Points="{TemplateBinding SelectionPoints}"
                                        Style="{StaticResource {x:Static local:DockControl.SelectionStyleKey}}"/>
                                    <Grid Canvas.Left="{Data:TemplatedParent SecondaryMarkerPosition.X}" Canvas.Top="{Data:TemplatedParent SecondaryMarkerPosition.Y}"
                                        Visibility="{Data:TemplatedParent DockControl.Drag.MouseOver, Converter={x:Static local:DockRootControl.SecondaryMarkerVisibilityConverter}}">
                                        <local:ImageElement x:Name="EmptyMarker"
                                            Style="{StaticResource {x:Static local:DockControl.EmptyMarkerStyleKey}}"/>
                                        <Grid Linq:XGrid.Columns="Auto,Auto,Auto,Auto,Auto" Linq:XGrid.Rows="Auto,Auto,Auto,Auto,Auto"
                                            HorizontalAlignment="Center" VerticalAlignment="Center"
                                            MinHeight="100" MinWidth="100"
                                            Margin="3">
                                            <!-- ... Secondary -->
                                            <local:ImageElement Grid.Column="0" Grid.Row="2" Linq:XElement.Name="{x:Static local:DockRootControl.SecondaryMarkerKey}"
                                                Source="{Markup:SmallImage DockLeft.png}"
                                                Style="{StaticResource {x:Static local:DockControl.SecondaryMarkerStyleKey}}"
                                                Tag="{x:Static local:SecondaryDocks.Left}"/>
                                            <local:ImageElement Grid.Column="2" Grid.Row="0" Linq:XElement.Name="{x:Static local:DockRootControl.SecondaryMarkerKey}"
                                                Source="{Markup:SmallImage DockTop.png}"
                                                Style="{StaticResource {x:Static local:DockControl.SecondaryMarkerStyleKey}}"
                                                Tag="{x:Static local:SecondaryDocks.Top}"/>
                                            <local:ImageElement Grid.Column="4" Grid.Row="2" Linq:XElement.Name="{x:Static local:DockRootControl.SecondaryMarkerKey}"
                                                Source="{Markup:SmallImage DockRight.png}"
                                                Style="{StaticResource {x:Static local:DockControl.SecondaryMarkerStyleKey}}"
                                                Tag="{x:Static local:SecondaryDocks.Right}"/>
                                            <local:ImageElement Grid.Column="2" Grid.Row="4" Linq:XElement.Name="{x:Static local:DockRootControl.SecondaryMarkerKey}"
                                                Source="{Markup:SmallImage DockBottom.png}"
                                                Style="{StaticResource {x:Static local:DockControl.SecondaryMarkerStyleKey}}"
                                                Tag="{x:Static local:SecondaryDocks.Bottom}"/>
                                            <local:ImageElement Grid.Column="2" Grid.Row="2" Linq:XElement.Name="{x:Static local:DockRootControl.SecondaryMarkerKey}"
                                                Source="{Markup:SmallImage DockCenter.png}"
                                                Style="{StaticResource {x:Static local:DockControl.SecondaryMarkerStyleKey}}"
                                                Tag="{x:Static local:SecondaryDocks.Center}"
                                                Visibility="{Data:TemplatedParent DockControl.Drag.MouseOver, Converter={x:Static local:DockRootControl.CenterMarkerVisibilityConverter}}"/>
                                            <!-- ... Tertiary -->
                                            <local:ImageElement Grid.Column="1" Grid.Row="2" Linq:XElement.Name="{x:Static local:DockRootControl.SecondaryMarkerKey}"
                                                Source="{Markup:SmallImage Image=DockHorizontal}"
                                                Style="{StaticResource {x:Static local:DockControl.SecondaryMarkerStyleKey}}"
                                                Tag="{x:Static local:TertiaryDocks.Left}"
                                                Visibility="{Data:TemplatedParent DockControl.Drag.MouseOver, Converter={x:Static local:DockRootControl.TertiaryMarkerVisibilityConverter}}"/>
                                            <local:ImageElement Grid.Column="3" Grid.Row="2" Linq:XElement.Name="{x:Static local:DockRootControl.SecondaryMarkerKey}"
                                                Source="{Markup:SmallImage Image=DockHorizontal}"
                                                Style="{StaticResource {x:Static local:DockControl.SecondaryMarkerStyleKey}}"
                                                Tag="{x:Static local:TertiaryDocks.Right}"
                                                Visibility="{Data:TemplatedParent DockControl.Drag.MouseOver, Converter={x:Static local:DockRootControl.TertiaryMarkerVisibilityConverter}}"/>
                                            <local:ImageElement Grid.Column="2" Grid.Row="1" Linq:XElement.Name="{x:Static local:DockRootControl.SecondaryMarkerKey}"
                                                Source="{Markup:SmallImage Image=DockVertical}"
                                                Style="{StaticResource {x:Static local:DockControl.SecondaryMarkerStyleKey}}"
                                                Tag="{x:Static local:TertiaryDocks.Top}"
                                                Visibility="{Data:TemplatedParent DockControl.Drag.MouseOver, Converter={x:Static local:DockRootControl.TertiaryMarkerVisibilityConverter}}"/>
                                            <local:ImageElement Grid.Column="2" Grid.Row="3" Linq:XElement.Name="{x:Static local:DockRootControl.SecondaryMarkerKey}"
                                                Source="{Markup:SmallImage Image=DockVertical}"
                                                Style="{StaticResource {x:Static local:DockControl.SecondaryMarkerStyleKey}}"
                                                Tag="{x:Static local:TertiaryDocks.Bottom}"
                                                Visibility="{Data:TemplatedParent DockControl.Drag.MouseOver, Converter={x:Static local:DockRootControl.TertiaryMarkerVisibilityConverter}}"/>
                                        </Grid>
                                    </Grid>
                                </Canvas>
                                <!-- ... Primary -->
                                <Border Background="{local:ThemeKey DockControlPrimaryMarkerBackground}"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center">
                                    <local:ImageElement Linq:XElement.Name="{x:Static local:DockRootControl.PrimaryMarkerKey}"
                                        Source="{Markup:SmallImage DockLeft.png}"
                                        Style="{StaticResource {x:Static local:DockControl.PrimaryMarkerStyleKey}}"
                                        Tag="{x:Static local:SecondaryDocks.Left}"
                                        ToolTip="{Markup:Loc Left}"/>
                                </Border>
                                <Border Background="{local:ThemeKey DockControlPrimaryMarkerBackground}"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Top">
                                    <local:ImageElement Linq:XElement.Name="{x:Static local:DockRootControl.PrimaryMarkerKey}"
                                        Source="{Markup:SmallImage DockTop.png}"
                                        Style="{StaticResource {x:Static local:DockControl.PrimaryMarkerStyleKey}}"
                                        Tag="{x:Static local:SecondaryDocks.Top}"
                                        ToolTip="{Markup:Loc Top}"/>
                                </Border>
                                <Border Background="{local:ThemeKey DockControlPrimaryMarkerBackground}"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Center">
                                    <local:ImageElement Linq:XElement.Name="{x:Static local:DockRootControl.PrimaryMarkerKey}"
                                        Source="{Markup:SmallImage DockRight.png}"
                                        Style="{StaticResource {x:Static local:DockControl.PrimaryMarkerStyleKey}}"
                                        Tag="{x:Static local:SecondaryDocks.Right}"
                                        ToolTip="{Markup:Loc Right}"/>
                                </Border>
                                <Border Background="{local:ThemeKey DockControlPrimaryMarkerBackground}"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Bottom">
                                    <local:ImageElement Linq:XElement.Name="{x:Static local:DockRootControl.PrimaryMarkerKey}"
                                        Source="{Markup:SmallImage DockBottom.png}"
                                        Style="{StaticResource {x:Static local:DockControl.PrimaryMarkerStyleKey}}"
                                        Tag="{x:Static local:SecondaryDocks.Bottom}"
                                        ToolTip="{Markup:Loc Bottom}"/>
                                </Border>
                            </Grid>
                        </Grid>

                        <!-- ... Pin (Right) -->
                        <local:DockPanelBar Grid.Column="2" Grid.ColumnSpan="1" Grid.Row="0" Grid.RowSpan="3"
                            ItemsSource="{TemplateBinding RightPanels}"
                            ItemTemplate="{StaticResource DockPanelBar.ItemTemplate}"
                            Margin="5,0,0,0"
                            RenderTransformOrigin="0.5,0.5"
                            Visibility="{Data:CompareInt32Binding RightPanels.Count, From=TemplatedParent, Result=Visibility, Type=Greater}">
                            <local:DockPanelBar.LayoutTransform>
                                <RotateTransform Angle="90"/>
                            </local:DockPanelBar.LayoutTransform>
                            <local:DockPanelBar.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </local:DockPanelBar.ItemsPanel>
                        </local:DockPanelBar>

                        <!-- ... Pin (Bottom) -->
                        <local:DockPanelBar Grid.Column="1" Grid.ColumnSpan="1" Grid.Row="2" Grid.RowSpan="1"
                            ItemsSource="{TemplateBinding BottomPanels}"
                            ItemTemplate="{StaticResource DockPanelBar.ItemTemplate}"
                            Margin="0,5,0,0"
                            Visibility="{Data:CompareInt32Binding BottomPanels.Count, From=TemplatedParent, Result=Visibility, Type=Greater}">
                            <local:DockPanelBar.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </local:DockPanelBar.ItemsPanel>
                        </local:DockPanelBar>

                        <!-- ... Popup (Top) -->
                        <Grid Grid.Column="1" Grid.Row="1"
                            Visibility="{Data:VisibilityBinding IsTopOpen, From=TemplatedParent}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="{Data:TemplatedParent TopPanel.PinHeight, Convert={x:Type Conversion:GridLengthConverter}, Mode=TwoWay}"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <local:DockPopup Grid.Row="0">
                                <local:TransitionControl
                                    Content="{TemplateBinding TopPanel}"
                                    ContentTemplate="{StaticResource {x:Static local:DockControl.PanelTemplateKey}}"
                                    Transition="{TemplateBinding PopupTransition}"/>
                            </local:DockPopup>
                            <GridSplitter Grid.Row="1"
                                ResizeDirection="Rows"
                                Style="{StaticResource {x:Static local:DockRootControl.GridSplitterStyleKey}}"/>
                            <Grid Grid.Row="2"/>
                        </Grid>

                        <!-- ... Popup (Left) -->
                        <Grid Grid.Column="1" Grid.Row="1"
                            Visibility="{Data:VisibilityBinding IsLeftOpen, From=TemplatedParent}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{Data:TemplatedParent LeftPanel.PinWidth, Convert={x:Type Conversion:GridLengthConverter}, Mode=TwoWay}"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <local:DockPopup Grid.Column="0">
                                <local:TransitionControl
                                    Content="{TemplateBinding LeftPanel}"
                                    ContentTemplate="{StaticResource {x:Static local:DockControl.PanelTemplateKey}}"
                                    Transition="{TemplateBinding PopupTransition}"/>
                            </local:DockPopup>
                            <GridSplitter Grid.Column="1"
                                ResizeDirection="Columns"
                                Style="{StaticResource {x:Static local:DockRootControl.GridSplitterStyleKey}}"/>
                            <Grid Grid.Column="2"/>
                        </Grid>

                        <!-- ... Popup (Right) -->
                        <Grid Grid.Column="1" Grid.Row="1"
                            Visibility="{Data:VisibilityBinding IsRightOpen, From=TemplatedParent}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="{Data:TemplatedParent RightPanel.PinWidth, Convert={x:Type Conversion:GridLengthConverter}, Mode=TwoWay}"/>
                            </Grid.ColumnDefinitions>
                            <Grid Grid.Column="0"/>
                            <GridSplitter Grid.Column="1"
                                ResizeDirection="Columns"
                                Style="{StaticResource {x:Static local:DockRootControl.GridSplitterStyleKey}}"/>
                            <local:DockPopup Grid.Column="2">
                                <local:TransitionControl
                                    Content="{TemplateBinding RightPanel}"
                                    ContentTemplate="{StaticResource {x:Static local:DockControl.PanelTemplateKey}}"
                                    Transition="{TemplateBinding PopupTransition}"/>
                            </local:DockPopup>
                        </Grid>

                        <!-- ... Popup (Bottom) -->
                        <Grid Grid.Column="1" Grid.Row="1"
                            Visibility="{Data:VisibilityBinding IsBottomOpen, From=TemplatedParent}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="{Data:TemplatedParent BottomPanel.PinHeight, Convert={x:Type Conversion:GridLengthConverter}, Mode=TwoWay}"/>
                            </Grid.RowDefinitions>
                            <Grid Grid.Row="0"/>
                            <GridSplitter Grid.Row="1"
                                ResizeDirection="Rows"
                                Style="{StaticResource {x:Static local:DockRootControl.GridSplitterStyleKey}}"/>
                            <local:DockPopup Grid.Row="2">
                                <local:TransitionControl
                                    Content="{TemplateBinding BottomPanel}"
                                    ContentTemplate="{StaticResource {x:Static local:DockControl.PanelTemplateKey}}"
                                    Transition="{TemplateBinding PopupTransition}"/>
                            </local:DockPopup>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Data:Self DockControl.Drag.MouseOver, Converter={x:Static local:DockRootControl.TertiaryMarkerVisibilityConverter}}" Value="Visible">
                            <Setter TargetName="EmptyMarker" Property="Source" Value="{Markup:SmallImage Image=DockEmptyLarge}"/>
                            <Setter TargetName="EmptyMarker" Property="SourceSize" Value="160,160"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Data:Self DockControl.Drag.MouseOver, Converter={x:Static local:DockRootControl.TertiaryMarkerVisibilityConverter}}" Value="Collapsed">
                            <Setter TargetName="EmptyMarker" Property="Source" Value="{Markup:SmallImage Image=DockEmpty}"/>
                            <Setter TargetName="EmptyMarker" Property="SourceSize" Value="100,100"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Other -->

    <Style x:Key="{x:Type local:DockDocumentButton}" TargetType="{x:Type local:DockDocumentButton}">
        <Setter Property="Background" Value="{local:ThemeKey DockDocumentButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{local:ThemeKey DockDocumentButtonBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{local:ThemeKey DockDocumentButtonForeground}"/>
        <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey DockDocumentButtonForeground}"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Padding" Value="16,5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:DockDocumentButton}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}">
                        <ContentPresenter
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type local:DockPanelBar}" TargetType="{x:Type local:DockPanelBar}" BasedOn="{StaticResource {x:Type ToolBar}}">
        <Setter Property="BorderThickness" Value="0"/>
    </Style>

    <Style x:Key="{x:Type local:DockPanelButton}" TargetType="{x:Type local:DockPanelButton}">
        <Setter Property="Background" Value="{local:ThemeKey DockPanelButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{local:ThemeKey DockPanelButtonBorder}"/>
        <Setter Property="BorderThickness" Value="0,0,0,3"/>
        <Setter Property="ClickMode" Value="Release"/>
        <Setter Property="Command" Value="{Data:Ancestor PreviewCommand, local:DockRootControl}"/>
        <Setter Property="CommandParameter" Value="{Data:Self}"/>
        <Setter Property="Content" Value="{Binding}"/>
        <Setter Property="ContentTemplate" Value="{Data:Ancestor DockControl.PanelIconTemplate, local:DockRootControl}"/>
        <Setter Property="ContextMenu" Value="{StaticResource {x:Static local:DockControl.PanelMenuKey}}"/>
        <Setter Property="Foreground" Value="{local:ThemeKey DockPanelButtonForeground}"/>
        <Setter Property="Linq:XElement.MouseEnterCommand" Value="{Data:Ancestor SelectCommand, local:DockRootControl}"/>
        <Setter Property="Linq:XElement.MouseEnterCommandParameter" Value="{Data:Self}"/>
        <Setter Property="Linq:XElement.MouseLeaveCommand" Value="{Data:Ancestor UnselectCommand, local:DockRootControl}"/>
        <Setter Property="Linq:XElement.PreviewMouseLeftButtonUpCommand" Value="{Data:Ancestor DockControl.DockPinCommand, local:DockRootControl}"/>
        <Setter Property="Linq:XElement.PreviewMouseLeftButtonUpCommandParameter" Value="{Data:Self}"/>
        <Setter Property="Linq:XElement.ToolTipTemplate" Value="{Data:Ancestor DockControl.PanelToolTipTemplate, local:DockRootControl}"/>
        <Setter Property="Linq:XElement.ToolTipTemplateSelector" Value="{Data:Ancestor DockControl.PanelToolTipTemplateSelector, local:DockRootControl}"/>
        <Setter Property="Linq:XToolTip.Header" Value="{Binding ToolTip}"/>
        <Setter Property="Linq:XToolTip.HeaderTemplate" Value="{Data:Ancestor DockControl.PanelToolTipHeaderTemplate, local:DockRootControl}"/>
        <Setter Property="local:XDockControl.PreviewDrag" Value="True"/>
        <Setter Property="local:XDockControl.DragTarget" Value="{Binding}"/>
        <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey DockPanelButtonForeground}"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:DockPanelButton}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}">
                        <ContentPresenter
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ToolTip" Value="{Binding ToolTip}"/>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey DockPanelButtonMouseOverBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey DockPanelButtonMouseOverBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey DockPanelButtonMouseOverForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey DockPanelButtonMouseOverForeground}"/>
            </MultiTrigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{local:ThemeKey DockPanelButtonCheckedBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey DockPanelButtonCheckedBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey DockPanelButtonCheckedForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey DockPanelButtonCheckedForeground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type local:DockPanelHeaderControl}" TargetType="{x:Type local:DockPanelHeaderControl}" BasedOn="{StaticResource {x:Type ContentControl}}">
        <Setter Property="Background" Value="{local:ThemeKey DockPanelHeaderBackground}"/>
        <Setter Property="BorderBrush" Value="{local:ThemeKey DockPanelHeaderBorder}"/>
        <Setter Property="BorderThickness" Value="0,0,0,1"/>
        <Setter Property="Foreground" Value="{local:ThemeKey DockPanelHeaderForeground}"/>
        <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey DockPanelHeaderForeground}"/>
        <Setter Property="Padding" Value="4,1"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{local:ThemeKey DockPanelHeaderMouseOverBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey DockPanelHeaderMouseOverBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey DockPanelHeaderMouseOverForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey DockPanelHeaderMouseOverForeground}"/>
            </Trigger>
            <DataTrigger Binding="{Data:Ancestor Active, local:DockPanelControl}" Value="True">
                <Setter Property="Background" Value="{local:ThemeKey DockPanelHeaderMouseDownBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey DockPanelHeaderMouseDownBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey DockPanelHeaderMouseDownForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey DockPanelHeaderMouseDownForeground}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type local:DockPopup}" TargetType="{x:Type local:DockPopup}">
        <Setter Property="Background" Value="{local:ThemeKey PopupBackground}"/>
        <Setter Property="BorderBrush" Value="{local:ThemeKey PopupBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>

    <Style x:Key="{x:Type local:DockWindow}" TargetType="{x:Type local:DockWindow}" BasedOn="{StaticResource {x:Type Window}}">
        <Setter Property="Height" Value="360"/>
        <Setter Property="Linq:XWindow.IsChild" Value="True"/>
        <Setter Property="Linq:XWindow.Icon" Value="{Data:Bind GlobalSource=MainViewModel, Path=View.(Linq:XWindow.Icon)}"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="ResizeMode" Value="CanResizeWithGrip"/>
        <Setter Property="Title" Value="{Markup:AssemblyProduct}"/>
        <Setter Property="Width" Value="540"/>
    </Style>
</ResourceDictionary>