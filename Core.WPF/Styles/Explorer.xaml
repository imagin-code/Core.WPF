<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:l="http://wpflocalizeextension.codeplex.com"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:ComponentModel="clr-namespace:System.ComponentModel;assembly=System"
    xmlns:Conversion="clr-namespace:Imagin.Core.Conversion"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Markup="clr-namespace:Imagin.Core.Markup"
    xmlns:Storage="clr-namespace:Imagin.Core.Storage">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=Control}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Menu}"/>
    </ResourceDictionary.MergedDictionaries>
    <DataTemplate x:Key="{x:Static Linq:XExplorer.IconTemplateKey}">
        <local:Thumbnail Height="16" Width="16" Path="{Binding}"/>
    </DataTemplate>
    
    <DataTemplate x:Key="{x:Static Linq:XExplorer.ToolTipTemplateKey}">
        <ContentPresenter x:Name="ContentPresenter">
            <ContentPresenter.ContentTemplate>
                <DataTemplate>
                    <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,Auto">
                        <local:Thumbnail 
                            Height="32" 
                            Margin="0,0,10,0"
                            Path="{Binding}"
                            VerticalAlignment="Top"
                            Width="32"/>
                        <StackPanel Linq:XPanel.Spacing="0,0,0,2.5"
                            Linq:XPanel.SpacingExcept="Last"
                            VerticalAlignment="Top">
                            <TextBlock Text="{Data:Bind Convert={x:Type Conversion:FileNameConverter}}" 
                                FontWeight="Bold"
                                TextTrimming="CharacterEllipsis"/>
                            <TextBlock Opacity="0.5" Text="{Data:Bind Convert={x:Type Conversion:ItemDescriptionConverter}}"
                                TextTrimming="CharacterEllipsis"/>
                            <ContentPresenter x:Name="ContentPresenter" Content="{Binding}"/>
                        </StackPanel>
                    </Grid>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Data:Bind Convert={x:Type Conversion:ItemTypeConverter}}" Value="{x:Static Storage:ItemType.Drive}">
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="*,Auto">
                                            <ProgressBar x:Name="ProgressBar"
                                                HorizontalAlignment="Stretch"
                                                Height="14"
                                                Linq:XProgressBar.ContentTemplate="{Markup:EmptyTemplate}"
                                                Margin="0,0,5,0"
                                                Maximum="1"
                                                Minimum="0"
                                                MinWidth="164"
                                                Value="{Data:Bind Convert={x:Type Conversion:DriveUsedPercentConverter}, Mode=OneWay}"/>
                                            <TextBlock FontSize="11" Foreground="{local:ThemeKey Text}" Text="{Data:Bind Convert={x:Type Conversion:DriveUsedPercentConverter}, StringFormat={}{0:p0}}"/>
                                        </Grid>
                                        <DataTemplate.Triggers>
                                            <DataTrigger Binding="{Data:Bind Convert={x:Type Conversion:DriveSizeLowConverter}}" Value="True">
                                                <Setter TargetName="ProgressBar" Property="Foreground" Value="{local:ThemeKey Red}"/>
                                            </DataTrigger>
                                        </DataTemplate.Triggers>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Data:Bind Convert={x:Type Conversion:ItemTypeConverter}}" Value="{x:Static Storage:ItemType.File}">
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <TextBlock FontStyle="Italic" Text="{Data:Bind Convert={x:Type Conversion:ItemSizeConverter}}"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Data:Bind Convert={x:Type Conversion:ItemTypeConverter}}" Value="{x:Static Storage:ItemType.Folder}">
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <TextBlock FontStyle="Italic" Text="{Data:Bind Convert={x:Type Conversion:ItemModifiedConverter}}"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Data:Bind Convert={x:Type Conversion:ItemTypeConverter}}" Value="{x:Static Storage:ItemType.Shortcut}">
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <TextBlock FontStyle="Italic" Text="{Data:Bind Convert={x:Type Conversion:ShortcutLocationConverter}}"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </ContentPresenter.ContentTemplate>
        </ContentPresenter>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Data:Bind Convert={x:Type Conversion:ItemTypeConverter}}" Value="{x:Static Storage:ItemType.Nothing}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <TextBlock FontStyle="Italic" Text="Invalid path"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    
    <Style x:Key="{x:Type local:Explorer}" TargetType="{x:Type local:Explorer}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Linq:XExplorer.CopyWarningTitle" Value="{Markup:Loc Copy}"/>
        <Setter Property="Linq:XExplorer.CopyWarningMessage" Value="{Markup:Loc Continue, Suffix=?}"/>
        <Setter Property="Linq:XExplorer.InvalidPathAlert" Value="True"/>
        <Setter Property="Linq:XExplorer.InvalidPathAlertMessage" Value="{Markup:Loc FolderDoesNotExist}"/>
        <Setter Property="Linq:XExplorer.InvalidPathAlertTitle" Value="{Markup:Loc FolderNotFound}"/>
        <Setter Property="Linq:XExplorer.MoveWarningTitle" Value="{Markup:Loc Move}"/>
        <Setter Property="Linq:XExplorer.MoveWarningMessage" Value="{Markup:Loc Continue, Suffix=?}"/>
        <Setter Property="Linq:XExplorer.WarnBeforeDrop" Value="True"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:Explorer">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}">
                        <Border.Resources>
                            <Data:Reference x:Key="Explorer" Data="{Data:TemplatedParent}"/>
                        </Border.Resources>
                        <Grid Linq:XGrid.AutoRows="True" Linq:XGrid.Rows="Auto,*">
                            <local:BottomBorder
                                Padding="{TemplateBinding Padding}"
                                Visibility="{TemplateBinding AddressVisibility}">
                                <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="*,Auto">
                                    <local:AddressBox Linq:XElement.Name="{x:Static local:Explorer.AddressBoxKey}"
                                        History="{Data:TemplatedParent History, Way=2}"
                                        Linq:XExplorer.Path="{Data:TemplatedParent Options.Path, Way=2}"
                                        RefreshCommand="{Data:TemplatedParent RefreshCommand}"/>
                                    <local:ImageToggleButton Source="{Markup:SmallImage Image=TriangleDown}"
                                        Margin="5,0,0,0"
                                        ToolTip="{Markup:Loc Options}">
                                        <local:ImageToggleButton.Menu>
                                            <ContextMenu DataContext="{Binding Data.Options.CurrentFolderOptions, Source={StaticResource Explorer}}">
                                                <!--
                                                <MenuItem Header="{Markup:Loc Sort}"
                                                    Icon="{Markup:SmallImage Sort.png}"
                                                    InputGestureText="{Binding BrowserOptions.SortName}"
                                                    Style="{StaticResource {x:Type MenuItem}}">
                                                    <Linq:XMenuItem.InputGestureTextTemplate>
                                                        <DataTemplate>
                                                            <local:AccentLabel Content="{Binding}" FontStyle="Italic" HorizontalAlignment="Left"/>
                                                        </DataTemplate>
                                                    </Linq:XMenuItem.InputGestureTextTemplate>
                                                    <MenuItem.Resources>
                                                        <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                                            <Setter Property="CommandParameter" Value="{Binding}"/>
                                                            <Setter Property="Header" Value="{Binding}"/>
                                                            <Setter Property="HeaderTemplate">
                                                                <Setter.Value>
                                                                    <DataTemplate>
                                                                        <TextBlock Text="{Binding}"/>
                                                                    </DataTemplate>
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter Property="IsCheckable" Value="True"/>
                                                            <Setter Property="Linq:XMenuItem.SelectionMode" Value="Single"/>
                                                            <Setter Property="StaysOpenOnClick" Value="True"/>
                                                            <Style.Triggers>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Data:Bind Convert=Conversion:GetTypeConverter}" Value="{x:Type Storage:ItemProperty}"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter Property="Command" Value="{Binding Data.SortCommand, Source={StaticResource Explorer}}"/>
                                                                    <Setter Property="IsChecked">
                                                                        <Setter.Value>
                                                                            <MultiBinding Converter="{x:Static Conversion:ValueEqualsParameterMultiConverter}" Mode="OneWay">
                                                                                <Binding Path="Data.BrowserOptions.SortName" Source="{StaticResource Explorer}"/>
                                                                                <Binding Path="."/>
                                                                            </MultiBinding>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                    <Setter Property="Linq:XMenuItem.GroupName" Value="SortName"/>
                                                                </MultiDataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Data:Bind Convert=Conversion:GetTypeConverter}" Value="{x:Type ComponentModel:ListSortDirection}"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter Property="Command" Value="{Binding Data.SortDirectionCommand, Source={StaticResource Explorer}}"/>
                                                                    <Setter Property="IsChecked">
                                                                        <Setter.Value>
                                                                            <MultiBinding Converter="{x:Static Conversion:ValueEqualsParameterMultiConverter}" Mode="OneWay">
                                                                                <Binding Path="Data.BrowserOptions.SortDirection" ConvertFrom="{x:Type Data:SortDirection}" ConvertTo="{x:Type SortDirection}" Source="{StaticResource Explorer}"/>
                                                                                <Binding Path="."/>
                                                                            </MultiBinding>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                    <Setter Property="Linq:XMenuItem.GroupName" Value="SortDirection"/>
                                                                </MultiDataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </MenuItem.Resources>
                                                    <MenuItem.ItemsSource>
                                                        <CompositeCollection>
                                                            <CollectionContainer Collection="{Markup:Enumerate Storage:ItemProperty}"/>
                                                            <Separator/>
                                                            <CollectionContainer Collection="{Markup:Enumerate ComponentModel:ListSortDirection}"/>
                                                        </CompositeCollection>
                                                    </MenuItem.ItemsSource>
                                                </MenuItem>
                                                <MenuItem Header="{Markup:Loc Group}"
                                                    Icon="{Markup:SmallImage Group.png}"
                                                    InputGestureText="{Binding BrowserOptions.GroupName}"
                                                    Style="{StaticResource {x:Type MenuItem}}">
                                                    <Linq:XMenuItem.InputGestureTextTemplate>
                                                        <DataTemplate>
                                                            <local:AccentLabel Content="{Binding}" FontStyle="Italic" HorizontalAlignment="Left"/>
                                                        </DataTemplate>
                                                    </Linq:XMenuItem.InputGestureTextTemplate>
                                                    <MenuItem.Resources>
                                                        <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                                            <Setter Property="CommandParameter" Value="{Binding}"/>
                                                            <Setter Property="Header" Value="{Binding}"/>
                                                            <Setter Property="HeaderTemplate">
                                                                <Setter.Value>
                                                                    <DataTemplate>
                                                                        <TextBlock Text="{Binding}"/>
                                                                    </DataTemplate>
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter Property="IsCheckable" Value="True"/>
                                                            <Setter Property="Linq:XMenuItem.SelectionMode" Value="Single"/>
                                                            <Setter Property="StaysOpenOnClick" Value="True"/>
                                                            <Style.Triggers>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Data:Bind Convert=Conversion:GetTypeConverter}" Value="{x:Type Storage:ItemProperty}"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter Property="Command" Value="{Binding Data.GroupCommand, Source={StaticResource Explorer}}"/>
                                                                    <Setter Property="IsChecked">
                                                                        <Setter.Value>
                                                                            <MultiBinding Converter="{x:Static Conversion:ValueEqualsParameterMultiConverter}" Mode="OneWay">
                                                                                <Binding Path="Data.BrowserOptions.GroupName" Source="{StaticResource Explorer}"/>
                                                                                <Binding Path="."/>
                                                                            </MultiBinding>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                    <Setter Property="Linq:XMenuItem.GroupName" Value="GroupName"/>
                                                                </MultiDataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Data:Bind Convert=Conversion:GetTypeConverter}" Value="{x:Type ComponentModel:ListSortDirection}"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter Property="Command" Value="{Binding Data.GroupDirectionCommand, Source={StaticResource Explorer}}"/>
                                                                    <Setter Property="IsChecked">
                                                                        <Setter.Value>
                                                                            <MultiBinding Converter="{x:Static Conversion:ValueEqualsParameterMultiConverter}" Mode="OneWay">
                                                                                <Binding Path="Data.BrowserOptions.GroupDirection" ConvertFrom="{x:Type Data:SortDirection}" ConvertTo="{x:Type SortDirection}" Source="{StaticResource Explorer}"/>
                                                                                <Binding Path="."/>
                                                                            </MultiBinding>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                    <Setter Property="Linq:XMenuItem.GroupName" Value="SortDirection"/>
                                                                </MultiDataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </MenuItem.Resources>
                                                    <MenuItem.ItemsSource>
                                                        <CompositeCollection>
                                                            <CollectionContainer Collection="{Markup:Enumerate Storage:ItemProperty}"/>
                                                            <Separator/>
                                                            <CollectionContainer Collection="{Markup:Enumerate ComponentModel:ListSortDirection}"/>
                                                        </CompositeCollection>
                                                    </MenuItem.ItemsSource>
                                                </MenuItem>
                                                                                    -->
                                                <ContextMenu.Resources>
                                                    <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                                        <Setter Property="IsCheckable" Value="True"/>
                                                        <Setter Property="StaysOpenOnClick" Value="True"/>
                                                    </Style>
                                                </ContextMenu.Resources>
                                                <Separator Linq:XSeparator.Header="{Markup:Loc View}"/>
                                                <MenuItem
                                                    Header="Content" 
                                                    Icon="{Markup:SmallImage Image=ViewContent}"
                                                    IsChecked="{Data:Bind View, Convert={x:Type Conversion:ValueEqualsParameterConverter}, ConverterParameter={x:Static local:BrowserView.Content}}"/>
                                                <MenuItem 
                                                    Header="Details" 
                                                    Icon="{Markup:SmallImage Image=ViewDetails}"
                                                    IsChecked="{Data:Bind View, Convert={x:Type Conversion:ValueEqualsParameterConverter}, ConverterParameter={x:Static local:BrowserView.Details}}"/>
                                                <MenuItem
                                                    Header="List" 
                                                    Icon="{Markup:SmallImage Image=ViewList}"
                                                    IsChecked="{Data:Bind View, Convert={x:Type Conversion:ValueEqualsParameterConverter}, ConverterParameter={x:Static local:BrowserView.List}}"/>
                                                <MenuItem 
                                                    Header="Thumbnails" 
                                                    Icon="{Markup:SmallImage Image=ViewThumbnails}"
                                                    IsChecked="{Data:Bind View, Convert={x:Type Conversion:ValueEqualsParameterConverter}, ConverterParameter={x:Static local:BrowserView.Thumbnails}}"/>
                                                <MenuItem
                                                    Header="Tiles" 
                                                    Icon="{Markup:SmallImage Image=ViewTiles}"
                                                    IsChecked="{Data:Bind View, Convert={x:Type Conversion:ValueEqualsParameterConverter}, ConverterParameter={x:Static local:BrowserView.Tiles}}"/>
                                                <Separator/>
                                                <local:SliderMenuItem Value="{Binding Size, Mode=TwoWay}">
                                                    <MenuItem 
                                                        Header="{Markup:Loc Tiny}" 
                                                        IsCheckable="False"
                                                        local:SliderMenuItem.Value="16" 
                                                        local:SliderMenuItem.Steps="1"/>
                                                    <MenuItem 
                                                        Header="{Markup:Loc Smaller}" 
                                                        IsCheckable="False"
                                                        local:SliderMenuItem.Value="24" 
                                                        local:SliderMenuItem.Steps="1"/>
                                                    <MenuItem 
                                                        Header="{Markup:Loc Small}" 
                                                        IsCheckable="False"
                                                        local:SliderMenuItem.Value="32" 
                                                        local:SliderMenuItem.Steps="1"/>
                                                    <MenuItem 
                                                        Header="{Markup:Loc Normal}" 
                                                        IsCheckable="False"
                                                        local:SliderMenuItem.Value="64" 
                                                        local:SliderMenuItem.Steps="4"/>
                                                    <MenuItem 
                                                        Header="{Markup:Loc Large}" 
                                                        IsCheckable="False"
                                                        local:SliderMenuItem.Value="128" 
                                                        local:SliderMenuItem.Steps="8"/>
                                                    <MenuItem 
                                                        Header="{Markup:Loc Larger}" 
                                                        IsCheckable="False"
                                                        local:SliderMenuItem.Value="256" 
                                                        local:SliderMenuItem.Steps="16"/>
                                                    <MenuItem 
                                                        Header="{Markup:Loc ExtraLarge}" 
                                                        IsCheckable="False"
                                                        local:SliderMenuItem.Value="512" 
                                                        local:SliderMenuItem.Steps="32"/>
                                                </local:SliderMenuItem>
                                            </ContextMenu>
                                        </local:ImageToggleButton.Menu>
                                    </local:ImageToggleButton>
                                </Grid>
                            </local:BottomBorder>
                            <local:Browser Linq:XElement.Name="{x:Static local:Explorer.BrowserKey}" DataContext="{Data:TemplatedParent Options.CurrentFolderOptions}"
                                FooterVisibility="Visible"
                                FileAttributes="{Data:TemplatedParent Options.FileAttributes, Way=2}"
                                FileExtensions="{Data:TemplatedParent Options.FileExtensions, Way=2}"
                                FolderAttributes="{Data:TemplatedParent Options.FolderAttributes, Way=2}"
                                History="{Data:TemplatedParent History, Mode=TwoWay}"
                                GroupDirection="{Data:Bind GroupDirection, Way=2}"
                                GroupName="{Data:Bind GroupName, Way=2}"
                                Linq:XExplorer.Path="{Data:TemplatedParent Options.Path, Way=2}"
                                OpenFilesOnClick="False"
                                Padding="{TemplateBinding Padding}"
                                PresentationTraceSources.TraceLevel="High"
                                SelectionMode="{Data:TemplatedParent SelectionMode, ConvertFrom={x:Type local:SelectionMode}, ConvertTo={x:Type SelectionMode}}"
                                SortDirection="{Data:Bind SortDirection, Way=2}"
                                SortName="{Data:Bind SortName, Way=2}"
                                View="{Data:Bind View, Way=2}"
                                ViewCheckBoxes="{Data:Bind ViewCheckBoxes, Way=2}"
                                ViewFileExtensions="{Data:Bind ViewFileExtensions, Way=2}"
                                ViewFiles="{Data:Bind ViewFiles, Way=2}"
                                ViewSize="{Data:Bind Size, Way=2}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>