<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Converters="clr-namespace:Imagin.Core.Converters"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=Color}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Control}"/>
    </ResourceDictionary.MergedDictionaries>
    <Style x:Key="{x:Type local:ColorHexagon}" TargetType="{x:Type local:ColorHexagon}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="ButtonHeight" Value="23" />
        <Setter Property="ButtonWidth" Value="20" />
        <Setter Property="ButtonStyle">
            <Setter.Value>
                <Style TargetType="{x:Type RadioButton}">
                    <Setter Property="Background" Value="{Data:Self Foreground}" />
                    <Setter Property="BorderThickness" Value="3" />
                    <Setter Property="Foreground" Value="White" />
                    <Setter Property="GroupName" Value="Color" />
                    <Setter Property="Linq:XElement.ToolTipTemplate" Value="{StaticResource {x:Static Linq:XColor.ToolTipTemplateKey}}"/>
                    <Setter Property="OverridesDefaultStyle" Value="True" />
                    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type RadioButton}">
                                <Path
                                    Data="M 0,-1 L +0.866,-0.5 L +0.866,+0.5 L 0,+1 L -0.866,+0.5 L -0.866,-0.5 Z"
                                    Fill="{TemplateBinding Background}"
                                    Stretch="Fill"
                                    Stroke="{TemplateBinding BorderBrush}"
                                    StrokeThickness="{TemplateBinding BorderThickness}"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="ToolTip" Value="{Data:Self Foreground}"/>
                    <Style.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="BorderBrush" Value="{Data:Self Foreground, Converter={x:Static Converters:LightnessConverter.Default}, ConverterParameter=0.5}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="BorderBrush" Value="Transparent" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{Data:Self Foreground, Converter={x:Static Converters:LightnessConverter.Default}, ConverterParameter=0.8}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" Value="{Data:Self Foreground, Converter={x:Static Converters:LightnessConverter.Default}, ConverterParameter=0.7}"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ColorHexagon}">
                    <Viewbox>
                        <Canvas Linq:XElement.Name="{x:Static local:ColorHexagon.CanvasKey}"/>
                    </Viewbox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>