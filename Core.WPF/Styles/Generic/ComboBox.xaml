<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:g="urn:gong-wpf-dragdrop"
    xmlns:l="clr-namespace:Imagin.Core.Local.Extensions"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Conversion="clr-namespace:Imagin.Core.Conversion"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Markup="clr-namespace:Imagin.Core.Markup"
    xmlns:Storage="clr-namespace:Imagin.Core.Storage">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=Button}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Control}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Explorer}"/>
        <ResourceDictionary Source="{local:StyleKey Key=ItemsControl}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Menu}"/>
    </ResourceDictionary.MergedDictionaries>
    <!-- ... -->
    
    <Style x:Key="{x:Static Linq:XComboBox.ToggleButtonStyleKey}" TargetType="{x:Type ToggleButton}">
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        Background="{TemplateBinding Background}" 
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ... -->

    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ItemsControl}}">
        <Setter Property="AlternationCount" Value="2" />
        <Setter Property="Background" Value="{local:ThemeKey Key=ComboBoxBackground}" />
        <Setter Property="BorderBrush" Value="{local:ThemeKey Key=ComboBoxBorder}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{local:ThemeKey Key=ComboBoxForeground}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel                                
                        ScrollViewer.PanningMode="None"
                        ScrollViewer.PanningRatio="0"
                        KeyboardNavigation.DirectionalNavigation="Contained"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Cycle"/>
        <Setter Property="Linq:XComboBox.MenuAnimation" Value="Fade"/>
        <Setter Property="Linq:XComboBox.MenuPlacement" Value="Bottom"/>
        <Setter Property="Linq:XComboBox.MinDropDownHeight" Value="{x:Static Linq:XPopup.MinimumHeight}"/>
        <Setter Property="Linq:XComboBox.PlaceholderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock
                        Opacity="0.4"
                        Text="{Binding}"
                        TextTrimming="CharacterEllipsis"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XComboBox.SelectedItemTemplate" Value="{Data:Self ItemTemplate}"/>
        <Setter Property="Linq:XComboBox.SelectionMode" Value="Single"/>
        <Setter Property="Linq:XItemsControl.EmptyTemplateVisibility" Value="Visible"/>
        <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey Key=ComboBoxForeground}"/>
        <Setter Property="MaxDropDownHeight" Value="{x:Static Linq:XPopup.MaximumHeight}"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Padding" Value="2.5,2" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.PanningMode" Value="None" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid Linq:XGrid.Columns="*,Auto">
                        <ToggleButton Grid.ColumnSpan="2"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            IsChecked="{Data:TemplatedParent IsDropDownOpen, Mode=TwoWay}"
                            Linq:XControl.IgnoreDrop="True"
                            Style="{StaticResource {x:Static Linq:XComboBox.ToggleButtonStyleKey}}"/>
                        
                        <ContentPresenter x:Name="PART_Placeholder"
                            Content="{Data:TemplatedParent Path=(Linq:XComboBox.Placeholder)}" 
                            ContentTemplate="{Data:TemplatedParent Path=(Linq:XComboBox.PlaceholderTemplate)}"
                            ContentTemplateSelector="{Data:TemplatedParent Path=(Linq:XComboBox.PlaceholderTemplateSelector)}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            IsHitTestVisible="False"
                            Margin="{TemplateBinding Padding}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Visibility="Collapsed"/>

                        <ContentPresenter x:Name="ContentSite"
                            ContentTemplate="{Data:TemplatedParent Path=(Linq:XComboBox.SelectedItemTemplate)}" 
                            ContentTemplateSelector="{Data:TemplatedParent Path=(Linq:XComboBox.SelectedItemTemplateSelector)}" 
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            IsHitTestVisible="False" 
                            Margin="{TemplateBinding Padding}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Visibility="{Data:TemplatedParent IsEditable, Converter={x:Static Conversion:BooleanToVisibilityConverter.Default}, ConverterParameter=1}"/>
                        <TextBox
                            Background="Transparent"
                            BorderThickness="0"
                            Focusable="True"
                            Foreground="{TemplateBinding Foreground}"
                            IsHitTestVisible="{TemplateBinding IsEditable}"
                            IsReadOnly="{TemplateBinding IsReadOnly}"
                            Linq:XControl.IgnoreDrop="True"
                            Linq:XTextBoxBase.Placeholder="{Data:TemplatedParent Path=(Linq:XComboBox.Placeholder)}"
                            Padding="{TemplateBinding Padding}"
                            Text="{Data:TemplatedParent Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                            Visibility="{Data:TemplatedParent IsEditable, Converter={x:Static Conversion:BooleanToVisibilityConverter.Default}}"/>
                        
                        <local:RotateElement Grid.Column="1"
                            IsHitTestVisible="False"
                            Margin="0,0,2.5,0"
                            Rotate="{TemplateBinding IsDropDownOpen}"
                            Rotation="-90,0"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Visibility="{Data:Ancestor IsReadOnly, {x:Type ComboBox}, Converter={x:Static Conversion:BooleanToVisibilityConverter.Default}, ConverterParameter=1}">
                            <local:ImageElement 
                                Source="{Markup:InternalImage 32-ArrowDown.png}"
                                Foreground="{TemplateBinding Foreground}"/>
                        </local:RotateElement>

                        <Popup
                            AllowsTransparency="True"
                            Focusable="False"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            Placement="{Data:TemplatedParent Path=(Linq:XComboBox.MenuPlacement)}"
                            PopupAnimation="{Data:TemplatedParent Path=(Linq:XComboBox.MenuAnimation)}"
                            StaysOpen="{Data:TemplatedParent Path=(Linq:XComboBox.StaysOpen)}">
                            <local:PopupBorder 
                                MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                MinHeight="{Data:TemplatedParent Path=(Linq:XComboBox.MinDropDownHeight)}"
                                MinWidth="{TemplateBinding ActualWidth}">
                                <Grid>
                                    <local:EmptyPresenter x:Name="EmptyPresenter"/>
                                    <ScrollViewer>
                                        <ItemsPresenter/>
                                    </ScrollViewer>
                                </Grid>
                            </local:PopupBorder>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Linq:XItemsControl.IsEmpty" Value="True">
                            <Setter TargetName="EmptyPresenter" Property="Margin" Value="{DynamicResource {x:Static local:EmptyPresenter.PopupMarginKey}}"/>
                        </Trigger>
                        <Trigger Property="Linq:XComboBox.SelectionMode" Value="Multiple">
                            <Setter TargetName="ContentSite" Property="Content" Value="{Data:TemplatedParent Path=(Linq:XComboBox.SelectedItems)}"/>
                        </Trigger>
                        <Trigger Property="Linq:XComboBox.SelectionMode" Value="Single">
                            <Setter TargetName="ContentSite" Property="Content" Value="{Data:TemplatedParent SelectionBoxItem}"/>
                        </Trigger>
                        <Trigger Property="Linq:XComboBox.SelectionMode" Value="SingleOrNone">
                            <Setter TargetName="ContentSite" Property="Content" Value="{Data:TemplatedParent SelectionBoxItem}"/>
                        </Trigger>
                        <Trigger Property="Linq:XComboBox.SelectedItemTemplate" Value="{x:Null}">
                            <Setter TargetName="ContentSite" Property="ContentTemplate" Value="{Data:TemplatedParent SelectionBoxItemTemplate}"/>
                        </Trigger>
                        <Trigger Property="Linq:XComboBox.SelectedItemTemplateSelector" Value="{x:Null}">
                            <Setter TargetName="ContentSite" Property="ContentTemplateSelector" Value="{Data:TemplatedParent ItemTemplateSelector}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEditable" Value="False"/>
                                <Condition Property="Linq:XComboBox.IsSelectionEmpty" Value="True"/>
                                <Condition Property="SelectedItem" Value="{x:Null}"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Placeholder" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="VirtualizingPanel.IsContainerVirtualizable" Value="True"/>
        <Setter Property="VirtualizingPanel.ScrollUnit" Value="Pixel"/>
        <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Standard" />
        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
        <Setter Property="Width" Value="Auto" />
        <Style.Triggers>
            <Trigger Property="IsDropDownOpen" Value="True">
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=ComboBoxCheckedBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=ComboBoxCheckedBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=ComboBoxCheckedForeground}"/>
            </Trigger>
            <Trigger Property="IsEditable" Value="True">
                <Setter Property="IsTabStop" Value="False" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{x:Static Linq:XElement.DisabledOpacity}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=ComboBoxFocusBorder}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDropDownOpen" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=ComboBoxMouseOverBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=ComboBoxMouseOverBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=ComboBoxMouseOverForeground}"/>
            </MultiTrigger>
            <!-- ... -->
            <Trigger Property="Linq:XComboBox.SelectionMode" Value="Multiple">
                <Setter Property="Linq:XComboBox.SelectedItemTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <ItemsControl ItemsSource="{Binding}">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <WrapPanel Orientation="Horizontal"/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock><Run x:Name="Comma" Text=", "/><Run Text="{Binding Mode=OneWay}"/></TextBlock>
                                        <DataTemplate.Triggers>
                                            <DataTrigger Binding="{Data:PreviousData}" Value="{x:Null}">
                                                <Setter TargetName="Comma" Property="Text" Value="{x:Null}"/>
                                            </DataTrigger>
                                        </DataTemplate.Triggers>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Linq:XComboBox.StaysOpen" Value="True"/>
            </Trigger>
            <Trigger Property="Linq:XComboBox.SelectionMode" Value="Single">
                <Setter Property="Linq:XComboBox.StaysOpen" Value="False"/>
            </Trigger>
            <Trigger Property="Linq:XComboBox.SelectionMode" Value="SingleOrNone">
                <Setter Property="Linq:XComboBox.StaysOpen" Value="False"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ... -->

    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontFamily" Value="{x:Static SystemFonts.MenuFontFamily}"/>
        <Setter Property="FontSize" Value="{x:Static SystemFonts.MenuFontSize}"/>
        <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=ComboBoxItemForeground}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey Key=ComboBoxItemForeground}"/>
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="*,Auto">
                            <ContentPresenter 
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <local:ImageElement
                                Margin="5,0,0,0"
                                Source="{Markup:InternalImage CheckmarkRound.png}"
                                Foreground="{TemplateBinding Foreground}"
                                SourceSize="12,12"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Visibility="{Data:TemplatedParent Path=(Linq:XComboBoxItem.IsSelected), Converter={x:Static Conversion:BooleanToVisibilityConverter.Default}}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{x:Static Linq:XElement.DisabledOpacity}" />
            </Trigger>
            <Trigger Property="Linq:XComboBoxItem.IsSelected" Value="True">
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=ComboBoxItemSelectedBackground}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=ComboBoxItemSelectedForeground}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="Linq:XComboBoxItem.IsSelected" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=ComboBoxItemMouseOverBackground}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=ComboBoxItemMouseOverForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="False"/>
                    <Condition Property="ItemsControl.AlternationIndex" Value="0" />
                    <Condition Property="Linq:XComboBoxItem.IsSelected" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=ComboBoxItemEvenBackground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="False"/>
                    <Condition Property="ItemsControl.AlternationIndex" Value="1" />
                    <Condition Property="Linq:XComboBoxItem.IsSelected" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=ComboBoxItemOddBackground}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type local:ComboBoxSeparator}" TargetType="{x:Type local:ComboBoxSeparator}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontSize" Value="{x:Static SystemFonts.MenuFontSize}"/>
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=ComboBoxItemForeground}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="IsEnabled" Value="False" />
        <Setter Property="IsHitTestVisible" Value="True" />
        <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=ComboBoxItemForeground}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Padding" Value="10,3" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border
                        Background="{TemplateBinding Background}">
                        <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,*">
                            <ContentPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="{TemplateBinding Padding}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <local:LineElement Orientation="Horizontal"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>
    
    <!-- ... -->

    <Style x:Key="{x:Type local:AddressBox}" TargetType="{x:Type local:AddressBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource {x:Type ComboBoxItem}}">
                    <Setter Property="Linq:XElement.ToolTipTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource {x:Static Linq:XExplorer.ToolTipTemplateKey}}"/>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="ToolTip" Value="{Binding}"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Converter={x:Static Conversion:FileHiddenConverter.Default}}" Value="True">
                            <Setter Property="Opacity" Value="{x:Static local:Explorer.HiddenOpacity}"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsSource" Value="{Data:Self History}" />
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid Linq:XGrid.Columns="Auto,*">
                        <local:Thumbnail
                            Height="16"
                            Margin="0,0,7,0"
                            Path="{Binding}"
                            Width="16"/>
                        <TextBlock 
                            Grid.Column="1"
                            Text="{Binding Converter={x:Static Conversion:FileNameConverter.Default}}"/>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XComboBox.SelectionMode" Value="Single"/>
        <Setter Property="Linq:XExplorer.CopyWarningTitle" Value="{l:Loc Copy}"/>
        <Setter Property="Linq:XExplorer.CopyWarningMessage" Value="{l:Loc Continue, Suffix=?}"/>
        <Setter Property="Linq:XExplorer.InvalidPathAlertMessage" Value="{l:Loc FolderDoesNotExist}"/>
        <Setter Property="Linq:XExplorer.InvalidPathAlertTitle" Value="{l:Loc FolderNotFound}"/>
        <Setter Property="Linq:XExplorer.MoveWarningTitle" Value="{l:Loc Move}"/>
        <Setter Property="Linq:XExplorer.MoveWarningMessage" Value="{l:Loc Continue, Suffix=?}"/>
        <Setter Property="Linq:XExplorer.WarnBeforeDrop" Value="True"/>
        <Setter Property="Padding" Value="5,1.5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:AddressBox}">
                    <Grid Linq:XGrid.Columns="26,26,26,*">
                        <Grid.Resources>
                            <Data:Reference x:Key="AddressBox" Data="{Data:TemplatedParent}"/>
                        </Grid.Resources>
                        <!-- ... -->
                        <local:ImageButton Grid.Column="0" 
                            Command="{Data:TemplatedParent BackCommand}" 
                            HorizontalAlignment="Left"
                            Source="{Markup:InternalImage ArrowW.png}" 
                            ToolTip="{l:Loc Back}"/>
                        <local:ImageButton Grid.Column="1" 
                            Command="{Data:TemplatedParent ForwardCommand}" 
                            HorizontalAlignment="Left"
                            Source="{Markup:InternalImage ArrowE.png}" 
                            ToolTip="{l:Loc Forward}"/>
                        <local:ImageButton Grid.Column="2" 
                            Command="{Data:TemplatedParent GoUpCommand}" 
                            HorizontalAlignment="Left"
                            Source="{Markup:InternalImage ArrowN.png}"
                            ToolTip="{l:Loc Up}"/>
                        <!-- ... -->
                        <Grid x:Name="PART_Grid" Grid.Column="3">
                            <Border
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"/>
                            <Grid Linq:XGrid.Columns="Auto,Auto,*,Auto,Auto,Auto,Auto"
                                Margin="{Data:TemplatedParent Padding}"
                                Linq:XPanel.Spacing="0,0,5,0"
                                Linq:XPanel.SpacingExcept="Last"
                                Linq:XPanel.VerticalContentAlignment="Center">
                                <local:Thumbnail x:Name="PART_Thumbnail"
                                    Height="20"
                                    Linq:XElement.OverrideMargin="5,0,0,0"
                                    Path="{Data:TemplatedParent Path=(Linq:XExplorer.Path)}"
                                    Width="20"/>
                                <local:ImageToggleButton Grid.Column="1"
                                    ButtonVisibility="Visible"
                                    Focusable="False"
                                    Linq:XElement.OverrideMargin="1,0"
                                    Visibility="{Data:TemplatedParent Crumbs.Count, Converter={x:Static Conversion:Int32ToVisibilityConverter.Default}}">
                                    <local:ImageToggleButton.Menu>
                                        <ContextMenu ItemsSource="{Binding Data.Crumbs, Source={StaticResource AddressBox}}">
                                            <ContextMenu.ItemContainerStyle>
                                                <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                                                    <Setter Property="Command" Value="{Binding Data.SetPathCommand, Source={StaticResource AddressBox}}" />
                                                    <Setter Property="CommandParameter" Value="{Binding}" />
                                                    <Setter Property="Header" Value="{Binding Converter={x:Static Conversion:FileNameConverter.Default}}" />
                                                    <Setter Property="Icon" Value="{Binding}"/>
                                                    <Setter Property="Linq:XMenuItem.IconTemplate">
                                                        <Setter.Value>
                                                            <DataTemplate>
                                                                <local:Thumbnail
                                                                    Path="{Binding Mode=OneWay}"/>
                                                            </DataTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Setter Property="Linq:XElement.ToolTipTemplate">
                                                        <Setter.Value>
                                                            <DataTemplate>
                                                                <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource {x:Static Linq:XExplorer.ToolTipTemplateKey}}"/>
                                                            </DataTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Setter Property="ToolTip" Value="{Binding}" />
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding}" Value="*">
                                                            <Setter Property="Visibility" Value="Collapsed"/>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding Converter={x:Static Conversion:FileHiddenConverter.Default}}" Value="True">
                                                            <Setter Property="Opacity" Value="{x:Static local:Explorer.HiddenOpacity}"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </ContextMenu.ItemContainerStyle>
                                        </ContextMenu>
                                    </local:ImageToggleButton.Menu>
                                </local:ImageToggleButton>
                                <!-- ... -->
                                <ToggleButton x:Name="ToggleButton" Grid.Column="2"
                                    Background="Transparent"
                                    ClickMode="Press"
                                    Focusable="False" 
                                    IsChecked="{Data:TemplatedParent IsDropDownOpen, Mode=TwoWay}">
                                    <ToggleButton.Template>
                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                            <Grid Background="{TemplateBinding Background}"/>
                                        </ControlTemplate>
                                    </ToggleButton.Template>
                                </ToggleButton>
                                <ToolBar Grid.Column="2" Linq:XElement.Name="{x:Static local:AddressBox.ToolBarKey}"
                                    AllowDrop="True"
                                    Background="Transparent" 
                                    BorderThickness="0"
                                    g:DragDrop.DropHandler="{Data:TemplatedParent DropHandler}"
                                    g:DragDrop.IsDropTarget="True"
                                    ItemsSource="{TemplateBinding Crumbs}"
                                    ToolTip="{Data:TemplatedParent Path=(Linq:XExplorer.Path)}"
                                    Visibility="{Data:TemplatedParent IsEditable, Converter={x:Static Conversion:BooleanToVisibilityConverter.Default}, ConverterParameter=1}">
                                    <Linq:XElement.ToolTipTemplate>
                                        <DataTemplate>
                                            <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource {x:Static Linq:XExplorer.ToolTipTemplateKey}}"/>
                                        </DataTemplate>
                                    </Linq:XElement.ToolTipTemplate>
                                    <ToolBar.ItemContainerStyle>
                                        <Style TargetType="{x:Type ContentPresenter}">
                                            <Setter Property="AllowDrop" Value="True"/>
                                            <Setter Property="g:DragDrop.DropHandler" Value="{Binding Data.DropHandler, Source={StaticResource AddressBox}}"/>
                                            <Setter Property="g:DragDrop.IsDragSource" Value="True"/>
                                            <Setter Property="g:DragDrop.IsDropTarget" Value="True"/>
                                            <Setter Property="g:DragDrop.UseDefaultDragAdorner" Value="True"/>
                                        </Style>
                                    </ToolBar.ItemContainerStyle>
                                    <ToolBar.ItemTemplate>
                                        <DataTemplate>
                                            <local:FolderButton
                                                Command="{Binding Data.SetPathCommand, Source={StaticResource AddressBox}}"
                                                CommandParameter="{Binding}"
                                                Focusable="False"
                                                Linq:XExplorer.Path="{Binding}"
                                                Margin="0,0,2,0"/>
                                        </DataTemplate>
                                    </ToolBar.ItemTemplate>
                                </ToolBar>
                                <TextBox x:Name="PART_TextBox" Linq:XElement.Name="{x:Static local:AddressBox.TextBoxKey}"
                                    Grid.Column="2"
                                    Background="Transparent" 
                                    BorderThickness="0" 
                                    Focusable="True"
                                    Linq:XElement.LostFocusCommand="{Data:TemplatedParent EnterCommand}"
                                    Linq:XElement.OverrideMargin="0"
                                    Linq:XTextBox.ClearButtonVisibility="Visible"
                                    Linq:XTextBox.EnterCommand="{Data:TemplatedParent EnterCommand}"
                                    Linq:XTextBoxBase.Placeholder="{l:Loc Path}"
                                    Linq:XTextBoxBase.SelectAllOnFocus="True"
                                    Linq:XTextBox.SelectAllOnTripleClick="True"
                                    Padding="3"
                                    Text="{Data:TemplatedParent Path=(Linq:XExplorer.Path), Mode=TwoWay, UpdateSourceTrigger=LostFocus}"
                                    VerticalContentAlignment="Center"
                                    Visibility="{Data:TemplatedParent IsEditable, Converter={x:Static Conversion:BooleanToVisibilityConverter.Default}}"/>
                                <!-- ... -->
                                <local:ImageButton Grid.Column="3"
                                    Command="{Data:TemplatedParent GoCommand}"
                                    Source="{Markup:InternalImage Image=ArrowNext}" 
                                    ToolTip="{l:Loc Go}"
                                    Visibility="{Data:TemplatedParent IsEditable, Converter={x:Static Conversion:BooleanToVisibilityConverter.Default}}"/>
                                <local:ImageButton Grid.Column="4"
                                    Command="{Data:TemplatedParent RefreshCommand}" 
                                    Source="{Markup:InternalImage Refresh.png}" 
                                    ToolTip="{l:Loc Refresh}">
                                    <local:ImageButton.Style>
                                        <Style TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource {x:Type local:ImageButton}}">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                            <Style.Triggers>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Data:Ancestor IsEditable, {x:Type local:AddressBox}}" Value="False"/>
                                                        <Condition Binding="{Data:Ancestor RefreshButtonVisibility, {x:Type local:AddressBox}}" Value="Visible"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </local:ImageButton.Style>
                                </local:ImageButton>
                                <local:ImageToggleButton Grid.Column="5"
                                    CheckedToolTip="{l:Loc Unfavorite}"
                                    IsChecked="{Data:TemplatedParent IsFavorite, Mode=TwoWay}"
                                    Source="{Markup:InternalImage Star.png}"
                                    ToolTip="{l:Loc Favorite}"
                                    Visibility="{Data:TemplatedParent Favorites, Converter={x:Static Conversion:ObjectToVisibilityConverter.Default}}"/>
                                <local:ImageToggleButton Grid.Column="6"
                                    ButtonSource="{Markup:InternalImage 32-ArrowDown.png}"
                                    ButtonVisibility="Visible"
                                    Focusable="False"
                                    IsChecked="{Data:TemplatedParent IsDropDownOpen, Mode=TwoWay}"
                                    ToolTip="{l:Loc History}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Visibility="{Data:Ancestor IsReadOnly, {x:Type ComboBox}, Converter={x:Static Conversion:BooleanToVisibilityConverter.Default}, ConverterParameter=1}"/>
                            </Grid>
                            <!-- ... -->
                        </Grid>
                        <Popup
                            AllowsTransparency="True"
                            Focusable="False" 
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            Placement="{Data:TemplatedParent Path=(Linq:XComboBox.MenuPlacement)}"
                            PlacementTarget="{Binding ElementName=PART_Grid}"
                            PopupAnimation="{Data:TemplatedParent Path=(Linq:XComboBox.MenuAnimation)}"
                            SnapsToDevicePixels="True"
                            StaysOpen="{Data:TemplatedParent Path=(Linq:XComboBox.StaysOpen)}">
                            <local:PopupBorder
                                MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                MinHeight="{Data:TemplatedParent Path=(Linq:XComboBox.MinDropDownHeight)}"
                                Width="{Binding ActualWidth, ElementName=PART_Grid}">
                                <Grid>
                                    <local:EmptyPresenter x:Name="EmptyPresenter"/>
                                    <ScrollViewer>
                                        <ItemsPresenter/>
                                    </ScrollViewer>
                                </Grid>
                            </local:PopupBorder>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Linq:XItemsControl.IsEmpty" Value="True">
                            <Setter TargetName="EmptyPresenter" Property="Margin" Value="{DynamicResource {x:Static local:EmptyPresenter.PopupMarginKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type local:FolderBox}" TargetType="{x:Type local:FolderBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="g:DragDrop.IsDropTarget" Value="True"/>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource {x:Type ComboBoxItem}}">
                    <Setter Property="Linq:XElement.ToolTipTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource {x:Static Linq:XExplorer.ToolTipTemplateKey}}"/>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="ToolTip" Value="{Binding Path}"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type Storage:Item}">
                    <Grid Linq:XGrid.Columns="Auto,*">
                        <local:Thumbnail
                            Margin="0,0,7,0"
                            Path="{Binding Path}"/>
                        <TextBlock 
                            Grid.Column="1"
                            Text="{Binding Path, Converter={x:Static Conversion:FileNameConverter.Default}}"/>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XControl.DropTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:DashedBorder
                        BorderBrush="{local:ThemeKey Key=DropTargetBorder}"
                        BorderThickness="2">
                        <local:ImageElement Source="{Markup:InternalImage Plus.png}"
                            HorizontalAlignment="Center" 
                            VerticalAlignment="Center"/>
                    </local:DashedBorder>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XControl.DropTemplateVisibility" Value="Visible" />
        <Setter Property="Linq:XExplorer.CopyWarningTitle" Value="{l:Loc Copy}"/>
        <Setter Property="Linq:XExplorer.CopyWarningMessage" Value="{l:Loc Continue, Suffix=?}"/>
        <Setter Property="Linq:XExplorer.InvalidPathAlertMessage" Value="{l:Loc FolderDoesNotExist}"/>
        <Setter Property="Linq:XExplorer.InvalidPathAlertTitle" Value="{l:Loc FolderNotFound}"/>
        <Setter Property="Linq:XExplorer.MoveWarningTitle" Value="{l:Loc Move}"/>
        <Setter Property="Linq:XExplorer.MoveWarningMessage" Value="{l:Loc Continue, Suffix=?}"/>
        <Setter Property="Linq:XExplorer.WarnBeforeDrop" Value="True"/>
        <Setter Property="Linq:XElement.ShellContextMenu" Value="{Data:Self SelectedItem.Path}"/>
        <Setter Property="Linq:XElement.ToolTipTemplate" Value="{StaticResource {x:Static Linq:XExplorer.ToolTipTemplateKey}}"/>
        <Setter Property="ToolTip" Value="{Data:Self SelectedItem.Path}"/>
        <Style.Triggers>
            <Trigger Property="SelectedItem" Value="{x:Null}">
                <Setter Property="Linq:XElement.ShellContextMenu" Value="{Data:Self Path}"/>
                <Setter Property="ToolTip" Value="{Data:Self Path}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type local:FontFamilyBox}" TargetType="{x:Type local:FontFamilyBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="ItemsSource" Value="{Binding Source={x:Static Fonts.SystemFontFamilies}}" />
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock FontFamily="{Binding}" MaxHeight="20" Text="{Binding}" VerticalAlignment="Center"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XComboBox.SelectedItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type local:FontSizeBox}" TargetType="{x:Type local:FontSizeBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="ItemsSource" Value="{Data:Self Sizes}" />
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XElement.WheelIncrement" Value="{Data:Self SizeIncrement}" />
        <Setter Property="Linq:XElement.WheelMaximum" Value="{Data:Self SizeMaximum}" />
        <Setter Property="Linq:XElement.WheelMinimum" Value="{Data:Self SizeMinimum}" />
        <Setter Property="Linq:XElement.WheelValue" Value="{Data:Self FontSize}" />
        <Setter Property="Linq:XElement.WheelValues" Value="{Data:Self Sizes}" />
        <Setter Property="SelectedIndex" Value="0" />
    </Style>

    <Style x:Key="{x:Type local:FontStyleBox}" TargetType="{x:Type local:FontStyleBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock FontStyle="{Binding}" Text="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="SelectedIndex" Value="0" />
    </Style>

    <Style x:Key="{x:Type local:FontWeightBox}" TargetType="{x:Type local:FontWeightBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock FontWeight="{Binding}" Text="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="SelectedIndex" Value="0" />
    </Style>

    <Style x:Key="{x:Type local:TimeZoneBox}" TargetType="{x:Type local:TimeZoneBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding DisplayName}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>