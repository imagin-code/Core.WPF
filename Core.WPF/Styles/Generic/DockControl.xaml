<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:l="clr-namespace:Imagin.Core.Local.Extensions"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Analytics="clr-namespace:Imagin.Core.Analytics"
    xmlns:Converters="clr-namespace:Imagin.Core.Converters"
    xmlns:Core="clr-namespace:Imagin.Core;assembly=Imagin.Core"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Markup="clr-namespace:Imagin.Core.Markup"
    xmlns:Media="clr-namespace:Imagin.Core.Media"
    xmlns:Models="clr-namespace:Imagin.Core.Models"
    xmlns:SharedAnalytics="clr-namespace:Imagin.Core.Analytics;assembly=Imagin.Core">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=Color}"/>
        <ResourceDictionary Source="{local:StyleKey Key=ComboBox}"/>
        <ResourceDictionary Source="{local:StyleKey Key=ContentControl}"/>
        <ResourceDictionary Source="{local:StyleKey Key=ContextMenu}"/>
        <ResourceDictionary Source="{local:StyleKey Key=DataGrid}"/>
        <ResourceDictionary Source="{local:StyleKey Key=FrameworkElement}"/>
        <ResourceDictionary Source="{local:StyleKey Key=GridSplitter}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Menu}"/>
        <ResourceDictionary Source="{local:StyleKey Key=TabControl}"/>
        <ResourceDictionary Source="{local:StyleKey Key=TextBlock}"/>
        <ResourceDictionary Source="{local:StyleKey Key=ToolBar}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Window}"/>
    </ResourceDictionary.MergedDictionaries>
    <!-- ...  -->

    <DataTemplate x:Key="{x:Static local:DockControl.FindTemplateKey}">
        <local:FindBox CloseCommand="{Data:Ancestor DockControl.CloseFindCommand, local:DockRootControl}"
            FindText="{Data:PanelBinding FindText, Models:FindPanel}"
            HorizontalAlignment="Right"
            Linq:XElement.CanResize="True"
            Linq:XElement.ResizeCoerceAxis="X"
            Linq:XElement.ResizeCoerceDirection="SW"
            Linq:XElement.ResizeSnap="1"
            MinWidth="360"
            ResultsCommand="{Data:Ancestor DockControl.FindResultsCommand, local:DockRootControl}"
            VerticalAlignment="Top">
            <Linq:XElement.ResizeThumbStyle>
                <Style TargetType="{x:Type Thumb}">
                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Thumb}">
                                <Rectangle Cursor="SizeWE" Fill="Transparent" Height="16" Width="16"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Linq:XElement.ResizeThumbStyle>
            <local:FindBox.Visibility>
                <MultiBinding Converter="{x:Static local:DockControl.SearchVisibilityConverter}">
                    <Binding/>
                    <Data:Ancestor Path="DockControl.ActiveFind" Type="local:DockRootControl"/>
                </MultiBinding>
            </local:FindBox.Visibility>
        </local:FindBox>
    </DataTemplate>

    <!-- ... [Option, Tool] -->
    
    <DataTemplate x:Key="{x:Static local:DockControl.PanelOptionsTemplateKey}">
        <local:PropertyGrid
            BorderThickness="0"
            GroupName="Category"
            HeaderVisibility="Visible"
            Source="{local:SourceFilterBinding DataContext, Core:OptionAttribute, Relative=FindAncestor, RelativeType=HeaderedContentControl}"
            ToolVisibility="Collapsed"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:DockControl.PanelToolsTemplateKey}">
        <Border x:Name="Border" BorderBrush="{local:ThemeKey ActualKey=Border}">
            <local:PropertyGrid
                BorderThickness="0"
                GroupName="Category"
                HeaderVisibility="Collapsed"
                Margin="4"
                Orientation="Horizontal"
                Source="{local:SourceFilterBinding Core:ToolAttribute}"/>
        </Border>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding ToolBarPlacement}" Value="Bottom">
                <Setter TargetName="Border" Property="BorderThickness" Value="0,1,0,0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ToolBarPlacement}" Value="Top">
                <Setter TargetName="Border" Property="BorderThickness" Value="0,0,0,1"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- ... Document stuff -->

    <DataTemplate x:Key="{x:Static local:DockControl.DocumentTemplateKey}">
        <Grid Linq:XGrid.Rows="*,Auto">
            <ContentPresenter Content="{Binding}"
                ContentTemplate="{Data:Ancestor DockControl.DocumentTemplate, local:DockRootControl}"
                ContentTemplateSelector="{Data:Ancestor DockControl.DocumentTemplateSelector, local:DockRootControl}"/>
            <ContentPresenter Content="{Binding}"
                ContentTemplate="{StaticResource {x:Static local:DockControl.FindTemplateKey}}"/>
            <Border x:Name="Border" Grid.Row="1" Background="#11000000" Height="32">
                <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,*"
                    DataContext="{Data:Ancestor DockControl, local:DockRootControl}"
                    Linq:XPanel.VerticalContentAlignment="Center">
                    <ContentPresenter Content="{Binding ActiveDocument}"
                        Visibility="{Data:VisibilityBinding}">
                        <ContentPresenter.ContentTemplate>
                            <DataTemplate>
                                <local:ProgressCircle
                                    Height="16" Width="16"
                                    Margin="0,0,5,0"
                                    Visibility="{Data:VisibilityBinding IsBusy}"/>
                            </DataTemplate>
                        </ContentPresenter.ContentTemplate>
                    </ContentPresenter>
                    <local:PropertyGrid
                        BorderThickness="0"
                        GroupName="Category"
                        HeaderVisibility="Collapsed"
                        Margin="10,2"
                        Orientation="Horizontal"
                        Source="{local:SourceFilterBinding ActiveDocument.Status, Core:StatusAttribute}"/>
                </Grid>
            </Border>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Data:Ancestor DockControl.ActiveDocument.Status, local:DockRootControl}" Value="{x:Null}">
                <Setter TargetName="Border" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Data:Ancestor DockControl.ActiveDocument.Status, local:DockRootControl, Converter={x:Static local:AnyMemberHasAttributeConverter.Default}, ConverterParameter={x:Type Core:StatusAttribute}}" Value="False">
                <Setter TargetName="Border" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- ... Panel stuff -->

    <ContextMenu x:Key="{x:Static local:DockControl.PanelMenuKey}" x:Shared="False" 
        DataContext="{Data:Self PlacementTarget.DataContext}"
        Linq:XElement.RelativeTag="local:DockRootControl"
        Linq:XElement.RelativeTagSource="{Data:Self PlacementTarget}">
        <ContextMenu.Resources>
            <Data:Reference x:Key="DockControl" Data="{Data:Ancestor Tag.DockControl, ContextMenu}"/>
        </ContextMenu.Resources>
        <MenuItem Header="{l:Loc Collapse}"
            Command="{Binding Data.CollapsePanelsCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:InternalImage Image=ArrowRightRound}"/>
        <MenuItem Header="{l:Loc Expand}"
            Command="{Binding Data.ExpandPanelsCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:InternalImage Image=ArrowDownRound}"/>
        <Separator/>
        <MenuItem Header="{l:Loc Pin}"
            Command="{Binding Data.PinCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:InternalImage Pin.png}"
            Visibility="{Data:VisibilityBinding IsEnabled, Relative=Self}"/>
        <MenuItem Header="{l:Loc Unpin}"
            Command="{Binding Data.UnpinCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:InternalImage Unpin.png}"
            Visibility="{Data:VisibilityBinding IsEnabled, Relative=Self}"/>
        <MenuItem Header="{l:Loc PinAll}"
            Command="{Binding Data.PinAllCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:InternalImage PinAll.png}"/>
        <Separator/>
        <MenuItem Header="{l:Loc Float}"
            Command="{Binding Data.FloatCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:InternalImage Cloud.png}"/>
        <MenuItem Header="{l:Loc FloatAll}"
            Command="{Binding Data.FloatAllPanelsCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:InternalImage Clouds.png}"/>
        <Separator/>
        <MenuItem Header="{l:Loc NewHorizontalGroup}"
            Command="{Binding Data.NewPanelHorizontalGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:InternalImage GroupHorizontal.png}"/>
        <MenuItem Header="{l:Loc NewVerticalGroup}"
            Command="{Binding Data.NewPanelVerticalGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:InternalImage GroupVertical.png}"/>
        <Separator/>
        <MenuItem Header="{l:Loc MoveToPreviousGroup}"
            Command="{Binding Data.MovePanelToPreviousGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"/>
        <MenuItem Header="{l:Loc MoveAllToPreviousGroup}"
            Command="{Binding Data.MoveAllPanelsToPreviousGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"/>
        <MenuItem Header="{l:Loc MoveToNextGroup}"
            Command="{Binding Data.MovePanelToNextGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"/>
        <MenuItem Header="{l:Loc MoveAllToNextGroup}"
            Command="{Binding Data.MoveAllPanelsToNextGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"/>
        <Separator/>
        <MenuItem Header="{l:Loc Hide}"
            Command="{Binding Data.HideCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:InternalImage Hide.png}"/>
        <MenuItem Header="{l:Loc HideAll}"
            Command="{Binding Data.HideAllCommand, Source={StaticResource DockControl}}"
            CommandParameter="{Binding}"
            Icon="{Markup:InternalImage HideAll.png}"/>
    </ContextMenu>

    <!-- ... -->

    <DataTemplate x:Key="{x:Static local:DockControl.PanelHeaderPatternKey}">
        <Rectangle Height="5" Stretch="UniformToFill">
            <Rectangle.Fill>
                <VisualBrush 
                    TileMode="Tile" Viewport="0,0,4,5" 
                    ViewportUnits="Absolute" Viewbox="0,0,4,5"    
                    ViewboxUnits="Absolute">
                    <VisualBrush.Visual>
                        <Canvas>
                            <Rectangle Canvas.Left="0" Canvas.Top="0" 
                                Fill="{Data:Ancestor FrameworkElement, Path=(local:ImageElement.Foreground)}" Height="1" Width="1"/>
                            <Rectangle Canvas.Left="2" Canvas.Top="2" 
                                Fill="{Data:Ancestor FrameworkElement, Path=(local:ImageElement.Foreground)}" Height="1" Width="1"/>
                            <Rectangle Canvas.Left="0" Canvas.Top="4" 
                                Fill="{Data:Ancestor FrameworkElement, Path=(local:ImageElement.Foreground)}" Height="1" Width="1"/>
                        </Canvas>
                    </VisualBrush.Visual>
                </VisualBrush>
            </Rectangle.Fill>
        </Rectangle>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:DockControl.PanelHeaderTemplateKey}">
        <Grid Linq:XGrid.Columns="Auto,Auto,Auto,*,Auto,Auto,Auto,Auto">
            <ContentPresenter Grid.Column="0"
                Content="{Binding}"
                ContentTemplate="{Data:Ancestor DockControl.PanelIconTemplate, local:DockRootControl}"
                ContentTemplateSelector="{Data:Ancestor DockControl.PanelIconTemplateSelector, local:DockRootControl}"/>
            <ContentPresenter Grid.Column="1"
                Content="{Binding}"
                ContentTemplate="{Data:Ancestor DockControl.PanelTitleTemplate, local:DockRootControl}"
                Margin="5,0"/>
            <local:ProgressCircle Grid.Column="2"
                Height="16"
                Margin="0,0,5,0"
                Width="16"
                Visibility="{Data:VisibilityBinding IsBusy}"/>
            <ContentPresenter Grid.Column="3" Content="{Binding}"
                ContentTemplate="{DynamicResource {x:Static local:DockControl.PanelHeaderPatternKey}}"/>
            <local:ImageToggleButton Grid.Column="4"
                IsChecked="{Data:TwoWay IsOptionsVisible}"
                Padding="5,2"
                Source="{Markup:InternalImage Options.png}"
                Visibility="{Binding Converter={x:Static local:AnyMemberHasAttributeVisibilityConverter.Default}, ConverterParameter={x:Type Core:OptionAttribute}}"/>
            <local:ImageToggleButton Grid.Column="5"
                Menu="{StaticResource {x:Static local:DockControl.PanelMenuKey}}"
                Padding="5,2"
                Source="{Markup:InternalImage TriangleDown.png}"/>
            <local:ImageButton Grid.Column="6"
                Command="{Data:Ancestor DockControl.PinCommand, local:DockRootControl}"
                CommandParameter="{Binding}"
                Margin="0,0,5,0"
                Source="{Markup:InternalImage Pin.png}"
                ToolTip="{l:Loc Pin}"
                Visibility="{Data:VisibilityBinding IsEnabled, Relative=Self}"/>
            <local:ImageButton Grid.Column="6"
                Command="{Data:Ancestor DockControl.UnpinCommand, local:DockRootControl}"
                CommandParameter="{Binding}"
                Margin="0,0,5,0"
                Source="{Markup:InternalImage Unpin.png}"
                ToolTip="{l:Loc Unpin}"
                Visibility="{Data:Self IsEnabled, Converter={x:Static Converters:BooleanToVisibilityConverter.Default}}"/>
            <local:ImageButton Grid.Column="7"
                Command="{Data:Ancestor DockControl.HideCommand, local:DockRootControl}"
                CommandParameter="{Binding}"
                Source="{Markup:InternalImage X.png}"
                ToolTip="{l:Loc Hide}"
                Visibility="{Data:Self IsEnabled, Converter={x:Static Converters:BooleanToVisibilityConverter.Default}}"/>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:DockControl.PanelBodyTemplateKey}">
        <local:TransitionControl x:Name="TransitionControl" Transition="LeftReplace">
            <local:TransitionControl.ContentTemplateSelector>
                <local:TypeTemplateSelector Default="{StaticResource {x:Static local:DockControl.PanelOptionsTemplateKey}}" Strict="False">
                    <DataTemplate DataType="{x:Type Models:Panel}">
                        <Grid>
                            <HeaderedContentControl x:Name="HeaderedContentControl"
                                Content="{Binding}"
                                ContentTemplate="{Data:Ancestor DockControl.PanelTemplate, local:DockRootControl}"
                                ContentTemplateSelector="{Data:Ancestor DockControl.PanelTemplateSelector, local:DockRootControl}"
                                Linq:XHeaderedContentControl.HeaderPlacement="{Binding ToolBarPlacement}"
                                Linq:XHeaderedContentControl.HeaderVisibility="Collapsed"
                                Linq:XHeaderedContentControl.HorizontalHeaderAlignment="Stretch"
                                Linq:XHeaderedContentControl.VerticalHeaderAlignment="Stretch"/>
                            <ContentPresenter Content="{Binding}"
                                ContentTemplate="{StaticResource {x:Static local:DockControl.FindTemplateKey}}"/>
                        </Grid>
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding Converter={x:Static local:AnyMemberHasAttributeConverter.Default}, ConverterParameter={x:Type Core:ToolAttribute}}" Value="True">
                                <Setter TargetName="HeaderedContentControl" Property="Header" Value="{Binding}"/>
                                <Setter TargetName="HeaderedContentControl" Property="HeaderTemplate" Value="{StaticResource {x:Static local:DockControl.PanelToolsTemplateKey}}"/>
                                <Setter TargetName="HeaderedContentControl" Property="Linq:XHeaderedContentControl.HeaderVisibility" Value="Visible"/>
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </local:TypeTemplateSelector>
            </local:TransitionControl.ContentTemplateSelector>
        </local:TransitionControl>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsOptionsVisible}" Value="True">
                <Setter TargetName="TransitionControl" Property="Content" Value="{x:Null}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsOptionsVisible}" Value="False">
                <Setter TargetName="TransitionControl" Property="Content" Value="{Binding}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    
    <DataTemplate x:Key="{x:Static local:DockControl.PanelTemplateKey}">
        <HeaderedContentControl 
            Header="{Binding}"
            Linq:XHeaderedContentControl.HeaderPlacement="{Data:Ancestor DockControl.PanelHeaderPlacement, local:DockRootControl}">
            <HeaderedContentControl.Resources>
                <Data:Reference x:Key="DockControl" Data="{Data:Ancestor DockControl, local:DockRootControl}"/>
            </HeaderedContentControl.Resources>
            <HeaderedContentControl.HeaderTemplate>
                <DataTemplate>
                    <local:DockPanelHeaderControl
                        ContextMenu="{StaticResource {x:Static local:DockControl.PanelMenuKey}}"
                        local:XDockControl.Drag="True"
                        local:XDockControl.DragTarget="{x:Null}"
                        Visibility="{Data:VisibilityBinding TitleVisibility}">
                        <ContentPresenter x:Name="ContentPresenter" Content="{Binding}" 
                            ContentTemplate="{Binding Data.PanelHeaderTemplate, Source={StaticResource DockControl}}"
                            ContentTemplateSelector="{Binding Data.PanelHeaderTemplateSelector, Source={StaticResource DockControl}}"/>
                    </local:DockPanelHeaderControl>
                    <DataTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Data.PanelHeaderTemplate, Source={StaticResource DockControl}}" Value="{x:Null}"/>
                                <Condition Binding="{Binding Data.PanelHeaderTemplateSelector, Source={StaticResource DockControl}}" Value="{x:Null}"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{StaticResource {x:Static local:DockControl.PanelHeaderTemplateKey}}"/>
                        </MultiDataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </HeaderedContentControl.HeaderTemplate>
            <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource {x:Static local:DockControl.PanelBodyTemplateKey}}"/>
        </HeaderedContentControl>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:DockControl.PanelTitleHeaderTemplateKey}">
        <ContentControl
            Background="Transparent"
            Content="{Binding}"
            ContentTemplate="{Data:Ancestor DockControl.PanelTitleHeaderTemplate, local:DockRootControl}"
            Linq:XElement.MouseEnterCommand="{Data:Ancestor SelectCommand, local:DockRootControl}"
            Linq:XElement.MouseEnterCommandParameter="{Data:Self}"
            Linq:XElement.MouseLeaveCommand="{Data:Ancestor UnselectCommand, local:DockRootControl}"
            local:XDockControl.Drag="True"
            local:XDockControl.DragTarget="{Binding}"
            Padding="5,2.5"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:DockControl.CollapsedPanelTitleHeaderTemplateKey}">
        <Border
            Background="Transparent"
            ContextMenu="{StaticResource {x:Static local:DockControl.PanelMenuKey}}"
            Linq:XElement.MouseEnterCommand="{Data:Ancestor SelectCommand, local:DockRootControl}"
            Linq:XElement.MouseEnterCommandParameter="{Data:Self}"
            Linq:XElement.MouseLeaveCommand="{Data:Ancestor UnselectCommand, local:DockRootControl}"
            local:XDockControl.Drag="True"
            local:XDockControl.DragTarget="{Binding}"
            Padding="10,5"
            VerticalAlignment="Center">
            <local:ImageElement Source="{Binding Icon, Converter={x:Static Converters:NullConverter.Default}}"/>
        </Border>
    </DataTemplate>

    <!-- ... Markers -->

    <Style x:Key="{x:Static local:DockControl.EmptyMarkerStyleKey}" TargetType="{x:Type local:ImageElement}" BasedOn="{StaticResource {x:Type local:ImageElement}}">
        <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=DockControlEmptyMarkerSourceColor}"/>
    </Style>

    <Style x:Key="{x:Static local:DockControl.PrimaryMarkerStyleKey}" TargetType="{x:Type local:ImageElement}" BasedOn="{StaticResource {x:Type local:ImageElement}}">
        <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=DockControlPrimaryMarkerSourceColor}"/>
        <Setter Property="Margin" Value="2.5"/>
        <Setter Property="SourceSize" Value="32,32"/>
    </Style>

    <Style x:Key="{x:Static local:DockControl.SecondaryMarkerStyleKey}" TargetType="{x:Type local:ImageElement}" BasedOn="{StaticResource {x:Type local:ImageElement}}">
        <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=DockControlSecondaryMarkerSourceColor}"/>
        <Setter Property="SourceSize" Value="32,32"/>
    </Style>

    <!-- ... Selection -->

    <Style x:Key="{x:Static local:DockControl.SelectionStyleKey}" TargetType="{x:Type Polygon}">
        <Setter Property="Fill" Value="{local:ThemeKey ActualKey=DockControlSelectionBackground}"/>
        <Setter Property="Stroke" Value="{local:ThemeKey ActualKey=DockControlSelectionBorder}"/>
        <Setter Property="StrokeThickness" Value="5"/>
    </Style>

    <!-- ... Default panels -->

    <DataTemplate x:Key="{x:Static Models:ColorsPanel.TemplateKey}">
        <ScrollViewer
            ClipToBounds="True"
            HorizontalScrollBarVisibility="Auto"
            VerticalScrollBarVisibility="Disabled">
            <ScrollViewer.Resources>
                <Data:Reference x:Key="ColorsPanel" Data="{Binding}"/>
            </ScrollViewer.Resources>
            <ItemsControl ItemsSource="{Binding SelectedGroup}">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WrapPanel Orientation="Vertical"/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <ItemsControl.ItemTemplate>
                    <DataTemplate DataType="{x:Type Media:StringColor}">
                        <Button
                            Background="{Binding Brush}"
                            BorderThickness="0"
                            Command="{Binding Data.SelectColorCommand, Source={StaticResource ColorsPanel}}"
                            CommandParameter="{Binding}"
                            Height="32"
                            Linq:XElement.ToolTipTemplate="{StaticResource {x:Static Linq:XColor.ToolTipTemplateKey}}"
                            Width="32"
                            ToolTip="{Binding Value}">
                            <Button.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="Clone"
                                        Command="{Binding Data.CloneColorCommand, Source={StaticResource ColorsPanel}}"
                                        CommandParameter="{Binding}"/>
                                    <MenuItem Header="Delete"
                                        Command="{Binding Data.DeleteColorCommand, Source={StaticResource ColorsPanel}}"
                                        CommandParameter="{Binding}"/>
                                </ContextMenu>
                            </Button.ContextMenu>
                        </Button>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </ScrollViewer>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Models:ExplorePanel.TemplateKey}">
        <local:Explorer 
            BorderThickness="0"
            BrowserOptions="{Binding ExplorerOptions.BrowserOptions}"
            Favorites="{Binding ExplorerOptions.Favorites, Mode=OneWay}"
            FileOpenedCommand="{Binding OpenedFileCommand}"
            History="{Binding ExplorerOptions.History, Mode=OneWay}"
            Linq:XExplorer.Path="{Binding ExplorerOptions.Path, Mode=TwoWay}"
            Padding="0"
            ShowFavoriteBar="{Binding ExplorerOptions.ShowFavoriteBar}"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Models:FindPanel.TemplateKey}">
        <ScrollViewer
            HorizontalScrollBarVisibility="Hidden"
            VerticalScrollBarVisibility="Auto">
            <local:FindControl
                FindText="{Data:TwoWay FindText}"
                Linq:XElement.Reference="{Binding}"
                Linq:XElement.ReferenceKey="{x:Static Models:FindPanel.ControlKey}"
                MatchCase="{Data:TwoWay MatchCase}"
                MatchWord="{Data:TwoWay MatchWord}"
                ReplaceText="{Data:TwoWay ReplaceText}"
                ResultsCommand="{Binding ResultsCommand}"
                Source="{Data:TwoWay Source}"/>
        </ScrollViewer>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Models:FindResultsPanel.TemplateKey}">
        <DataGrid
            BorderThickness="0"
            CanUserAddRows="False"
            CanUserDeleteRows="True"
            CanUserReorderColumns="True"
            CanUserResizeColumns="True"
            CanUserResizeRows="False"
            CanUserSortColumns="True"
            Linq:XDataGrid.DisplayRowNumber="True"
            Linq:XDataGrid.DisplayRowNumberBullet="{Binding Bullet}"
            Linq:XDataGrid.DisplayRowNumberOffset="1"
            Linq:XElement.Reference="{Binding}"
            Linq:XElement.ReferenceKey="{x:Static Models:DataPanel.DataGridReferenceKey}"
            Linq:XItemsControl.EnableColumnMenu="True"
            Linq:XItemsControl.GroupName="File"
            Linq:XItemsControl.GroupStyle="{DynamicResource {x:Static Linq:XItemsControl.DefaultGroupStyleKey}}"
            Linq:XItemsControl.ColumnVisibility="{Binding Columns}"
            Linq:XItemsControl.GroupDirection="{Binding GroupDirection}"
            Linq:XItemsControl.SortDirection="{Binding SortDirection}"
            Linq:XItemsControl.SortName="{Binding SortName}"
            ScrollViewer.VerticalScrollBarVisibility="Auto"
            ItemsSource="{Binding Results}">
            <DataGrid.Resources>
                <Data:Reference x:Key="FindResultsPanel" Data="{Binding}"/>
            </DataGrid.Resources>
            <DataGrid.Columns>
                <DataGridTemplateColumn Header="{l:Loc Text}"
                    SortMemberPath="Text"
                    Width="*">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock
                                Linq:XTextBlock.SplitText="{Binding Text}"
                                Linq:XTextBlock.SplitTextKey="{Binding Data.Results.FindText, Source={StaticResource FindResultsPanel}}"
                                TextTrimming="CharacterEllipsis"
                                TextWrapping="{Binding Data.TextWrap, Converter={x:Static Converters:TextWrappingConverter.Default}, Source={StaticResource FindResultsPanel}}">
                                <Linq:XTextBlock.SplitTextStyle>
                                    <Style TargetType="Run">
                                        <Setter Property="Background" Value="DarkOrange"/>
                                        <Setter Property="Foreground" Value="#333"/>
                                    </Style>
                                </Linq:XTextBlock.SplitTextStyle>
                            </TextBlock>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="{l:Loc Document}"
                    SortMemberPath="Target.Path"
                    Width="Auto">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock
                                Text="{Data:FileNameBinding Target.Path, ConverterParameter=1}"
                                TextTrimming="CharacterEllipsis"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="{l:Loc Line}"
                    SortMemberPath="Line"
                    Width="Auto">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock 
                                Text="{Binding Line}"
                                TextTrimming="CharacterEllipsis"
                                ToolTip="{Data:Self Text}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="{l:Loc Column}"
                    SortMemberPath="Column"
                    Width="Auto">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock 
                                Text="{Binding Column}"
                                TextTrimming="CharacterEllipsis"
                                ToolTip="{Data:Self Text}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
            <DataGrid.ItemContainerStyle>
                <Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource {x:Type DataGridRow}}">
                    <Setter Property="Linq:XDataGridRow.DoubleClickCommand" Value="{Binding Data.OpenResultCommand, Source={StaticResource FindResultsPanel}}"/>
                    <Setter Property="Linq:XDataGridRow.DoubleClickCommandParameter" Value="{Binding}"/>
                    <Setter Property="Visibility">
                        <Setter.Value>
                            <MultiBinding Converter="{x:Static Models:FindResultsPanel.VisibilityConverter}" Mode="OneWay">
                                <Binding/>
                                <Binding Path="Data.FilterSource" 
                                    Source="{StaticResource FindResultsPanel}"/>
                                <Binding Path="Data.Search" 
                                    Source="{StaticResource FindResultsPanel}"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </Style>
            </DataGrid.ItemContainerStyle>
        </DataGrid>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Models:LogPanel.TemplateKey}">
        <ContentPresenter x:Name="ContentPresenter" Content="{Binding}">
            <ContentPresenter.ContextMenu>
                <ContextMenu DataContext="{Data:Self PlacementTarget.DataContext}">
                    <MenuItem Header="{l:Loc Cut}"
                        Command="{Binding CutCommand}"
                        Icon="{Markup:InternalImage Cut.png}"/>
                    <MenuItem Header="{l:Loc Copy}"
                        Command="{Binding CopyCommand}"
                        Icon="{Markup:InternalImage Copy.png}"/>
                    <Separator/>
                    <MenuItem Header="{l:Loc Clear}"
                        Command="{Binding ClearCommand}"
                        Icon="{Markup:InternalImage XRound.png}"/>
                </ContextMenu>
            </ContentPresenter.ContextMenu>
        </ContentPresenter>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding View}" Value="Rows">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate DataType="{x:Type Models:LogPanel}">
                            <DataGrid
                                BorderThickness="0"
                                CanUserAddRows="False"
                                CanUserDeleteRows="True"
                                CanUserReorderColumns="True"
                                CanUserResizeColumns="True"
                                CanUserResizeRows="False"
                                CanUserSortColumns="True"
                                Linq:XDataGrid.DisplayRowNumber="True"
                                Linq:XDataGrid.DisplayRowNumberBullet="{Binding Bullet}"
                                Linq:XDataGrid.DisplayRowNumberOffset="1"
                                Linq:XElement.Reference="{Binding}"
                                Linq:XElement.ReferenceKey="{x:Static Models:DataPanel.DataGridReferenceKey}"
                                Linq:XItemsControl.EnableColumnMenu="True"
                                Linq:XItemsControl.ColumnVisibility="{Binding Columns}"
                                Linq:XItemsControl.GroupDirection="{Binding GroupDirection}"
                                Linq:XItemsControl.GroupName="{Binding GroupName}"
                                Linq:XItemsControl.GroupStyle="{DynamicResource {x:Static Linq:XItemsControl.DefaultGroupStyleKey}}"
                                Linq:XItemsControl.SortDirection="{Binding SortDirection}"
                                Linq:XItemsControl.SortName="{Binding SortName}"
                                ScrollViewer.VerticalScrollBarVisibility="Auto"
                                VirtualizingPanel.IsVirtualizing="False"
                                VirtualizingPanel.VirtualizationMode="Standard"
                                ItemsSource="{Binding Data}">
                                <DataGrid.Resources>
                                    <Data:Reference x:Key="LogPanel" Data="{Binding}"/>

                                    <DataTemplate x:Key="DefaultMessageTemplate" DataType="SharedAnalytics:LogEntry">
                                        <TextBlock
                                            Text="{Binding Result.Text}"
                                            TextTrimming="CharacterEllipsis"
                                            TextWrapping="{Binding Data.TextWrap, Converter={x:Static Converters:TextWrappingConverter.Default}, Source={StaticResource LogPanel}}"
                                            ToolTip="{Data:Self Text}"/>
                                    </DataTemplate>

                                    <DataTemplate x:Key="MessageTemplate" DataType="SharedAnalytics:LogEntry">
                                        <ContentPresenter x:Name="ContentPresenter" Content="{Binding}"/>
                                        <DataTemplate.Triggers>
                                            <DataTrigger Binding="{Binding Result.Type}" Value="Error">
                                                <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                                                    <Setter.Value>
                                                        <DataTemplate DataType="SharedAnalytics:LogEntry">
                                                            <local:ErrorControl Error="{Binding Result}" 
                                                                Wrap="{Binding Data.TextWrap, Converter={x:Static Converters:TextWrappingConverter.Default}, Source={StaticResource LogPanel}}"/>
                                                        </DataTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Result.Type}" Value="Message">
                                                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{StaticResource DefaultMessageTemplate}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Result.Type}" Value="Success">
                                                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{StaticResource DefaultMessageTemplate}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Result.Type}" Value="Warning">
                                                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{StaticResource DefaultMessageTemplate}"/>
                                            </DataTrigger>
                                        </DataTemplate.Triggers>
                                    </DataTemplate>
                                </DataGrid.Resources>
                                <DataGrid.Columns>
                                    <DataGridTemplateColumn Header="{l:Loc Type}"
                                        SortMemberPath="Type"
                                        Width="Auto">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <local:ImageElement x:Name="Image"/>
                                                <DataTemplate.Triggers>
                                                    <DataTrigger Binding="{Binding Result.Type}" Value="Error">
                                                        <Setter TargetName="Image" Property="Foreground" Value="{local:ThemeKey ActualKey=ResultError}"/>
                                                        <Setter TargetName="Image" Property="Source" Value="{Markup:InternalImage XRound.png}"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding Result.Type}" Value="Message">
                                                        <Setter TargetName="Image" Property="Foreground" Value="{local:ThemeKey ActualKey=ResultMessage}"/>
                                                        <Setter TargetName="Image" Property="Source" Value="{Markup:InternalImage Message.png}"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding Result.Type}" Value="Success">
                                                        <Setter TargetName="Image" Property="Foreground" Value="{local:ThemeKey ActualKey=ResultSuccess}"/>
                                                        <Setter TargetName="Image" Property="Source" Value="{Markup:InternalImage CheckmarkRound.png}"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding Result.Type}" Value="Warning">
                                                        <Setter TargetName="Image" Property="Foreground" Value="{local:ThemeKey ActualKey=ResultWarning}"/>
                                                        <Setter TargetName="Image" Property="Source" Value="{Markup:InternalImage Warning.png}"/>
                                                    </DataTrigger>
                                                </DataTemplate.Triggers>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                    <DataGridTemplateColumn Header="{l:Loc Message}"
                                        CellTemplate="{StaticResource MessageTemplate}"
                                        SortMemberPath="Result.Text"
                                        Width="*"/>
                                    <DataGridTemplateColumn Header="{l:Loc Line}"
                                        SortMemberPath="Line"
                                        Width="Auto">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock 
                                                    Text="{Binding Line}"
                                                    TextTrimming="CharacterEllipsis"
                                                    ToolTip="{Data:Self Text}"/>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                    <DataGridTemplateColumn Header="{l:Loc Sender}"
                                        SortMemberPath="Sender"
                                        Width="Auto">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock 
                                                    Text="{Binding Sender}"
                                                    TextTrimming="CharacterEllipsis"
                                                    ToolTip="{Data:Self Text}"/>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                    <DataGridTemplateColumn Header="{l:Loc Member}"
                                        SortMemberPath="Member"
                                        Width="Auto">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock 
                                                    Text="{Binding Member}"
                                                    TextTrimming="CharacterEllipsis"
                                                    ToolTip="{Data:Self Text}"/>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                    <DataGridTemplateColumn Header="{l:Loc Level}"
                                        SortMemberPath="Level"
                                        Width="Auto">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock 
                                                    Text="{Binding Level}"
                                                    TextTrimming="CharacterEllipsis"
                                                    ToolTip="{Data:Self Text}"/>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                    <DataGridTemplateColumn Header="{l:Loc Added}"
                                        SortMemberPath="Added"
                                        Width="Auto">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock 
                                                    Text="{Binding Added, StringFormat=h:mm tt}"
                                                    TextTrimming="CharacterEllipsis"
                                                    ToolTip="{Data:Self Text}"/>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                </DataGrid.Columns>
                                <DataGrid.ItemContainerStyle>
                                    <Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource {x:Type DataGridRow}}">
                                        <Setter Property="ContextMenu">
                                            <Setter.Value>
                                                <ContextMenu DataContext="{Data:Self PlacementTarget.DataContext}">
                                                    <MenuItem Header="{l:Loc Cut}"
                                                        Command="{Binding Data.CutSingleCommand, Source={StaticResource LogPanel}}"
                                                        CommandParameter="{Binding}"
                                                        Icon="{Markup:InternalImage Cut.png}"/>
                                                    <MenuItem Header="{l:Loc Copy}"
                                                        Command="{Binding Data.CopySingleCommand, Source={StaticResource LogPanel}}"
                                                        CommandParameter="{Binding}"
                                                        Icon="{Markup:InternalImage Copy.png}"/>
                                                    <Separator/>
                                                    <MenuItem Header="{l:Loc Remove}"
                                                        Command="{Binding Data.RemoveCommand, Source={StaticResource LogPanel}}"
                                                        CommandParameter="{Binding}"
                                                        Icon="{Markup:InternalImage XRound.png}"/>
                                                </ContextMenu>
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="Visibility">
                                            <Setter.Value>
                                                <MultiBinding Converter="{x:Static Models:LogPanel.VisibilityConverter}" Mode="OneWay">
                                                    <Binding/>
                                                    <Binding Path="Data.Filter" 
                                                        Source="{StaticResource LogPanel}"/>
                                                    <Binding Path="Data.FilterLevel" 
                                                        Source="{StaticResource LogPanel}"/>
                                                    <Binding Path="Data.Search" 
                                                        Source="{StaticResource LogPanel}"/>
                                                </MultiBinding>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </DataGrid.ItemContainerStyle>
                            </DataGrid>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding View}" Value="Text">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate DataType="{x:Type Models:LogPanel}">
                            <TextBox
                                AcceptsReturn="True"
                                BorderThickness="0"
                                HorizontalAlignment="Stretch"
                                IsReadOnly="True"
                                Linq:XTextBox.ClearButtonVisibility="Collapsed"
                                Linq:XTextBoxBase.ScrollToEnd="True"
                                Linq:XTextBoxBase.TextTrimming="None"
                                ScrollViewer.HorizontalScrollBarVisibility="Auto"
                                ScrollViewer.VerticalScrollBarVisibility="Auto"
                                Text="{Binding Text}"
                                TextWrapping="{Binding TextWrap, Converter={x:Static Converters:TextWrappingConverter.Default}}"
                                VerticalAlignment="Stretch"
                                VerticalContentAlignment="Top"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Models:NotificationsPanel.TemplateKey}">
        <ItemsControl
            ItemsSource="{Binding Data}"
            Linq:XItemsControl.EmptyTemplateVisibility="Visible">
            <ItemsControl.Resources>
                <Data:Reference x:Key="NotificationsPanel" Data="{Binding}"/>
            </ItemsControl.Resources>
            <ItemsControl.ItemContainerStyle>
                <Style TargetType="ContentPresenter">
                    <Setter Property="Linq:XElement.FadeIn" Value="True"/>
                    <Setter Property="Linq:XElement.FadeOut" Value="True"/>
                </Style>
            </ItemsControl.ItemContainerStyle>
            <ItemsControl.ItemTemplate>
                <DataTemplate DataType="Analytics:Notification">
                    <local:BottomBorder>
                        <local:SwipeButton
                            BorderThickness="0"
                            Content="{Binding}"
                            Left="{Markup:InternalImage Image=Unread}"
                            LeftSwipeCommand="{Binding MarkCommand}"
                            LeftSwipeCommandParameter="{Binding}"
                            Right="{Markup:InternalImage Image=Trash}"
                            RightSwipeCommand="{Binding Data.RemoveCommand, Source={StaticResource NotificationsPanel}}"
                            RightSwipeCommandParameter="{Binding}"
                            SwipeDirection="Horizontal"
                            SwipeMode="Default">
                            <local:SwipeButton.ContentTemplate>
                                <DataTemplate DataType="Analytics:Notification">
                                    <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,Auto,*">
                                        <local:FillElement x:Name="FillElement"
                                            Width="5"/>
                                        <local:ImageElement x:Name="ImageElement"
                                            Margin="10,0,0,0"
                                            VerticalAlignment="Center"/>
                                        <StackPanel
                                            Linq:XPanel.Spacing="0,0,0,5"
                                            Linq:XPanel.SpacingExcept="Last"
                                            Margin="10">
                                            <TextBlock 
                                                FontWeight="Bold" 
                                                Text="{Binding Title}"
                                                TextTrimming="CharacterEllipsis"
                                                TextWrapping="{Binding Data.TextWrap, Converter={x:Static Converters:TextWrappingConverter.Default}, Source={StaticResource NotificationsPanel}}"/>
                                            <TextBlock 
                                                Opacity="0.5" 
                                                Text="{Binding Result.Text}"
                                                TextWrapping="{Binding Data.TextWrap, Converter={x:Static Converters:TextWrappingConverter.Default}, Source={StaticResource NotificationsPanel}}"/>
                                            <local:AccentLabel HorizontalAlignment="Left">
                                                <TextBlock FontStyle="Italic" Opacity="0.8" Text="{Data:RelativeTimeBinding Created}"/>
                                            </local:AccentLabel>
                                        </StackPanel>
                                    </Grid>
                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding IsRead}" Value="True">
                                            <Setter TargetName="FillElement" Property="Fill" Value="#11000000"/>
                                        </DataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsRead}" Value="False"/>
                                                <Condition Binding="{Binding Result.Type}" Value="Error"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="FillElement" Property="Fill" Value="{local:ThemeKey ActualKey=ResultError}"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsRead}" Value="False"/>
                                                <Condition Binding="{Binding Result.Type}" Value="Message"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="FillElement" Property="Fill" Value="{local:ThemeKey ActualKey=ResultMessage}"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsRead}" Value="False"/>
                                                <Condition Binding="{Binding Result.Type}" Value="Success"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="FillElement" Property="Fill" Value="{local:ThemeKey ActualKey=ResultSuccess}"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsRead}" Value="False"/>
                                                <Condition Binding="{Binding Result.Type}" Value="Warning"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="FillElement" Property="Fill" Value="{local:ThemeKey ActualKey=ResultWarning}"/>
                                        </MultiDataTrigger>
                                        <DataTrigger Binding="{Binding Result.Type}" Value="Error">
                                            <Setter TargetName="ImageElement" Property="Foreground" Value="{local:ThemeKey ActualKey=ResultError}"/>
                                            <Setter TargetName="ImageElement" Property="Source" Value="{Markup:InternalImage XRound.png}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Result.Type}" Value="Message">
                                            <Setter TargetName="ImageElement" Property="Foreground" Value="{local:ThemeKey ActualKey=ResultMessage}"/>
                                            <Setter TargetName="ImageElement" Property="Source" Value="{Markup:InternalImage Message.png}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Result.Type}" Value="Success">
                                            <Setter TargetName="ImageElement" Property="Foreground" Value="{local:ThemeKey ActualKey=ResultSuccess}"/>
                                            <Setter TargetName="ImageElement" Property="Source" Value="{Markup:InternalImage CheckmarkRound.png}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Result.Type}" Value="Warning">
                                            <Setter TargetName="ImageElement" Property="Foreground" Value="{local:ThemeKey ActualKey=ResultWarning}"/>
                                            <Setter TargetName="ImageElement" Property="Source" Value="{Markup:InternalImage Warning.png}"/>
                                        </DataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </local:SwipeButton.ContentTemplate>
                            <local:SwipeButton.LeftTemplate>
                                <DataTemplate>
                                    <Border Background="#007acc">
                                        <local:ImageElement
                                            Foreground="White"
                                            HorizontalAlignment="Left" VerticalAlignment="Center"
                                            Margin="20"
                                            Source="{Binding}"/>
                                    </Border>
                                </DataTemplate>
                            </local:SwipeButton.LeftTemplate>
                            <local:SwipeButton.RightTemplate>
                                <DataTemplate>
                                    <Border Background="#900">
                                        <local:ImageElement
                                            Foreground="White"
                                            HorizontalAlignment="Right" VerticalAlignment="Center"
                                            Margin="20"
                                            Source="{Binding}"/>
                                    </Border>
                                </DataTemplate>
                            </local:SwipeButton.RightTemplate>
                        </local:SwipeButton>
                    </local:BottomBorder>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Models:OptionsPanel.TemplateKey}">
        <local:PropertyGrid
            BorderThickness="0"
            GroupName="Category"
            HeaderVisibility="Visible"
            Source="{Data:Options}"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Models:PropertiesPanel.TemplateKey}">
        <local:PropertyGrid
            BorderThickness="0"
            GroupName="Category"
            HeaderVisibility="Visible"
            Source="{Binding Source}"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Models:ThemePanel.TemplateKey}">
        <local:PropertyGrid
            BorderThickness="0"
            Filter="Entry"
            GroupName="None"
            HeaderVisibility="Visible"
            Source="{Data:RemoteBinding CurrentTheme, RemoteSource=Resources}"
            View="Single"/>
    </DataTemplate>

    <!-- ... Styles -->
    
    <Style x:Key="{x:Static local:DockControl.DocumentStyle}" TargetType="TabItem" BasedOn="{StaticResource {x:Type TabItem}}">
        <Setter Property="Content" Value="{Binding}"/>
        <Setter Property="Linq:XElement.PreviewMouseLeftButtonUpCommand" Value="{Data:Ancestor DockControl.DockTabCommand, local:DockRootControl}"/>
        <Setter Property="Linq:XElement.PreviewMouseLeftButtonUpCommandParameter" Value="{Data:Self}"/>
        <Setter Property="ToolTip" Value="{Binding ToolTip}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Data:IsBinding Models:Document}" Value="True">
                <Setter Property="ContentTemplate" Value="{StaticResource {x:Static local:DockControl.DocumentTemplateKey}}"/>
                <Setter Property="Linq:XElement.ToolTipTemplate" Value="{Data:Ancestor DockControl.DocumentToolTipTemplate, local:DockRootControl}"/>
                <Setter Property="Linq:XElement.ToolTipTemplateSelector" Value="{Data:Ancestor DockControl.DocumentToolTipTemplateSelector, local:DockRootControl}"/>
            </DataTrigger>
            <DataTrigger Binding="{Data:IsBinding Models:Panel}" Value="True">
                <Setter Property="ContentTemplate" Value="{StaticResource {x:Static local:DockControl.PanelBodyTemplateKey}}"/>
                <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                <Setter Property="Linq:XElement.ToolTipTemplate" Value="{Data:Ancestor DockControl.PanelToolTipTemplate, local:DockRootControl}"/>
                <Setter Property="Linq:XElement.ToolTipTemplateSelector" Value="{Data:Ancestor DockControl.PanelToolTipTemplateSelector, local:DockRootControl}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Self IsSelected}" Value="True"/>
                    <Condition Binding="{Data:Ancestor Active, local:DockDocumentControl}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=TabControlBorderActive}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=TabControlBorderActive}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Self IsSelected}" Value="True"/>
                    <Condition Binding="{Data:Ancestor Active, local:DockDocumentControl}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=TabControlBorder}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=TabControlBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=TabItemForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=TabItemForeground}"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static local:DockControl.PanelStyle}" TargetType="TabItem" BasedOn="{StaticResource {x:Type TabItem}}">
        <Setter Property="Content" Value="{Binding}"/>
        <Setter Property="ContentTemplate" Value="{StaticResource {x:Static local:DockControl.PanelTemplateKey}}"/>
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
        <Setter Property="Linq:XElement.PreviewMouseLeftButtonUpCommand" Value="{Data:Ancestor DockControl.DockTabCommand, local:DockRootControl}"/>
        <Setter Property="Linq:XElement.PreviewMouseLeftButtonUpCommandParameter" Value="{Data:Self}"/>
        <Setter Property="Linq:XElement.ToolTipTemplate" Value="{Data:Ancestor DockControl.PanelToolTipTemplate, local:DockRootControl}"/>
        <Setter Property="Linq:XElement.ToolTipTemplateSelector" Value="{Data:Ancestor DockControl.PanelToolTipTemplateSelector, local:DockRootControl}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="ToolTip" Value="{Binding ToolTip}"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Self IsSelected}" Value="True"/>
                    <Condition Binding="{Data:Ancestor Active, {x:Type local:DockPanelControl}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=TabControlBorderActive}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=TabControlBorderActive}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Self IsSelected}" Value="True"/>
                    <Condition Binding="{Data:Ancestor Active, {x:Type local:DockPanelControl}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=TabControlBorder}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=TabControlBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=TabItemForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=TabItemForeground}"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static local:DockControl.GridSplitterStyleKey}" TargetType="{x:Type GridSplitter}" BasedOn="{StaticResource {x:Type GridSplitter}}">
        <Setter Property="DragIncrement" Value="16"/>
    </Style>

    <!-- ... DockControl -->

    <Style x:Key="{x:Type local:DockControl}" TargetType="{x:Type local:DockControl}">
        <Setter Property="DefaultTemplates">
            <Setter.Value>
                <local:KeyTemplateCollection>
                    <local:KeyTemplate DataType="{x:Type Models:ColorsPanel}">
                        <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource {x:Static Models:ColorsPanel.TemplateKey}}"/>
                    </local:KeyTemplate>
                    <local:KeyTemplate DataType="{x:Type Models:ExplorePanel}">
                        <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource {x:Static Models:ExplorePanel.TemplateKey}}"/>
                    </local:KeyTemplate>
                    <local:KeyTemplate DataType="{x:Type Models:FindPanel}">
                        <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource {x:Static Models:FindPanel.TemplateKey}}"/>
                    </local:KeyTemplate>
                    <local:KeyTemplate DataType="{x:Type Models:FindResultsPanel}">
                        <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource {x:Static Models:FindResultsPanel.TemplateKey}}"/>
                    </local:KeyTemplate>
                    <local:KeyTemplate DataType="{x:Type Models:LogPanel}">
                        <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource {x:Static Models:LogPanel.TemplateKey}}"/>
                    </local:KeyTemplate>
                    <local:KeyTemplate DataType="{x:Type Models:NotificationsPanel}">
                        <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource {x:Static Models:NotificationsPanel.TemplateKey}}"/>
                    </local:KeyTemplate>
                    <local:KeyTemplate DataType="{x:Type Models:OptionsPanel}">
                        <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource {x:Static Models:OptionsPanel.TemplateKey}}"/>
                    </local:KeyTemplate>
                    <local:KeyTemplate DataType="{x:Type Models:PropertiesPanel}">
                        <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource {x:Static Models:PropertiesPanel.TemplateKey}}"/>
                    </local:KeyTemplate>
                    <local:KeyTemplate DataType="{x:Type Models:ThemePanel}">
                        <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource {x:Static Models:ThemePanel.TemplateKey}}"/>
                    </local:KeyTemplate>
                </local:KeyTemplateCollection>
            </Setter.Value>
        </Setter>
        <Setter Property="DocumentHeaderTemplate">
            <Setter.Value>
                <DataTemplate DataType="Models:Document">
                    <Grid
                        Background="Transparent"
                        Linq:XElement.MouseEnterCommand="{Data:Ancestor SelectCommand, {x:Type local:DockRootControl}}"
                        Linq:XElement.MouseEnterCommandParameter="{Data:Self}"
                        local:XDockControl.Drag="True"
                        local:XDockControl.DragTarget="{Binding}">
                        <Grid.Resources>
                            <Data:Reference x:Key="DockControl" Data="{Data:Ancestor DockControl, {x:Type local:DockRootControl}}"/>
                        </Grid.Resources>
                        <Grid Linq:XGrid.Columns="Auto,Auto,Auto,Auto,Auto" Linq:XPanel.VerticalContentAlignment="Center">
                            <Grid.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="{l:Loc Minimize}"
                                        Command="{Binding Data.MinimizeCommand, Source={StaticResource DockControl}}"
                                        CommandParameter="{Binding}"
                                        Icon="{Markup:InternalImage Minimize.png}"
                                        Visibility="{Data:Self IsEnabled, Converter={x:Static Converters:BooleanToVisibilityConverter.Default}}"/>
                                    <MenuItem Header="{l:Loc Restore}"
                                        Command="{Binding Data.RestoreCommand, Source={StaticResource DockControl}}"
                                        CommandParameter="{Binding}"
                                        Icon="{Markup:InternalImage Restore.png}"
                                        Visibility="{Data:Self IsEnabled, Converter={x:Static Converters:BooleanToVisibilityConverter.Default}}"/>
                                    <MenuItem Header="{l:Loc MinimizeAll}"
                                        Command="{Binding Data.MinimizeAllCommand, Source={StaticResource DockControl}}"
                                        Icon="{Markup:InternalImage MinimizeAll.png}"
                                        Visibility="{Data:Self IsEnabled, Converter={x:Static Converters:BooleanToVisibilityConverter.Default}}"/>
                                    <MenuItem Header="{l:Loc RestoreAll}"
                                        Command="{Binding Data.RestoreAllCommand, Source={StaticResource DockControl}}"
                                        Icon="{Markup:InternalImage RestoreAll.png}"
                                        Visibility="{Data:Self IsEnabled, Converter={x:Static Converters:BooleanToVisibilityConverter.Default}}"/>
                                    <Separator/>
                                    <MenuItem Header="{l:Loc Float}"
                                        Command="{Binding Data.FloatCommand, Source={StaticResource DockControl}}"
                                        CommandParameter="{Binding}"
                                        Icon="{Markup:InternalImage Cloud.png}"/>
                                    <MenuItem Header="{l:Loc FloatAll}"
                                        Command="{Binding Data.FloatAllDocumentsCommand, Source={StaticResource DockControl}}"
                                        CommandParameter="{Binding}"
                                        Icon="{Markup:InternalImage Clouds.png}"/>
                                    <Separator/>
                                    <MenuItem Header="{l:Loc NewHorizontalGroup}"
                                        Command="{Binding Data.NewDocumentHorizontalGroupCommand, Source={StaticResource DockControl}}"
                                        CommandParameter="{Binding}"
                                        Icon="{Markup:InternalImage GroupHorizontal.png}"/>
                                    <MenuItem Header="{l:Loc NewVerticalGroup}"
                                        Command="{Binding Data.NewDocumentVerticalGroupCommand, Source={StaticResource DockControl}}"
                                        CommandParameter="{Binding}"
                                        Icon="{Markup:InternalImage GroupVertical.png}"/>
                                    <MenuItem Header="{l:Loc MoveToPreviousGroup}"
                                        Command="{Binding Data.MoveDocumentToPreviousGroupCommand, Source={StaticResource DockControl}}"
                                        CommandParameter="{Binding}"
                                        Visibility="{Data:Self IsEnabled, Converter={x:Static Converters:BooleanToVisibilityConverter.Default}}"/>
                                    <MenuItem Header="{l:Loc MoveAllToPreviousGroup}"
                                        Command="{Binding Data.MoveAllDocumentsToPreviousGroupCommand, Source={StaticResource DockControl}}"
                                        CommandParameter="{Binding}"
                                        Visibility="{Data:Self IsEnabled, Converter={x:Static Converters:BooleanToVisibilityConverter.Default}}"/>
                                    <MenuItem Header="{l:Loc MoveToNextGroup}"
                                        Command="{Binding Data.MoveDocumentToNextGroupCommand, Source={StaticResource DockControl}}"
                                        CommandParameter="{Binding}"
                                        Visibility="{Data:Self IsEnabled, Converter={x:Static Converters:BooleanToVisibilityConverter.Default}}"/>
                                    <MenuItem Header="{l:Loc MoveAllToNextGroup}"
                                        Command="{Binding Data.MoveAllDocumentsToNextGroupCommand, Source={StaticResource DockControl}}"
                                        CommandParameter="{Binding}"
                                        Visibility="{Data:Self IsEnabled, Converter={x:Static Converters:BooleanToVisibilityConverter.Default}}"/>
                                    <Separator/>
                                    <MenuItem Header="{l:Loc Close}"
                                        Command="{Binding Data.CloseDocumentCommand, Source={StaticResource DockControl}}"
                                        CommandParameter="{Binding}"
                                        Icon="{Markup:InternalImage Close.png}"/>
                                    <MenuItem Header="{l:Loc CloseAll}"
                                        Command="{Binding Data.CloseAllDocumentsCommand, Source={StaticResource DockControl}}"
                                        Icon="{Markup:InternalImage CloseAll.png}"/>
                                    <MenuItem Header="{l:Loc CloseAllButThis}"
                                        Command="{Binding Data.CloseAllDocumentsButThisCommand, Source={StaticResource DockControl}}"
                                        CommandParameter="{Binding}"
                                        Icon="{Markup:InternalImage CloseAllButThis.png}"/>
                                </ContextMenu>
                            </Grid.ContextMenu>
                            <ContentPresenter Grid.Column="0"
                                Content="{Binding}"
                                ContentTemplate="{Data:Ancestor DockControl.DocumentIconTemplate, local:DockRootControl}"
                                ContentTemplateSelector="{Data:Ancestor DockControl.DocumentIconTemplateSelector, local:DockRootControl}"/>
                            <ContentPresenter Grid.Column="1"
                                Content="{Binding}"
                                ContentTemplate="{Data:Ancestor DockControl.DocumentTitleTemplate, local:DockRootControl}"
                                ContentTemplateSelector="{Data:Ancestor DockControl.DocumentTitleTemplateSelector, local:DockRootControl}"/>
                            <local:ProgressCircle Grid.Column="2"
                                Height="16" Width="16"
                                Margin="5,0,0,0"
                                Visibility="{Data:VisibilityBinding IsBusy}"/>
                            <Grid Grid.Column="3"
                                Margin="5,0,0,0"
                                Visibility="{Binding CanMinimize, Converter={x:Static Converters:BooleanToVisibilityConverter.Default}}">
                                <local:ImageButton x:Name="MinimizeButton"
                                    Command="{Data:Ancestor DockControl.MinimizeCommand, {x:Type local:DockRootControl}}"
                                    CommandParameter="{Binding}"
                                    Source="{Markup:InternalImage Minus.png}"
                                    SourceSize="12,12"
                                    ToolTip="{l:Loc Minimize}"
                                    Visibility="{Data:Self IsEnabled, Converter={x:Static Converters:BooleanToVisibilityConverter.Default}}"/>
                                <local:ImageButton x:Name="RestoreButton"
                                    Command="{Data:Ancestor DockControl.RestoreCommand, {x:Type local:DockRootControl}}"
                                    CommandParameter="{Binding}"
                                    Source="{Markup:InternalImage Restore.png}"
                                    SourceSize="12,12"
                                    ToolTip="{l:Loc Restore}"
                                    Visibility="{Data:Self IsEnabled, Converter={x:Static Converters:BooleanToVisibilityConverter.Default}}"/>
                            </Grid>
                            <local:ImageButton Grid.Column="4" x:Name="CloseButton"
                                Command="{Data:Ancestor DockControl.CloseDocumentCommand, {x:Type local:DockRootControl}}"
                                CommandParameter="{Binding}"
                                Margin="5,0,0,0"
                                Source="{Markup:InternalImage XRound.png}"
                                SourceSize="12,12"
                                ToolTip="{l:Loc Close}"
                                Visibility="{Binding CanClose, Converter={x:Static Converters:BooleanToVisibilityConverter.Default}}"/>
                        </Grid>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="DocumentIconTemplate">
            <Setter.Value>
                <DataTemplate DataType="Models:Document">
                    <local:ImageElement
                        HorizontalAlignment="Center"
                        Source="{Binding Icon}"
                        VerticalAlignment="Center"
                        Visibility="{Data:VisibilityBinding Icon}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="DocumentToolTipTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding}" TextWrapping="Wrap"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="DocumentTitleTemplate">
            <Setter.Value>
                <DataTemplate DataType="Models:Document">
                    <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FocusManager.IsFocusScope" Value="True"/>
        <Setter Property="MinimizedDocumentPlacement" Value="Bottom"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="PanelHeaderPlacement" Value="Top"/>
        <Setter Property="PanelIconTemplate">
            <Setter.Value>
                <DataTemplate DataType="Models:Panel">
                    <local:ImageElement
                        HorizontalAlignment="Center"  
                        Source="{Binding Icon}"
                        VerticalAlignment="Center"
                        Visibility="{Data:VisibilityBinding Icon}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="PanelTitleTemplate">
            <Setter.Value>
                <DataTemplate DataType="Models:Panel">
                    <TextBlock TextTrimming="CharacterEllipsis">
                        <TextBlock.Style>
                            <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding TitleLocalized}" Value="True">
                                        <Setter Property="Text" Value="{Data:TranslateBinding Title}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding TitleLocalized}" Value="False">
                                        <Setter Property="Text" Value="{Binding Title}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="PanelTitleHeaderTemplate">
            <Setter.Value>
                <DataTemplate DataType="Models:Panel">
                    <Grid>
                        <Grid Linq:XGrid.Columns="Auto,Auto,*,Auto"
                            Background="Transparent"
                            ContextMenu="{StaticResource {x:Static local:DockControl.PanelMenuKey}}">
                            <local:ImageElement x:Name="Icon"
                                Margin="0,0,5,0"
                                Source="{Binding Icon, Converter={x:Static Converters:NullConverter.Default}}"
                                VerticalAlignment="Center"
                                Visibility="{Binding Icon, Converter={x:Static Converters:ObjectToVisibilityConverter.Default}}"/>
                            <ContentPresenter Grid.Column="1"
                                Content="{Binding}"
                                ContentTemplate="{Data:Ancestor DockControl.PanelTitleTemplate, local:DockRootControl}"
                                ContentTemplateSelector="{Data:Ancestor DockControl.PanelTitleTemplateSelector, local:DockRootControl}"
                                VerticalAlignment="Center"/>
                            <local:ImageButton Grid.Column="3" x:Name="HideButton"
                                Command="{Data:Ancestor DockControl.HideCommand, local:DockRootControl}"
                                CommandParameter="{Binding}"
                                Margin="5,0,0,0"
                                Source="{Markup:InternalImage X.png}"
                                SourceSize="12,12"
                                ToolTip="{l:Loc Hide}"
                                VerticalAlignment="Center"
                                Visibility="{Binding CanHide, Converter={x:Static Converters:BooleanToVisibilityConverter.Default}}"/>
                        </Grid>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="PanelToolTipTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding}" TextWrapping="Wrap"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ProgressTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:ProgressCircle
                        Height="64"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Width="64"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:DockControl}">
                    <Grid>
                        <Border Linq:XElement.Name="{x:Static local:DockControl.BorderKey}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Linq:XElement.FadeTrigger="True"
                            Linq:XElement.FadeTriggerSource="{TemplateBinding Refreshing, Converter={x:Static Converters:InverseBooleanConverter.Default}}"
                            Padding="{TemplateBinding Padding}"/>
                        <ContentPresenter
                            ContentTemplate="{TemplateBinding ProgressTemplate}"
                            Linq:XElement.FadeTrigger="True"
                            Linq:XElement.FadeTriggerSource="{TemplateBinding Refreshing}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ... DockContentControl -->

    <Style x:Key="{x:Type local:DockContentControl}" TargetType="{x:Type local:DockContentControl}" BasedOn="{StaticResource {x:Type local:CacheTabControl}}">
        <Style.Triggers>
            <Trigger Property="Active" Value="True">
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=TabControlBorderActive}"/>
            </Trigger>
            <Trigger Property="Active" Value="False">
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=TabControlBorder}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ... DockDocumentControl -->

    <Style x:Key="{x:Type local:DockDocumentControl}" TargetType="{x:Type local:DockDocumentControl}" BasedOn="{StaticResource {x:Type local:DockContentControl}}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource {x:Static local:DockControl.DocumentStyle}}"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentPresenter x:Name="ContentPresenter" Content="{Binding}"/>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Data:IsBinding Models:Document}" Value="True">
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{Data:Ancestor DockControl.DocumentHeaderTemplate, local:DockRootControl}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Data:IsBinding Models:Panel}" Value="True">
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{StaticResource {x:Static local:DockControl.PanelTitleHeaderTemplateKey}}"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XTabControl.OverflowIconTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentPresenter x:Name="ContentPresenter" Content="{Binding}"/>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Data:IsBinding Models:Document}" Value="True">
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{Data:Ancestor DockControl.DocumentIconTemplate, local:DockRootControl}"/>
                            <Setter TargetName="ContentPresenter" Property="ContentTemplateSelector" Value="{Data:Ancestor DockControl.DocumentIconTemplateSelector, local:DockRootControl}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Data:IsBinding Models:Panel}" Value="True">
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{Data:Ancestor DockControl.PanelIconTemplate, local:DockRootControl}"/>
                            <Setter TargetName="ContentPresenter" Property="ContentTemplateSelector" Value="{Data:Ancestor DockControl.PanelIconTemplateSelector, local:DockRootControl}"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XTabControl.OverflowItemCommand" Value="{Data:Ancestor DockControl.SelectCommand, local:DockRootControl}"/>
        <Setter Property="Linq:XTabControl.OverflowItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentPresenter x:Name="ContentPresenter" Content="{Binding}"/>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Data:IsBinding Models:Document}" Value="True">
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{Data:Ancestor DockControl.DocumentTitleTemplate, local:DockRootControl}"/>
                            <Setter TargetName="ContentPresenter" Property="ContentTemplateSelector" Value="{Data:Ancestor DockControl.DocumentTitleTemplateSelector, local:DockRootControl}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Data:IsBinding Models:Panel}" Value="True">
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{Data:Ancestor DockControl.PanelTitleTemplate, local:DockRootControl}"/>
                            <Setter TargetName="ContentPresenter" Property="ContentTemplateSelector" Value="{Data:Ancestor DockControl.PanelTitleTemplateSelector, local:DockRootControl}"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Ancestor DockControl.EmptyDocumentGroupVisibility, local:DockRootControl}" Value="Collapsed"/>
                    <Condition Binding="{Data:Self Source.Count}" Value="0"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <!-- ... DockPanelControl -->

    <Style x:Key="{x:Type local:DockPanelControl}" TargetType="{x:Type local:DockPanelControl}" BasedOn="{StaticResource {x:Type local:DockContentControl}}">
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Ancestor Orientation, local:DockGroupControl}" Value="Horizontal"/>
                    <Condition Binding="{Data:Self Collapse}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <WrapPanel Orientation="Vertical"/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Ancestor Orientation, local:DockGroupControl}" Value="Vertical"/>
                    <Condition Binding="{Data:Self Collapse}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <WrapPanel Orientation="Horizontal"/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Ancestor DockControl.EmptyPanelGroupVisibility, local:DockRootControl}" Value="Collapsed"/>
                    <Condition Binding="{Data:Self Source.Count}" Value="1"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Linq:XTabControl.HeaderVisibility" Value="Collapsed"/>
            </MultiDataTrigger>
            <Trigger Property="Collapse" Value="True">
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=PopupBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=TabControlBorder}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="ItemContainerStyle">
                    <Setter.Value>
                        <Style TargetType="TabItem" BasedOn="{StaticResource {x:Type TabItem}}">
                            <Setter Property="Content" Value="{Binding}"/>
                            <Setter Property="ContentTemplate" Value="{StaticResource {x:Static local:DockControl.PanelTemplateKey}}"/>
                            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                            <Setter Property="Linq:XElement.PreviewMouseLeftButtonUpCommand" Value="{Data:Ancestor DockControl.DockTabCommand, local:DockRootControl}"/>
                            <Setter Property="Linq:XElement.PreviewMouseLeftButtonUpCommandParameter" Value="{Data:Self}"/>
                            <Setter Property="Linq:XElement.ToolTipTemplate" Value="{Data:Ancestor DockControl.PanelToolTipTemplate, local:DockRootControl}"/>
                            <Setter Property="Linq:XElement.ToolTipTemplateSelector" Value="{Data:Ancestor DockControl.PanelToolTipTemplateSelector, local:DockRootControl}"/>
                            <Setter Property="Padding" Value="0"/>
                            <Setter Property="ToolTip" Value="{Binding ToolTip}"/>
                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Data:Self IsSelected}" Value="True"/>
                                        <Condition Binding="{Data:Ancestor Active, {x:Type local:DockPanelControl}}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" Value="{local:ThemeKey ActualKey=TabControlBorderActive}"/>
                                    <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=TabControlBorderActive}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Data:Self IsSelected}" Value="True"/>
                                        <Condition Binding="{Data:Ancestor Active, {x:Type local:DockPanelControl}}" Value="False"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" Value="{local:ThemeKey ActualKey=TabControlBorder}"/>
                                    <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=TabControlBorder}"/>
                                    <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=TabItemForeground}"/>
                                    <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=TabItemForeground}"/>
                                </MultiDataTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="False"/>
                                        <Condition Property="IsMouseOver" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" Value="{local:ThemeKey ActualKey=TabItemMouseOverBackground}" />
                                    <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=TabItemMouseOverBorder}" />
                                    <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=TabItemMouseOverForeground}" />
                                    <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=TabItemMouseOverForeground}" />
                                </MultiTrigger>
                            </Style.Triggers>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="ItemTemplate" Value="{StaticResource {x:Static local:DockControl.CollapsedPanelTitleHeaderTemplateKey}}"/>
                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Setter Property="Padding" Value="0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="local:DockPanelControl">
                            <Grid ClipToBounds="True"
                                KeyboardNavigation.TabNavigation="Local"
                                SnapsToDevicePixels="True">
                                <Grid.Resources>
                                    <Data:Reference x:Key="DockPanelControl" Data="{Data:TemplatedParent}"/>
                                </Grid.Resources>
                                <Border x:Name="Border"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}">
                                    <Grid Linq:XGrid.AutoRows="True" Linq:XGrid.Rows="Auto,*">
                                        <!-- ... Header -->
                                        <local:DockPanelHeaderControl
                                            ContextMenu="{StaticResource {x:Static local:DockControl.PanelMenuKey}}"
                                            local:XDockControl.Drag="True"
                                            local:XDockControl.DragTarget="{x:Null}"
                                            Padding="7.5">
                                            <ContentPresenter Content="{Binding}"
                                                HorizontalAlignment="Center"
                                                VerticalAlignment="Center"
                                                ContentTemplate="{DynamicResource {x:Static local:DockControl.PanelHeaderPatternKey}}"/>
                                        </local:DockPanelHeaderControl>
                                        <!-- ... Content -->
                                        <ItemsPresenter/>
                                    </Grid>
                                </Border>
                                <!--
                                Linq:XElement.CanResize="True"
                                Linq:XElement.ResizeCoerceAxis="X"
                                Linq:XElement.ResizeCoerceDirection="W"
                                Linq:XElement.ResizeSnap="1"
                                <Linq:XElement.ResizeThumbStyle>
                                    <Style TargetType="{x:Type Thumb}">
                                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type Thumb}">
                                                    <Rectangle Cursor="SizeWE" Fill="Transparent" Height="16" Width="16"/>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Linq:XElement.ResizeThumbStyle>
                                -->
                                <Popup x:Name="Popup"
                                    IsOpen="{TemplateBinding IsMenuVisible}"
                                    PopupAnimation="Slide"
                                    PlacementTarget="{Binding ElementName=Border}">
                                    <local:PopupBorder x:Name="PopupBorder">
                                        <Grid x:Name="Grid0" Linq:XElement.Name="{x:Static local:CacheTabControl.ContentKey}"
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            KeyboardNavigation.DirectionalNavigation="Contained"
                                            KeyboardNavigation.TabIndex="2"
                                            KeyboardNavigation.TabNavigation="Local"
                                            Margin="{TemplateBinding Padding}"
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    </local:PopupBorder>
                                </Popup>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Data:Ancestor Orientation, local:DockGroupControl}" Value="Horizontal">
                                    <Setter TargetName="Popup" Property="Placement" Value="Left"/>
                                    <Setter TargetName="PopupBorder" Property="Height" Value="{Binding ActualHeight, ElementName=Border}"/>
                                    <Setter TargetName="PopupBorder" Property="MaxWidth" Value="720"/>
                                    <Setter TargetName="PopupBorder" Property="MinWidth" Value="128"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Data:Ancestor Orientation, local:DockGroupControl}" Value="Vertical">
                                    <Setter TargetName="Popup" Property="Placement" Value="Bottom"/>
                                    <Setter TargetName="PopupBorder" Property="MaxHeight" Value="720"/>
                                    <Setter TargetName="PopupBorder" Property="MinHeight" Value="128"/>
                                    <Setter TargetName="PopupBorder" Property="Width" Value="{Binding ActualWidth, ElementName=Border}"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            </Trigger>
            <Trigger Property="Collapse" Value="False">
                <Setter Property="ItemContainerStyle" Value="{StaticResource {x:Static local:DockControl.PanelStyle}}"/>
                <Setter Property="ItemTemplate" Value="{StaticResource {x:Static local:DockControl.PanelTitleHeaderTemplateKey}}"/>
                <Setter Property="Linq:XTabControl.OverflowIconTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <ContentControl
                                Content="{Binding}"
                                ContentTemplate="{Data:Self Tag.DockControl.PanelIconTemplate}"
                                ContentTemplateSelector="{Data:Self Tag.DockControl.PanelIconTemplateSelector}"
                                Linq:XElement.RelativeTag="{x:Type local:DockRootControl}"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Linq:XTabControl.OverflowItemCommand" Value="{Data:Ancestor DockControl.SelectCommand, local:DockRootControl}"/>
                <Setter Property="Linq:XTabControl.OverflowItemTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <ContentControl
                                Content="{Binding}"
                                ContentTemplate="{Data:Self Tag.DockControl.PanelTitleTemplate}"
                                ContentTemplateSelector="{Data:Self Tag.DockControl.PanelTitleTemplateSelector}"
                                Linq:XElement.RelativeTag="{x:Type local:DockRootControl}"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="TabStripPlacement" Value="Bottom"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ... DockRootControl -->

    <Style x:Key="{x:Static local:DockRootControl.GridSplitterStyleKey}" TargetType="GridSplitter" BasedOn="{StaticResource {x:Type GridSplitter}}">
        <Setter Property="Background" Value="#11000000"/>
        <Setter Property="ResizeBehavior" Value="PreviousAndNext"/>
        <Setter Property="ShowsPreview" Value="True"/>
        <Style.Triggers>
            <Trigger Property="ResizeDirection" Value="Columns">
                <Setter Property="Height" Value="Auto"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="VerticalAlignment" Value="Stretch"/>
                <Setter Property="Width" Value="4"/>
            </Trigger>
            <Trigger Property="ResizeDirection" Value="Rows">
                <Setter Property="Height" Value="4"/>
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="Width" Value="Auto"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type local:DockRootControl}" TargetType="{x:Type local:DockRootControl}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="PopupTransition" Value="Left"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:DockRootControl">
                    <Grid Linq:XGrid.Columns="Auto,*,Auto" Linq:XGrid.Rows="Auto,*,Auto">
                        <Grid.Resources>
                            <DataTemplate x:Key="DockPanelBar.ItemTemplate" x:Shared="False" DataType="{x:Type Models:Panel}">
                                <local:DockPanelButton
                                    ClickMode="Release"
                                    Command="{Data:Ancestor PreviewCommand, local:DockRootControl}"
                                    CommandParameter="{Data:Self}"
                                    Content="{Binding}"
                                    ContentTemplate="{Data:Ancestor DockControl.PanelTitleHeaderTemplate, local:DockRootControl}"
                                    Linq:XElement.MouseEnterCommand="{Data:Ancestor SelectCommand, local:DockRootControl}"
                                    Linq:XElement.MouseEnterCommandParameter="{Data:Self}"
                                    Linq:XElement.MouseLeaveCommand="{Data:Ancestor UnselectCommand, local:DockRootControl}"
                                    Linq:XElement.PreviewMouseLeftButtonUpCommand="{Data:Ancestor DockControl.DockPinCommand, local:DockRootControl}"
                                    Linq:XElement.PreviewMouseLeftButtonUpCommandParameter="{Data:Self}"
                                    local:XDockControl.PreviewDrag="True"
                                    local:XDockControl.DragTarget="{Binding}"
                                    Margin="0,0,5,0"/>
                            </DataTemplate>
                        </Grid.Resources>
                        <!-- ... Pin (Top) -->
                        <local:DockPanelBar Grid.Column="1" Grid.ColumnSpan="1" Grid.Row="0" Grid.RowSpan="1"
                            ItemsSource="{TemplateBinding TopPanels}"
                            ItemTemplate="{StaticResource DockPanelBar.ItemTemplate}"
                            Margin="0,0,0,5"
                            Visibility="{Data:VisibilityBinding TopPanels.IsEmpty, Invert=True, Relative=TemplatedParent}">
                            <local:DockPanelBar.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </local:DockPanelBar.ItemsPanel>
                        </local:DockPanelBar>

                        <!-- ... Pin (Left) -->
                        <local:DockPanelBar Grid.Column="0" Grid.ColumnSpan="1" Grid.Row="0" Grid.RowSpan="3"
                            ItemsSource="{TemplateBinding LeftPanels}"
                            ItemTemplate="{StaticResource DockPanelBar.ItemTemplate}"
                            Margin="0,0,5,0"
                            RenderTransformOrigin="0.5,0.5"
                            Visibility="{Data:VisibilityBinding LeftPanels.IsEmpty, Invert=True, Relative=TemplatedParent}">
                            <local:DockPanelBar.LayoutTransform>
                                <RotateTransform Angle="-90"/>
                            </local:DockPanelBar.LayoutTransform>
                            <local:DockPanelBar.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </local:DockPanelBar.ItemsPanel>
                        </local:DockPanelBar>

                        <!-- ... -->
                        <Grid Grid.Column="1" Grid.ColumnSpan="1" Grid.Row="1" Grid.RowSpan="1">
                            <HeaderedContentControl Linq:XHeaderedContentControl.HeaderPlacement="{Data:TemplatedParent DockControl.MinimizedDocumentPlacement}">
                                <HeaderedContentControl.Header>
                                    <ToolBar
                                        ItemsSource="{Data:TemplatedParent Minimized}"
                                        Margin="0,5,0,0"
                                        Visibility="{Data:VisibilityBinding Minimized.IsEmpty, Invert=True, Relative=TemplatedParent}">
                                        <ToolBar.ItemTemplate>
                                            <DataTemplate>
                                                <local:DockDocumentButton
                                                    Content="{Binding}"
                                                    ContentTemplate="{Data:Ancestor DockControl.DocumentHeaderTemplate, local:DockRootControl}"
                                                    local:XDockControl.Drag="True"
                                                    local:XDockControl.DragTarget="{Binding}"
                                                    Margin="0,0,5,0"/>
                                            </DataTemplate>
                                        </ToolBar.ItemTemplate>
                                    </ToolBar>
                                </HeaderedContentControl.Header>
                                <ContentPresenter ContentSource="Content"/>
                            </HeaderedContentControl>
                            <!-- ... Markers -->
                            <Grid>
                                <Grid.Visibility>
                                    <MultiBinding Converter="{x:Static local:DockRootControl.MarkerVisibilityConverter}">
                                        <Data:TemplatedParent Path="DockControl.Drag.MouseOver"/>
                                        <Data:TemplatedParent Path="."/>
                                    </MultiBinding>
                                </Grid.Visibility>
                                <!-- ... Secondary/Tertiary -->
                                <Canvas>
                                    <Polygon IsHitTestVisible="False"
                                        Points="{TemplateBinding SelectionPoints}"
                                        Style="{StaticResource {x:Static local:DockControl.SelectionStyleKey}}"/>
                                    <Grid Canvas.Left="{Data:TemplatedParent SecondaryMarkerPosition.X}" Canvas.Top="{Data:TemplatedParent SecondaryMarkerPosition.Y}"
                                        Visibility="{Data:TemplatedParent DockControl.Drag.MouseOver, Converter={x:Static local:DockRootControl.SecondaryMarkerVisibilityConverter}}">
                                        <local:ImageElement x:Name="EmptyMarker"
                                            Style="{StaticResource {x:Static local:DockControl.EmptyMarkerStyleKey}}"/>
                                        <Grid Linq:XGrid.Columns="Auto,Auto,Auto,Auto,Auto" Linq:XGrid.Rows="Auto,Auto,Auto,Auto,Auto"
                                            HorizontalAlignment="Center" VerticalAlignment="Center"
                                            MinHeight="100" MinWidth="100"
                                            Margin="3">
                                            <!-- ... Secondary -->
                                            <local:ImageElement Grid.Column="0" Grid.Row="2" Linq:XElement.Name="{x:Static local:DockRootControl.SecondaryMarkerKey}"
                                                Source="{Markup:InternalImage DockLeft.png}"
                                                Style="{StaticResource {x:Static local:DockControl.SecondaryMarkerStyleKey}}"
                                                Tag="{x:Static local:SecondaryDocks.Left}"/>
                                            <local:ImageElement Grid.Column="2" Grid.Row="0" Linq:XElement.Name="{x:Static local:DockRootControl.SecondaryMarkerKey}"
                                                Source="{Markup:InternalImage DockTop.png}"
                                                Style="{StaticResource {x:Static local:DockControl.SecondaryMarkerStyleKey}}"
                                                Tag="{x:Static local:SecondaryDocks.Top}"/>
                                            <local:ImageElement Grid.Column="4" Grid.Row="2" Linq:XElement.Name="{x:Static local:DockRootControl.SecondaryMarkerKey}"
                                                Source="{Markup:InternalImage DockRight.png}"
                                                Style="{StaticResource {x:Static local:DockControl.SecondaryMarkerStyleKey}}"
                                                Tag="{x:Static local:SecondaryDocks.Right}"/>
                                            <local:ImageElement Grid.Column="2" Grid.Row="4" Linq:XElement.Name="{x:Static local:DockRootControl.SecondaryMarkerKey}"
                                                Source="{Markup:InternalImage DockBottom.png}"
                                                Style="{StaticResource {x:Static local:DockControl.SecondaryMarkerStyleKey}}"
                                                Tag="{x:Static local:SecondaryDocks.Bottom}"/>
                                            <local:ImageElement Grid.Column="2" Grid.Row="2" Linq:XElement.Name="{x:Static local:DockRootControl.SecondaryMarkerKey}"
                                                Source="{Markup:InternalImage DockCenter.png}"
                                                Style="{StaticResource {x:Static local:DockControl.SecondaryMarkerStyleKey}}"
                                                Tag="{x:Static local:SecondaryDocks.Center}"
                                                Visibility="{Data:TemplatedParent DockControl.Drag.MouseOver, Converter={x:Static local:DockRootControl.CenterMarkerVisibilityConverter}}"/>
                                            <!-- ... Tertiary -->
                                            <local:ImageElement Grid.Column="1" Grid.Row="2" Linq:XElement.Name="{x:Static local:DockRootControl.SecondaryMarkerKey}"
                                                Source="{Markup:InternalImage Image=DockHorizontal}"
                                                Style="{StaticResource {x:Static local:DockControl.SecondaryMarkerStyleKey}}"
                                                Tag="{x:Static local:TertiaryDocks.Left}"
                                                Visibility="{Data:TemplatedParent DockControl.Drag.MouseOver, Converter={x:Static local:DockRootControl.TertiaryMarkerVisibilityConverter}}"/>
                                            <local:ImageElement Grid.Column="3" Grid.Row="2" Linq:XElement.Name="{x:Static local:DockRootControl.SecondaryMarkerKey}"
                                                Source="{Markup:InternalImage Image=DockHorizontal}"
                                                Style="{StaticResource {x:Static local:DockControl.SecondaryMarkerStyleKey}}"
                                                Tag="{x:Static local:TertiaryDocks.Right}"
                                                Visibility="{Data:TemplatedParent DockControl.Drag.MouseOver, Converter={x:Static local:DockRootControl.TertiaryMarkerVisibilityConverter}}"/>
                                            <local:ImageElement Grid.Column="2" Grid.Row="1" Linq:XElement.Name="{x:Static local:DockRootControl.SecondaryMarkerKey}"
                                                Source="{Markup:InternalImage Image=DockVertical}"
                                                Style="{StaticResource {x:Static local:DockControl.SecondaryMarkerStyleKey}}"
                                                Tag="{x:Static local:TertiaryDocks.Top}"
                                                Visibility="{Data:TemplatedParent DockControl.Drag.MouseOver, Converter={x:Static local:DockRootControl.TertiaryMarkerVisibilityConverter}}"/>
                                            <local:ImageElement Grid.Column="2" Grid.Row="3" Linq:XElement.Name="{x:Static local:DockRootControl.SecondaryMarkerKey}"
                                                Source="{Markup:InternalImage Image=DockVertical}"
                                                Style="{StaticResource {x:Static local:DockControl.SecondaryMarkerStyleKey}}"
                                                Tag="{x:Static local:TertiaryDocks.Bottom}"
                                                Visibility="{Data:TemplatedParent DockControl.Drag.MouseOver, Converter={x:Static local:DockRootControl.TertiaryMarkerVisibilityConverter}}"/>
                                        </Grid>
                                    </Grid>
                                </Canvas>
                                <!-- ... Primary -->
                                <Border Background="{local:ThemeKey Key=DockControlPrimaryMarkerBackground}"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center">
                                    <local:ImageElement Linq:XElement.Name="{x:Static local:DockRootControl.PrimaryMarkerKey}"
                                        Source="{Markup:InternalImage DockLeft.png}"
                                        Style="{StaticResource {x:Static local:DockControl.PrimaryMarkerStyleKey}}"
                                        Tag="{x:Static local:SecondaryDocks.Left}"
                                        ToolTip="{l:Loc Left}"/>
                                </Border>
                                <Border Background="{local:ThemeKey Key=DockControlPrimaryMarkerBackground}"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Top">
                                    <local:ImageElement Linq:XElement.Name="{x:Static local:DockRootControl.PrimaryMarkerKey}"
                                        Source="{Markup:InternalImage DockTop.png}"
                                        Style="{StaticResource {x:Static local:DockControl.PrimaryMarkerStyleKey}}"
                                        Tag="{x:Static local:SecondaryDocks.Top}"
                                        ToolTip="{l:Loc Top}"/>
                                </Border>
                                <Border Background="{local:ThemeKey Key=DockControlPrimaryMarkerBackground}"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Center">
                                    <local:ImageElement Linq:XElement.Name="{x:Static local:DockRootControl.PrimaryMarkerKey}"
                                        Source="{Markup:InternalImage DockRight.png}"
                                        Style="{StaticResource {x:Static local:DockControl.PrimaryMarkerStyleKey}}"
                                        Tag="{x:Static local:SecondaryDocks.Right}"
                                        ToolTip="{l:Loc Right}"/>
                                </Border>
                                <Border Background="{local:ThemeKey Key=DockControlPrimaryMarkerBackground}"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Bottom">
                                    <local:ImageElement Linq:XElement.Name="{x:Static local:DockRootControl.PrimaryMarkerKey}"
                                        Source="{Markup:InternalImage DockBottom.png}"
                                        Style="{StaticResource {x:Static local:DockControl.PrimaryMarkerStyleKey}}"
                                        Tag="{x:Static local:SecondaryDocks.Bottom}"
                                        ToolTip="{l:Loc Bottom}"/>
                                </Border>
                            </Grid>
                        </Grid>

                        <!-- ... Pin (Right) -->
                        <local:DockPanelBar Grid.Column="2" Grid.ColumnSpan="1" Grid.Row="0" Grid.RowSpan="3"
                            ItemsSource="{TemplateBinding RightPanels}"
                            ItemTemplate="{StaticResource DockPanelBar.ItemTemplate}"
                            Margin="5,0,0,0"
                            RenderTransformOrigin="0.5,0.5"
                            Visibility="{Data:VisibilityBinding RightPanels.IsEmpty, Invert=True, Relative=TemplatedParent}">
                            <local:DockPanelBar.LayoutTransform>
                                <RotateTransform Angle="90"/>
                            </local:DockPanelBar.LayoutTransform>
                            <local:DockPanelBar.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </local:DockPanelBar.ItemsPanel>
                        </local:DockPanelBar>

                        <!-- ... Pin (Bottom) -->
                        <local:DockPanelBar Grid.Column="1" Grid.ColumnSpan="1" Grid.Row="2" Grid.RowSpan="1"
                            ItemsSource="{TemplateBinding BottomPanels}"
                            ItemTemplate="{StaticResource DockPanelBar.ItemTemplate}"
                            Margin="0,5,0,0"
                            Visibility="{Data:VisibilityBinding BottomPanels.IsEmpty, Invert=True, Relative=TemplatedParent}">
                            <local:DockPanelBar.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </local:DockPanelBar.ItemsPanel>
                        </local:DockPanelBar>

                        <!-- ... Popup (Top) -->
                        <Grid Grid.Column="1" Grid.Row="1"
                            Visibility="{Data:VisibilityBinding IsTopOpen, Relative=TemplatedParent}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="{Data:TemplatedParent TopPanel.PinHeight, Converter={x:Static Converters:GridLengthConverter.Default}, Mode=TwoWay}"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <local:DockPopup Grid.Row="0">
                                <local:TransitionControl
                                    Content="{TemplateBinding TopPanel}"
                                    ContentTemplate="{StaticResource {x:Static local:DockControl.PanelTemplateKey}}"
                                    Transition="{TemplateBinding PopupTransition}"/>
                            </local:DockPopup>
                            <GridSplitter Grid.Row="1"
                                ResizeDirection="Rows"
                                Style="{StaticResource {x:Static local:DockRootControl.GridSplitterStyleKey}}"/>
                            <Grid Grid.Row="2"/>
                        </Grid>

                        <!-- ... Popup (Left) -->
                        <Grid Grid.Column="1" Grid.Row="1"
                            Visibility="{Data:VisibilityBinding IsLeftOpen, Relative=TemplatedParent}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{Data:TemplatedParent LeftPanel.PinWidth, Converter={x:Static Converters:GridLengthConverter.Default}, Mode=TwoWay}"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <local:DockPopup Grid.Column="0">
                                <local:TransitionControl
                                    Content="{TemplateBinding LeftPanel}"
                                    ContentTemplate="{StaticResource {x:Static local:DockControl.PanelTemplateKey}}"
                                    Transition="{TemplateBinding PopupTransition}"/>
                            </local:DockPopup>
                            <GridSplitter Grid.Column="1"
                                ResizeDirection="Columns"
                                Style="{StaticResource {x:Static local:DockRootControl.GridSplitterStyleKey}}"/>
                            <Grid Grid.Column="2"/>
                        </Grid>

                        <!-- ... Popup (Right) -->
                        <Grid Grid.Column="1" Grid.Row="1"
                            Visibility="{Data:VisibilityBinding IsRightOpen, Relative=TemplatedParent}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="{Data:TemplatedParent RightPanel.PinWidth, Converter={x:Static Converters:GridLengthConverter.Default}, Mode=TwoWay}"/>
                            </Grid.ColumnDefinitions>
                            <Grid Grid.Column="0"/>
                            <GridSplitter Grid.Column="1"
                                ResizeDirection="Columns"
                                Style="{StaticResource {x:Static local:DockRootControl.GridSplitterStyleKey}}"/>
                            <local:DockPopup Grid.Column="2">
                                <local:TransitionControl
                                    Content="{TemplateBinding RightPanel}"
                                    ContentTemplate="{StaticResource {x:Static local:DockControl.PanelTemplateKey}}"
                                    Transition="{TemplateBinding PopupTransition}"/>
                            </local:DockPopup>
                        </Grid>

                        <!-- ... Popup (Bottom) -->
                        <Grid Grid.Column="1" Grid.Row="1"
                            Visibility="{Data:VisibilityBinding IsBottomOpen, Relative=TemplatedParent}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="{Data:TemplatedParent BottomPanel.PinHeight, Converter={x:Static Converters:GridLengthConverter.Default}, Mode=TwoWay}"/>
                            </Grid.RowDefinitions>
                            <Grid Grid.Row="0"/>
                            <GridSplitter Grid.Row="1"
                                ResizeDirection="Rows"
                                Style="{StaticResource {x:Static local:DockRootControl.GridSplitterStyleKey}}"/>
                            <local:DockPopup Grid.Row="2">
                                <local:TransitionControl
                                    Content="{TemplateBinding BottomPanel}"
                                    ContentTemplate="{StaticResource {x:Static local:DockControl.PanelTemplateKey}}"
                                    Transition="{TemplateBinding PopupTransition}"/>
                            </local:DockPopup>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Data:Self DockControl.Drag.MouseOver, Converter={x:Static local:DockRootControl.TertiaryMarkerVisibilityConverter}}" Value="Visible">
                            <Setter TargetName="EmptyMarker" Property="Source" Value="{Markup:InternalImage Image=DockEmptyLarge}"/>
                            <Setter TargetName="EmptyMarker" Property="SourceSize" Value="160,160"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Data:Self DockControl.Drag.MouseOver, Converter={x:Static local:DockRootControl.TertiaryMarkerVisibilityConverter}}" Value="Collapsed">
                            <Setter TargetName="EmptyMarker" Property="Source" Value="{Markup:InternalImage Image=DockEmpty}"/>
                            <Setter TargetName="EmptyMarker" Property="SourceSize" Value="100,100"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ... Other -->

    <Style x:Key="{x:Type local:DockDocumentButton}" TargetType="{x:Type local:DockDocumentButton}">
        <Setter Property="Background" Value="{local:ThemeKey ActualKey=DockDocumentButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=DockDocumentButtonBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=DockDocumentButtonForeground}"/>
        <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=DockDocumentButtonForeground}"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Padding" Value="16,5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:DockDocumentButton}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}">
                        <ContentPresenter
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type local:DockPanelBar}" TargetType="{x:Type local:DockPanelBar}" BasedOn="{StaticResource {x:Type ToolBar}}">
        <Setter Property="BorderThickness" Value="0"/>
    </Style>

    <Style x:Key="{x:Type local:DockPanelButton}" TargetType="{x:Type local:DockPanelButton}">
        <Setter Property="Background" Value="{local:ThemeKey ActualKey=DockPanelButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=DockPanelButtonBorder}"/>
        <Setter Property="BorderThickness" Value="0,0,0,4"/>
        <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=DockPanelButtonForeground}"/>
        <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=DockPanelButtonForeground}"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Padding" Value="16,5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:DockPanelButton}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}">
                        <ContentPresenter
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=DockPanelButtonMouseOverBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=DockPanelButtonMouseOverBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=DockPanelButtonMouseOverForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=DockPanelButtonMouseOverForeground}"/>
            </MultiTrigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=DockPanelButtonCheckedBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=DockPanelButtonCheckedBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=DockPanelButtonCheckedForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=DockPanelButtonCheckedForeground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type local:DockPanelHeaderControl}" TargetType="{x:Type local:DockPanelHeaderControl}" BasedOn="{StaticResource {x:Type ContentControl}}">
        <Setter Property="Background" Value="{local:ThemeKey ActualKey=DockPanelHeaderBackground}"/>
        <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=DockPanelHeaderBorder}"/>
        <Setter Property="BorderThickness" Value="0,0,0,1"/>
        <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=DockPanelHeaderForeground}"/>
        <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=DockPanelHeaderForeground}"/>
        <Setter Property="Padding" Value="4,1"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=DockPanelHeaderMouseOverBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=DockPanelHeaderMouseOverBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=DockPanelHeaderMouseOverForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=DockPanelHeaderMouseOverForeground}"/>
            </Trigger>
            <DataTrigger Binding="{Data:Ancestor Active, local:DockPanelControl}" Value="True">
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=DockPanelHeaderMouseDownBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=DockPanelHeaderMouseDownBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=DockPanelHeaderMouseDownForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=DockPanelHeaderMouseDownForeground}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type local:DockPopup}" TargetType="{x:Type local:DockPopup}">
        <Setter Property="Background" Value="{local:ThemeKey ActualKey=PopupBackground}"/>
        <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=PopupBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>

    <Style x:Key="{x:Type local:DockWindow}" TargetType="{x:Type local:DockWindow}" BasedOn="{StaticResource {x:Type Window}}">
        <Setter Property="Height" Value="360"/>
        <Setter Property="Linq:XWindow.IsChild" Value="True"/>
        <Setter Property="Linq:XWindow.TitleIcon" Value="{Data:RemoteBinding Path=View.(Linq:XWindow.TitleIcon), RemoteSource=MainViewModel}"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="ResizeMode" Value="CanResizeWithGrip"/>
        <Setter Property="Title" Value="{Markup:AssemblyProduct}"/>
        <Setter Property="Width" Value="540"/>
    </Style>
</ResourceDictionary>