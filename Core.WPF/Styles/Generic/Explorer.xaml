<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:l="clr-namespace:Imagin.Core.Local.Extensions"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:ComponentModel="clr-namespace:System.ComponentModel;assembly=System"
    xmlns:Converters="clr-namespace:Imagin.Core.Converters"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Markup="clr-namespace:Imagin.Core.Markup"
    xmlns:Storage="clr-namespace:Imagin.Core.Storage">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=Control}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Menu}"/>
    </ResourceDictionary.MergedDictionaries>
    <!-- ... -->
    
    <DataTemplate x:Key="{x:Static Linq:XExplorer.ToolTipTemplateKey}">
        <ContentPresenter x:Name="ContentPresenter">
            <ContentPresenter.ContentTemplate>
                <DataTemplate>
                    <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,Auto">
                        <local:Thumbnail 
                            Height="32" 
                            Margin="0,0,10,0"
                            Path="{Binding}"
                            VerticalAlignment="Top"
                            Width="32"/>
                        <StackPanel Linq:XPanel.Spacing="0,0,0,2.5"
                            Linq:XPanel.SpacingExcept="Last"
                            VerticalAlignment="Top">
                            <TextBlock Text="{Binding Converter={x:Static Converters:FileNameConverter.Default}}" 
                                FontWeight="Bold"
                                TextTrimming="CharacterEllipsis"/>
                            <TextBlock Opacity="0.5" Text="{Binding Converter={x:Static Converters:ItemDescriptionConverter.Default}}"
                                TextTrimming="CharacterEllipsis"/>
                            <ContentPresenter x:Name="ContentPresenter" Content="{Binding}"/>
                        </StackPanel>
                    </Grid>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding Converter={x:Static Converters:ItemTypeConverter.Default}}" Value="{x:Static Storage:ItemType.Drive}">
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="*,Auto">
                                            <ProgressBar x:Name="ProgressBar"
                                                HorizontalAlignment="Stretch"
                                                Height="14"
                                                Linq:XProgressBar.ContentTemplate="{Markup:EmptyTemplate}"
                                                Margin="0,0,5,0"
                                                Maximum="1"
                                                Minimum="0"
                                                MinWidth="164"
                                                Value="{Binding Converter={x:Static Converters:DriveUsedPercentConverter.Default}, Mode=OneWay}"/>
                                            <TextBlock FontSize="11" Foreground="{local:ThemeKey ActualKey=Text}" Text="{Binding Converter={x:Static Converters:DriveUsedPercentConverter.Default}, StringFormat={}{0:p0}}"/>
                                        </Grid>
                                        <DataTemplate.Triggers>
                                            <DataTrigger Binding="{Binding Converter={x:Static Converters:DriveSizeLowConverter.Default}}" Value="True">
                                                <Setter TargetName="ProgressBar" Property="Foreground" Value="{local:ThemeKey ActualKey=Red}"/>
                                            </DataTrigger>
                                        </DataTemplate.Triggers>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Converter={x:Static Converters:ItemTypeConverter.Default}}" Value="{x:Static Storage:ItemType.File}">
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <TextBlock FontStyle="Italic" Text="{Binding Converter={x:Static Converters:ItemSizeConverter.Default}}"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Converter={x:Static Converters:ItemTypeConverter.Default}}" Value="{x:Static Storage:ItemType.Folder}">
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <TextBlock FontStyle="Italic" Text="{Binding Converter={x:Static Converters:ItemModifiedConverter.Default}}"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Converter={x:Static Converters:ItemTypeConverter.Default}}" Value="{x:Static Storage:ItemType.Shortcut}">
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <TextBlock FontStyle="Italic" Text="{Binding Converter={x:Static Converters:ShortcutLocationConverter.Default}}"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </ContentPresenter.ContentTemplate>
        </ContentPresenter>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Converter={x:Static Converters:ItemTypeConverter.Default}}" Value="{x:Static Storage:ItemType.Nothing}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <TextBlock FontStyle="Italic" Text="No path..."/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    
    <!-- ... -->
    
    <Style x:Key="{x:Type local:Explorer}" TargetType="{x:Type local:Explorer}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Linq:XExplorer.CopyWarningTitle" Value="{l:Loc Copy}"/>
        <Setter Property="Linq:XExplorer.CopyWarningMessage" Value="{l:Loc Continue, Suffix=?}"/>
        <Setter Property="Linq:XExplorer.InvalidPathAlert" Value="True"/>
        <Setter Property="Linq:XExplorer.InvalidPathAlertMessage" Value="{l:Loc FolderDoesNotExist}"/>
        <Setter Property="Linq:XExplorer.InvalidPathAlertTitle" Value="{l:Loc FolderNotFound}"/>
        <Setter Property="Linq:XExplorer.MoveWarningTitle" Value="{l:Loc Move}"/>
        <Setter Property="Linq:XExplorer.MoveWarningMessage" Value="{l:Loc Continue, Suffix=?}"/>
        <Setter Property="Linq:XExplorer.WarnBeforeDrop" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:Explorer">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}">
                        <Border.Resources>
                            <Data:Reference x:Key="Explorer" Data="{Data:TemplatedParent}"/>
                        </Border.Resources>
                        <Grid Linq:XGrid.Rows="Auto,Auto,*"
                            Linq:XPanel.Spacing="5,0,5,5"
                            Linq:XPanel.SpacingExcept="Last"
                            Margin="0,5,0,0">
                            <Grid Grid.Row="0"
                                Linq:XGrid.Columns="*,Auto"
                                Linq:XPanel.Spacing="0,0,5,0"
                                Linq:XPanel.SpacingExcept="Last">
                                <local:AddressBox Grid.Column="0" Linq:XElement.Name="{x:Static local:Explorer.AddressBoxKey}"
                                    Favorites="{TemplateBinding Favorites}"
                                    History="{Data:TemplatedParent History, Mode=TwoWay}"
                                    Linq:XExplorer.Path="{Data:TemplatedParent Path=(Linq:XExplorer.Path), Mode=TwoWay}"/>
                                <local:ImageToggleButton Grid.Column="1"
                                    Source="{Markup:InternalImage TriangleDown.png}"
                                    ToolTip="{l:Loc Options}">
                                    <local:ImageToggleButton.Menu>
                                        <ContextMenu DataContext="{Binding Data, Source={StaticResource Explorer}}">
                                            <MenuItem Header="{l:Loc Refresh}"
                                                Command="{Binding RefreshCommand}"
                                                FontWeight="Bold"
                                                Icon="{Markup:InternalImage Refresh.png}"/>
                                            <Separator/>
                                            <MenuItem Header="{l:Loc Sort}"
                                                Icon="{Markup:InternalImage Sort.png}"
                                                InputGestureText="{Binding BrowserOptions.SortName}"
                                                Style="{StaticResource {x:Type MenuItem}}">
                                                <Linq:XMenuItem.InputGestureTextTemplate>
                                                    <DataTemplate>
                                                        <local:AccentLabel Content="{Binding}" FontStyle="Italic" HorizontalAlignment="Left"/>
                                                    </DataTemplate>
                                                </Linq:XMenuItem.InputGestureTextTemplate>
                                                <MenuItem.Resources>
                                                    <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                                        <Setter Property="CommandParameter" Value="{Binding}"/>
                                                        <Setter Property="Header" Value="{Binding}"/>
                                                        <Setter Property="HeaderTemplate">
                                                            <Setter.Value>
                                                                <DataTemplate>
                                                                    <TextBlock Text="{Binding}"/>
                                                                </DataTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                        <Setter Property="IsCheckable" Value="True"/>
                                                        <Setter Property="Linq:XMenuItem.SelectionMode" Value="Single"/>
                                                        <Setter Property="StaysOpenOnClick" Value="True"/>
                                                        <Style.Triggers>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Data:TypeBinding}" Value="{x:Type Storage:ItemProperty}"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="Command" Value="{Binding Data.SortCommand, Source={StaticResource Explorer}}"/>
                                                                <Setter Property="IsChecked">
                                                                    <Setter.Value>
                                                                        <MultiBinding Converter="{x:Static Converters:ValueEqualsParameterMultiConverter.Default}" Mode="OneWay">
                                                                            <Binding Path="Data.BrowserOptions.SortName" Source="{StaticResource Explorer}"/>
                                                                            <Binding Path="."/>
                                                                        </MultiBinding>
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Setter Property="Linq:XMenuItem.GroupName" Value="SortName"/>
                                                            </MultiDataTrigger>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Data:TypeBinding}" Value="{x:Type ComponentModel:ListSortDirection}"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="Command" Value="{Binding Data.SortDirectionCommand, Source={StaticResource Explorer}}"/>
                                                                <Setter Property="IsChecked">
                                                                    <Setter.Value>
                                                                        <MultiBinding Converter="{x:Static Converters:ValueEqualsParameterMultiConverter.Default}" Mode="OneWay">
                                                                            <Binding Path="Data.BrowserOptions.SortDirection" Converter="{x:Static Converters:SortDirectionConverter.Default}" Source="{StaticResource Explorer}"/>
                                                                            <Binding Path="."/>
                                                                        </MultiBinding>
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Setter Property="Linq:XMenuItem.GroupName" Value="SortDirection"/>
                                                            </MultiDataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </MenuItem.Resources>
                                                <MenuItem.ItemsSource>
                                                    <CompositeCollection>
                                                        <CollectionContainer Collection="{Markup:Enumerate Storage:ItemProperty}"/>
                                                        <Separator/>
                                                        <CollectionContainer Collection="{Markup:Enumerate ComponentModel:ListSortDirection}"/>
                                                    </CompositeCollection>
                                                </MenuItem.ItemsSource>
                                            </MenuItem>
                                            <MenuItem Header="{l:Loc Group}"
                                                Icon="{Markup:InternalImage Group.png}"
                                                InputGestureText="{Binding BrowserOptions.GroupName}"
                                                Style="{StaticResource {x:Type MenuItem}}">
                                                <Linq:XMenuItem.InputGestureTextTemplate>
                                                    <DataTemplate>
                                                        <local:AccentLabel Content="{Binding}" FontStyle="Italic" HorizontalAlignment="Left"/>
                                                    </DataTemplate>
                                                </Linq:XMenuItem.InputGestureTextTemplate>
                                                <MenuItem.Resources>
                                                    <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                                        <Setter Property="CommandParameter" Value="{Binding}"/>
                                                        <Setter Property="Header" Value="{Binding}"/>
                                                        <Setter Property="HeaderTemplate">
                                                            <Setter.Value>
                                                                <DataTemplate>
                                                                    <TextBlock Text="{Binding}"/>
                                                                </DataTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                        <Setter Property="IsCheckable" Value="True"/>
                                                        <Setter Property="Linq:XMenuItem.SelectionMode" Value="Single"/>
                                                        <Setter Property="StaysOpenOnClick" Value="True"/>
                                                        <Style.Triggers>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Data:TypeBinding}" Value="{x:Type Storage:ItemProperty}"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="Command" Value="{Binding Data.GroupCommand, Source={StaticResource Explorer}}"/>
                                                                <Setter Property="IsChecked">
                                                                    <Setter.Value>
                                                                        <MultiBinding Converter="{x:Static Converters:ValueEqualsParameterMultiConverter.Default}" Mode="OneWay">
                                                                            <Binding Path="Data.BrowserOptions.GroupName" Source="{StaticResource Explorer}"/>
                                                                            <Binding Path="."/>
                                                                        </MultiBinding>
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Setter Property="Linq:XMenuItem.GroupName" Value="GroupName"/>
                                                            </MultiDataTrigger>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Data:TypeBinding}" Value="{x:Type ComponentModel:ListSortDirection}"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="Command" Value="{Binding Data.GroupDirectionCommand, Source={StaticResource Explorer}}"/>
                                                                <Setter Property="IsChecked">
                                                                    <Setter.Value>
                                                                        <MultiBinding Converter="{x:Static Converters:ValueEqualsParameterMultiConverter.Default}" Mode="OneWay">
                                                                            <Binding Path="Data.BrowserOptions.GroupDirection" Converter="{x:Static Converters:SortDirectionConverter.Default}" Source="{StaticResource Explorer}"/>
                                                                            <Binding Path="."/>
                                                                        </MultiBinding>
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Setter Property="Linq:XMenuItem.GroupName" Value="SortDirection"/>
                                                            </MultiDataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </MenuItem.Resources>
                                                <MenuItem.ItemsSource>
                                                    <CompositeCollection>
                                                        <CollectionContainer Collection="{Markup:Enumerate Storage:ItemProperty}"/>
                                                        <Separator/>
                                                        <CollectionContainer Collection="{Markup:Enumerate ComponentModel:ListSortDirection}"/>
                                                    </CompositeCollection>
                                                </MenuItem.ItemsSource>
                                            </MenuItem>
                                            <MenuItem Header="{l:Loc View}"
                                                Icon="{Markup:InternalImage View.png}"
                                                InputGestureText="{Binding BrowserOptions.View}"
                                                Style="{StaticResource {x:Type MenuItem}}">
                                                <Linq:XMenuItem.InputGestureTextTemplate>
                                                    <DataTemplate>
                                                        <local:AccentLabel Content="{Binding}" FontStyle="Italic" HorizontalAlignment="Left"/>
                                                    </DataTemplate>
                                                </Linq:XMenuItem.InputGestureTextTemplate>
                                                <MenuItem.Resources>
                                                    <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                                        <Setter Property="IsCheckable" Value="True"/>
                                                        <Setter Property="StaysOpenOnClick" Value="True"/>
                                                    </Style>
                                                </MenuItem.Resources>
                                                <MenuItem
                                                    Header="Content" 
                                                    IsChecked="{Binding BrowserOptions.View, Converter={x:Static Converters:ValueEqualsParameterConverter.Default}, ConverterParameter={x:Static local:BrowserView.Content}}"/>
                                                <MenuItem 
                                                    Header="Details" 
                                                    IsChecked="{Binding BrowserOptions.View, Converter={x:Static Converters:ValueEqualsParameterConverter.Default}, ConverterParameter={x:Static local:BrowserView.Details}}"/>
                                                <MenuItem
                                                    Header="List" 
                                                    IsChecked="{Binding BrowserOptions.View, Converter={x:Static Converters:ValueEqualsParameterConverter.Default}, ConverterParameter={x:Static local:BrowserView.List}}"/>
                                                <MenuItem 
                                                    Header="Thumbnails" 
                                                    IsChecked="{Binding BrowserOptions.View, Converter={x:Static Converters:ValueEqualsParameterConverter.Default}, ConverterParameter={x:Static local:BrowserView.Thumbnails}}"/>
                                                <MenuItem
                                                    Header="Tiles" 
                                                    IsChecked="{Binding BrowserOptions.View, Converter={x:Static Converters:ValueEqualsParameterConverter.Default}, ConverterParameter={x:Static local:BrowserView.Tiles}}"/>
                                                <Separator/>
                                                <local:SliderMenuItem Value="{Binding BrowserOptions.ViewSize, Mode=TwoWay}">
                                                    <MenuItem 
                                                        Header="{l:Loc Tiny}" 
                                                        IsCheckable="False"
                                                        local:SliderMenuItem.Value="16" 
                                                        local:SliderMenuItem.Steps="1"/>
                                                    <MenuItem 
                                                        Header="{l:Loc Smaller}" 
                                                        IsCheckable="False"
                                                        local:SliderMenuItem.Value="24" 
                                                        local:SliderMenuItem.Steps="1"/>
                                                    <MenuItem 
                                                        Header="{l:Loc Small}" 
                                                        IsCheckable="False"
                                                        local:SliderMenuItem.Value="32" 
                                                        local:SliderMenuItem.Steps="1"/>
                                                    <MenuItem 
                                                        Header="{l:Loc Normal}" 
                                                        IsCheckable="False"
                                                        local:SliderMenuItem.Value="64" 
                                                        local:SliderMenuItem.Steps="4"/>
                                                    <MenuItem 
                                                        Header="{l:Loc Large}" 
                                                        IsCheckable="False"
                                                        local:SliderMenuItem.Value="128" 
                                                        local:SliderMenuItem.Steps="8"/>
                                                    <MenuItem 
                                                        Header="{l:Loc Larger}" 
                                                        IsCheckable="False"
                                                        local:SliderMenuItem.Value="256" 
                                                        local:SliderMenuItem.Steps="16"/>
                                                    <MenuItem 
                                                        Header="{l:Loc ExtraLarge}" 
                                                        IsCheckable="False"
                                                        local:SliderMenuItem.Value="512" 
                                                        local:SliderMenuItem.Steps="32"/>
                                                </local:SliderMenuItem>
                                            </MenuItem>
                                        </ContextMenu>
                                    </local:ImageToggleButton.Menu>
                                </local:ImageToggleButton>
                            </Grid>
                            <local:FavoriteBar Grid.Row="1" Linq:XElement.Name="{x:Static local:Explorer.FavoriteBarKey}"
                                ItemsSource="{TemplateBinding Favorites}"
                                Linq:XItemsControl.SortDirection="{TemplateBinding FavoriteSortDirection}"
                                Linq:XItemsControl.SortName="{TemplateBinding FavoriteSortName, Converter={x:Static Converters:ToStringConverter.Default}}">
                                <local:FavoriteBar.Style>
                                    <Style TargetType="{x:Type local:FavoriteBar}" BasedOn="{StaticResource {x:Type local:FavoriteBar}}">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Data.ShowFavoriteBar, Source={StaticResource Explorer}}" Value="True"/>
                                                    <Condition Binding="{Binding Data.Favorites.IsEmpty, Source={StaticResource Explorer}}" Value="False"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </MultiDataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </local:FavoriteBar.Style>
                            </local:FavoriteBar>
                            <local:TopBorder Grid.Row="2">
                                <local:Browser Linq:XElement.Name="{x:Static local:Explorer.BrowserKey}"
                                    FileAttributes="{Data:TemplatedParent BrowserOptions.FileAttributes}"
                                    FileExtensions="{TemplateBinding FileExtensions}"
                                    FolderAttributes="{Data:TemplatedParent BrowserOptions.FolderAttributes}"
                                    FooterVisibility="Visible"
                                    GroupDirection="{Data:TemplatedParent BrowserOptions.GroupDirection, Converter={x:Static Converters:SortDirectionConverter.Default}, Mode=TwoWay}"
                                    GroupName="{Data:TemplatedParent BrowserOptions.GroupName, Mode=TwoWay}"
                                    History="{Data:TemplatedParent History, Mode=TwoWay}"
                                    Linq:XExplorer.Path="{Data:TemplatedParent Path=(Linq:XExplorer.Path), Mode=TwoWay}"
                                    OpenFilesOnClick="False"
                                    PresentationTraceSources.TraceLevel="High"
                                    SelectionMode="{TemplateBinding SelectionMode, Converter={x:Static Converters:SelectionModeConverter.Default}}"
                                    SortDirection="{Data:TemplatedParent BrowserOptions.SortDirection, Converter={x:Static Converters:SortDirectionConverter.Default}, Mode=TwoWay}"
                                    SortName="{Data:TemplatedParent BrowserOptions.SortName, Mode=TwoWay}"
                                    View="{Data:TemplatedParent BrowserOptions.View}"
                                    ViewCheckBoxes="{Data:TemplatedParent BrowserOptions.ViewCheckBoxes}"
                                    ViewFileExtensions="{Data:TemplatedParent BrowserOptions.ViewFileExtensions}"
                                    ViewFiles="{TemplateBinding ViewFiles}"
                                    ViewSize="{Data:TemplatedParent BrowserOptions.ViewSize}"/>
                            </local:TopBorder>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>