<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Converters="clr-namespace:Imagin.Core.Converters"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=Control}"/>
        <ResourceDictionary Source="{local:StyleKey Key=FrameworkElement}"/>
        <ResourceDictionary Source="{local:StyleKey Key=ItemsControl}"/>
    </ResourceDictionary.MergedDictionaries>
    <Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}" TargetType="ScrollViewer">
        <Setter Property="CanContentScroll" Value="True"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ScrollViewer">
                    <Grid Linq:XGrid.Columns="*,Auto"
                        Linq:XGrid.Rows="*,Auto"
                        Background="{TemplateBinding Background}">
                        <DockPanel Margin="{TemplateBinding Padding}">
                            <ScrollViewer 
                                Background="{local:ThemeKey Key=GridView.Background}"
                                BorderBrush="{local:ThemeKey Key=GridView.Border}"
                                BorderThickness="0,1"
                                DockPanel.Dock="Top"
                                HorizontalScrollBarVisibility="Hidden"
                                VerticalScrollBarVisibility="Hidden"
                                Focusable="false">
                                <GridViewHeaderRowPresenter 
                                    AllowsColumnReorder="{Data:TemplatedParent TemplatedParent.View.AllowsColumnReorder}"
                                    Columns="{Data:TemplatedParent TemplatedParent.View.Columns}"
                                    ColumnHeaderContainerStyle="{Data:TemplatedParent TemplatedParent.View.ColumnHeaderContainerStyle}"
                                    ColumnHeaderContextMenu="{Data:TemplatedParent TemplatedParent.View.ColumnHeaderContextMenu}"
                                    ColumnHeaderTemplate="{Data:TemplatedParent TemplatedParent.View.ColumnHeaderTemplate}"
                                    ColumnHeaderTemplateSelector="{Data:TemplatedParent TemplatedParent.View.ColumnHeaderTemplateSelector}"
                                    ColumnHeaderToolTip="{Data:TemplatedParent TemplatedParent.View.ColumnHeaderToolTip}"
                                    Margin="2,0"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </ScrollViewer>
                            <ScrollContentPresenter Name="PART_ScrollContentPresenter"
                                KeyboardNavigation.DirectionalNavigation="Local"
                                CanContentScroll="True"
                                CanHorizontallyScroll="False"
                                CanVerticallyScroll="False" />
                        </DockPanel>

                        <ScrollBar Name="PART_HorizontalScrollBar"
                            Orientation="Horizontal"
                            Grid.Row="1"
                            Maximum="{TemplateBinding ScrollableWidth}"
                            ViewportSize="{TemplateBinding ViewportWidth}"
                            Value="{TemplateBinding HorizontalOffset}"
                            Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" />
                        <ScrollBar Name="PART_VerticalScrollBar"
                            Grid.Column="1"
                            Maximum="{TemplateBinding ScrollableHeight}"
                            ViewportSize="{TemplateBinding ViewportHeight}"
                            Value="{TemplateBinding VerticalOffset}"
                            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ... -->

    <Style x:Key="{x:Type ListBoxItem}" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Background" Value="{local:ThemeKey ActualKey=ListBoxItemBackground}" />
        <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=ListBoxItemBorder}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=Text}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Linq:XElement.FadeIn" Value="True" />
        <Setter Property="Opacity" Value="0" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Padding" Value="16,8" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid>
                        <Control x:Name="LastSelectedControl" Style="{StaticResource {x:Static Linq:XElement.FocusVisualStyleKey}}"/>
                        <Border
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}">
                            <ContentPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Linq:XListBoxItem.LastSelected" Value="True">
                            <Setter TargetName="LastSelectedControl" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="Linq:XListBoxItem.LastSelected" Value="False">
                            <Setter TargetName="LastSelectedControl" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True"/>
                    <Condition Property="Selector.IsSelectionActive" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=ListBoxItemSelectedActiveBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=ListBoxItemSelectedActiveBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=ListBoxItemSelectedActiveForeground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True"/>
                    <Condition Property="Selector.IsSelectionActive" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=ListBoxItemSelectedBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=ListBoxItemSelectedBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=ListBoxItemSelectedForeground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=ListBoxItemMouseOverBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=ListBoxItemMouseOverBorder}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=ListBoxItemMouseOverForeground}"/>
            </MultiTrigger>
            <Trigger Property="Linq:XControl.IsDraggingOver" Value="True">
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=DropTargetBorder}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type ListViewItem}" TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="Linq:XListViewItem.ParentHasColumns" Value="{Data:Ancestor View, {x:Type ListView}, Converter={x:Static Converters:IsConverter.Default}, ConverterParameter={x:Type GridView}}"/>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Linq:XListViewItem.ParentHasColumns" Value="True"/>
                    <Condition Property="ItemsControl.AlternationIndex" Value="0"/>
                    <Condition Property="IsSelected" Value="False"/>
                    <Condition Property="IsMouseOver" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=ListBoxItemEvenBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=ListBoxItemEvenBorder}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Linq:XListViewItem.ParentHasColumns" Value="True"/>
                    <Condition Property="ItemsControl.AlternationIndex" Value="1"/>
                    <Condition Property="IsSelected" Value="False"/>
                    <Condition Property="IsMouseOver" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=ListBoxItemOddBackground}"/>
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=ListBoxItemOddBorder}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- ... -->

    <Style x:Key="{x:Type ListBox}" TargetType="{x:Type ListBox}" BasedOn="{StaticResource {x:Type ItemsControl}}">
        <Setter Property="Background" Value="{local:ThemeKey Key=ListBox.Background}"/>
        <Setter Property="BorderBrush" Value="{local:ThemeKey Key=ListBox.Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Cycle"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Linq:XItemsControl.GroupStyle">
            <Setter.Value>
                <GroupStyle HidesIfEmpty="True">
                    <GroupStyle.Panel>
                        <ItemsPanelTemplate>
                            <StackPanel/>
                        </ItemsPanelTemplate>
                    </GroupStyle.Panel>
                </GroupStyle>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XItemsControl.EmptyTemplateVisibility" Value="Visible"/>
        <Setter Property="Linq:XItemsControl.SelectNoneOnEmptySpaceClick" Value="True"/>
        <Setter Property="Linq:XListBox.EnableLastSelected" Value="True"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Selector.IsSynchronizedWithCurrentItem" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}">
                        <ScrollViewer>
                            <Grid>
                                <local:EmptyPresenter/>
                                <local:SelectionPresenter/>
                                <ItemsPresenter
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    Margin="{TemplateBinding Padding}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True"/>
        <Setter Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="True"/>
        <Setter Property="VirtualizingPanel.ScrollUnit" Value="Pixel"/>
        <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling"/>
    </Style>

    <Style x:Key="{x:Type ListView}" TargetType="{x:Type ListView}" BasedOn="{StaticResource {x:Type ListBox}}">
        <Setter Property="AlternationCount" Value="2"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Linq:XItemsControl.EnableColumnMenu" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}">
                        <ScrollViewer x:Name="ScrollViewer">
                            <Grid>
                                <local:EmptyPresenter/>
                                <local:SelectionPresenter/>
                                <ItemsPresenter
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    Margin="{TemplateBinding Padding}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                        </Trigger>
                        <DataTrigger Binding="{Data:Self View, Converter={x:Static Converters:ObjectToTypeConverter.Default}}" Value="{x:Type GridView}">
                            <Setter TargetName="ScrollViewer" Property="Style" Value="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>