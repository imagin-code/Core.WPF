<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:e="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:l="clr-namespace:Imagin.Core.Local.Extensions"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Behavior="clr-namespace:Imagin.Core.Behavior"
    xmlns:Collections="clr-namespace:Imagin.Core.Collections.ObjectModel"
    xmlns:Common="clr-namespace:Imagin.Core"
    xmlns:Configuration="clr-namespace:Imagin.Core.Configuration"
    xmlns:Converters="clr-namespace:Imagin.Core.Converters"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Markup="clr-namespace:Imagin.Core.Markup"
    xmlns:Media="clr-namespace:Imagin.Core.Media"
    xmlns:Models="clr-namespace:Imagin.Core.Models"
    xmlns:MsCollections="clr-namespace:System.Collections;assembly=mscorlib"
    xmlns:MsCollectionsSpecialized="clr-namespace:System.Collections.Specialized;assembly=System"
    xmlns:MsSystem="clr-namespace:System;assembly=mscorlib"
    xmlns:Numerics="clr-namespace:Imagin.Core.Numerics;assembly=Imagin.Core"
    xmlns:SharedCommon="clr-namespace:Imagin.Core;assembly=Imagin.Core"
    xmlns:SharedMath="clr-namespace:Imagin.Core.Numerics;assembly=Imagin.Core"
    xmlns:System="clr-namespace:System;assembly=System"
    xmlns:SystemDrawing="clr-namespace:System.Drawing;assembly=System.Drawing"
    xmlns:SystemInput="clr-namespace:System.Windows.Input;assembly=System"
    xmlns:SystemNet="clr-namespace:System.Net;assembly=System"
    xmlns:Text="clr-namespace:Imagin.Core.Text">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=Button}"/>
        <ResourceDictionary Source="{local:StyleKey Key=ComboBox}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Control}"/>
        <ResourceDictionary Source="{local:StyleKey Key=GroupItem}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Menu}"/>
        <ResourceDictionary Source="{local:StyleKey Key=PasswordBox}"/>
        <ResourceDictionary Source="{local:StyleKey Key=TextBox}"/>
    </ResourceDictionary.MergedDictionaries>
    <!-- ... Styles -->

    <Style x:Key="{x:Static local:PropertyGrid.ComboBoxStyleKey}" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="IsEnabled" Value="{Data:InvertBinding IsReadOnly}"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock x:Name="TextBlock"/>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Data:Ancestor DataContext.Localize, ComboBox}" Value="True">
                            <Setter TargetName="TextBlock" Property="Text" Value="{Data:TranslateBinding {x:Static Converters:DisplayNameConverter.Default}}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Data:Ancestor DataContext.Localize, ComboBox}" Value="False">
                            <Setter TargetName="TextBlock" Property="Text" Value="{Binding Converter={x:Static Converters:DisplayNameConverter.Default}}"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XComboBox.Placeholder" Value="{local:MemberPlaceholder}"/>
        <Setter Property="Tag" Value="This is a member combobox"/>
    </Style>

    <Style x:Key="{x:Static local:PropertyGrid.PasswordBoxStyleKey}" TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource {x:Type PasswordBox}}">
        <Setter Property="IsEnabled" Value="{Data:InvertBinding IsReadOnly}"/>
        <Setter Property="Linq:XPasswordBox.Placeholder" Value="{local:MemberPlaceholder}"/>
    </Style>

    <Style x:Key="{x:Static local:PropertyGrid.TextBoxStyleKey}" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="IsReadOnly" Value="{Binding IsReadOnly}"/>
        <Setter Property="Linq:XTextBoxBase.Placeholder" Value="{local:MemberPlaceholder}"/>
    </Style>

    <!-- ... Templates -->

    <DataTemplate x:Key="{x:Static local:PropertyGrid.ColorBoxTemplateKey}">
        <local:ColorBox x:Name="ColorBox" 
            Height="25" Width="25"
            IsEnabled="{Data:InvertBinding IsReadOnly}">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static local:ColorBox.ValueProperty}" 
                    ConverterSelectorKey="{Binding TemplateType}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}">
                    <Behavior:ManualBindingBehavior.ConverterSelector>
                        <Converters:DefaultConverterSelector>
                            <Converters:ConverterContainer DataKey="{x:Type Color}" 
                                Converter="{x:Null}"/>
                            <Converters:ConverterContainer DataKey="{x:Type Media:StringColor}" 
                                Converter="{x:Static Converters:StringColorConverter.Default}"/>
                            <Converters:ConverterContainer DataKey="{x:Type SharedMath:Hexadecimal}" 
                                Converter="{x:Static Converters:HexadecimalToColorConverter.Default}"/>
                            <Converters:ConverterContainer DataKey="{x:Type SolidColorBrush}" 
                                Converter="{x:Static Converters:SolidColorBrushToColorConverter.Default}"/>
                            <Converters:ConverterContainer DataKey="{x:Type SystemDrawing:Color}" 
                                Converter="{x:Static Converters:ColorToColorConverter.Default}"/>
                        </Converters:DefaultConverterSelector>
                    </Behavior:ManualBindingBehavior.ConverterSelector>
                </Behavior:ManualBindingBehavior>
            </e:Interaction.Behaviors>
        </local:ColorBox>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:PropertyGrid.ColorTextBoxTemplateKey}">
        <TextBox x:Name="TextBox"
            Linq:XTextBoxBase.Regex="{x:Static Text:Expressions.LettersAndNumbers}"
            MaxLength="8"
            Style="{DynamicResource {x:Static local:PropertyGrid.TextBoxStyleKey}}">
            <Linq:XTextBoxBase.Left>
                <Collections:DataTemplateCollection>
                    <DataTemplate>
                        <TextBlock Text="#"
                            Margin="5,0,0,0"
                            Opacity="0.5"/>
                    </DataTemplate>
                </Collections:DataTemplateCollection>
            </Linq:XTextBoxBase.Left>
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static TextBox.TextProperty}" 
                    ConverterSelectorKey="{Binding TemplateType}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}">
                    <Behavior:ManualBindingBehavior.ConverterSelector>
                        <Converters:DefaultConverterSelector>
                            <Converters:ConverterContainer DataKey="{x:Type Color}" 
                                Converter="{x:Static Converters:ColorToStringConverter.Default}"/>
                            <Converters:ConverterContainer DataKey="{x:Type Media:StringColor}" 
                                Converter="{x:Static Converters:StringColorToStringConverter.Default}"/>
                            <Converters:ConverterContainer DataKey="{x:Type SharedMath:Hexadecimal}" 
                                Converter="{x:Static Converters:HexadecimalToStringConverter.Default}"/>
                            <Converters:ConverterContainer DataKey="{x:Type SolidColorBrush}" 
                                Converter="{x:Static Converters:SolidColorBrushToStringConverter.Default}"/>
                            <Converters:ConverterContainer DataKey="{x:Type SystemDrawing:Color}" 
                                Converter="{x:Static Converters:ColorToStringConverter.Default}"/>
                        </Converters:DefaultConverterSelector>
                    </Behavior:ManualBindingBehavior.ConverterSelector>
                </Behavior:ManualBindingBehavior>
            </e:Interaction.Behaviors>
        </TextBox>
    </DataTemplate>

    <!-- ... -->

    <DataTemplate x:Key="{x:Static local:PropertyGrid.ColorBothTemplateKey}">
        <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,*"
            Linq:XPanel.Spacing="0,0,5,0"
            Linq:XPanel.SpacingExcept="Last">
            <ContentPresenter Content="{Binding}" 
                ContentTemplate="{DynamicResource {x:Static local:PropertyGrid.ColorBoxTemplateKey}}"/>
            <ContentPresenter Content="{Binding}"
                ContentTemplate="{DynamicResource {x:Static local:PropertyGrid.ColorTextBoxTemplateKey}}"/>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:PropertyGrid.ColorTemplateKey}">
        <ContentPresenter x:Name="ContentPresenter" Content="{Binding}"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Format}" Value="{x:Null}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.ColorBothTemplateKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Format}" Value="{x:Static Common:ColorFormat.Both}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.ColorBothTemplateKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Format}" Value="{x:Static Common:ColorFormat.ColorBox}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.ColorBoxTemplateKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Format}" Value="{x:Static Common:ColorFormat.TextBox}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.ColorTextBoxTemplateKey}}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- ... -->
    
    <DataTemplate x:Key="{x:Static local:PropertyGrid.EnumItemTemplateKey}">
        <StackPanel Linq:XPanel.VerticalContentAlignment="Center" Orientation="Horizontal">
            <StackPanel.Resources>
                <Data:Reference x:Key="Member" Data="{Data:Ancestor DataContext, ComboBox}"/>
            </StackPanel.Resources>
            <local:ImageElement
                Margin="0,0,5,0"
                Source="{Binding Converter={x:Static Converters:IconConverter.Default}}"
                Visibility="{Data:VisibilityBinding Source, Relative=Self}"/>
            <ContentPresenter x:Name="ContentPresenter" Content="{Binding}">
                <ContentPresenter.ContentTemplate>
                    <DataTemplate>
                        <TextBlock x:Name="TextBlock">
                            <e:Interaction.Behaviors>
                                <Behavior:ManualBindingBehavior Property="{x:Static TextBlock.TextProperty}"
                                    Converter="{Binding Data.Converter, Source={StaticResource Member}}" Mode="OneWay" Path="." Source="{Binding}"/>
                            </e:Interaction.Behaviors>
                        </TextBlock>
                    </DataTemplate>
                </ContentPresenter.ContentTemplate>
            </ContentPresenter>
        </StackPanel>
        <DataTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Ancestor DataContext.Converter, ComboBox}" Value="{x:Null}"/>
                    <Condition Binding="{Data:Ancestor DataContext.Localize, ComboBox}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <TextBlock Text="{Data:TranslateBinding {x:Static Converters:DisplayNameConverter.Default}}"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Ancestor DataContext.Converter, ComboBox}" Value="{x:Null}"/>
                    <Condition Binding="{Data:Ancestor DataContext.Localize, ComboBox}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <TextBlock Text="{Binding Converter={x:Static Converters:DisplayNameConverter.Default}}"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- ... -->

    <Collections:DataTemplateCollection x:Key="LeftTextTemplate">
        <DataTemplate>
            <Border>
                <Border.Resources>
                    <Data:Reference x:Key="Member" Data="{Data:Ancestor DataContext, {x:Type TextBoxBase}}"/>
                </Border.Resources>
                <TextBlock Margin="2.5,0" Text="{Binding Data.LeftText, Source={StaticResource Member}}"/>
            </Border>
        </DataTemplate>
    </Collections:DataTemplateCollection>

    <Collections:DataTemplateCollection x:Key="RightTextTemplate">
        <DataTemplate>
            <Border>
                <Border.Resources>
                    <Data:Reference x:Key="Member" Data="{Data:Ancestor DataContext, {x:Type TextBoxBase}}"/>
                </Border.Resources>
                <TextBlock Margin="2.5,0" Text="{Binding Data.RightText, Source={StaticResource Member}}"/>
            </Border>
        </DataTemplate>
    </Collections:DataTemplateCollection>

    <!-- ... -->

    <DataTemplate x:Key="{x:Static local:PropertyGrid.ByteUpDownKey}">
        <local:ByteUpDown CanUpDown="{Data:InvertBinding IsReadOnly}"
            Increment="{Binding Increment}"
            IsReadOnly="{Binding IsReadOnly}"
            Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
            Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
            Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
            Maximum="{Binding Maximum}"
            Minimum="{Binding Minimum}"
            StringFormat="{Binding StringFormat}">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static local:ByteUpDown.TextProperty}" ConverterParameter="{Binding StringFormat}"
                    Converter="{x:Static Converters:ByteToStringConverter.Default}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
            </e:Interaction.Behaviors>
        </local:ByteUpDown>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:PropertyGrid.DateTimeUpDownKey}">
        <local:DateTimeUpDown x:Name="DateTimeUpDown"
            IsReadOnly="{Binding IsReadOnly}"
            Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
            Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
            Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
            Maximum="{Binding Maximum}"
            Minimum="{Binding Minimum}">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static local:DateTimeUpDown.TextProperty}" ConverterParameter="{Binding StringFormat}"
                    Converter="{x:Static Converters:DateTimeToStringConverter.Default}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
            </e:Interaction.Behaviors>
        </local:DateTimeUpDown>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:PropertyGrid.DecimalUpDownKey}">
        <local:DecimalUpDown CanUpDown="{Data:InvertBinding IsReadOnly}"
            Increment="{Binding Increment}"
            IsReadOnly="{Binding IsReadOnly}"
            Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
            Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
            Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
            Maximum="{Binding Maximum}"
            Minimum="{Binding Minimum}"
            StringFormat="{Binding StringFormat}">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static local:DecimalUpDown.TextProperty}" ConverterParameter="{Binding StringFormat}"
                    Converter="{x:Static Converters:DecimalToStringConverter.Default}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
            </e:Interaction.Behaviors>
        </local:DecimalUpDown>
    </DataTemplate>
    
    <DataTemplate x:Key="{x:Static local:PropertyGrid.DoubleUpDownKey}">
        <local:DoubleUpDown CanUpDown="{Data:InvertBinding IsReadOnly}"
            Increment="{Binding Increment}"
            IsReadOnly="{Binding IsReadOnly}"
            Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
            Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
            Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
            Maximum="{Binding Maximum}"
            Minimum="{Binding Minimum}"
            StringFormat="{Binding StringFormat}">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static local:DoubleUpDown.TextProperty}" ConverterParameter="{Binding StringFormat}"
                    Converter="{x:Static Converters:DoubleToStringConverter.Default}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
            </e:Interaction.Behaviors>
        </local:DoubleUpDown>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:PropertyGrid.Int16UpDownKey}">
        <local:Int16UpDown CanUpDown="{Data:InvertBinding IsReadOnly}"
            Increment="{Binding Increment}"
            IsReadOnly="{Binding IsReadOnly}"
            Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
            Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
            Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
            Maximum="{Binding Maximum}"
            Minimum="{Binding Minimum}"
            StringFormat="{Binding StringFormat}">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static local:Int16UpDown.TextProperty}" ConverterParameter="{Binding StringFormat}"
                    Converter="{x:Static Converters:Int16ToStringConverter.Default}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
            </e:Interaction.Behaviors>
        </local:Int16UpDown>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:PropertyGrid.Int32UpDownKey}">
        <local:Int32UpDown CanUpDown="{Data:InvertBinding IsReadOnly}"
            Increment="{Binding Increment}"
            IsReadOnly="{Binding IsReadOnly}"
            Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
            Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
            Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
            Maximum="{Binding Maximum}"
            Minimum="{Binding Minimum}"
            StringFormat="{Binding StringFormat}">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static local:Int32UpDown.TextProperty}" ConverterParameter="{Binding StringFormat}"
                    Converter="{x:Static Converters:Int32ToStringConverter.Default}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
            </e:Interaction.Behaviors>
        </local:Int32UpDown>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:PropertyGrid.Int64UpDownKey}">
        <local:Int64UpDown CanUpDown="{Data:InvertBinding IsReadOnly}"
            Increment="{Binding Increment}"
            IsReadOnly="{Binding IsReadOnly}"
            Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
            Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
            Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
            Maximum="{Binding Maximum}"
            Minimum="{Binding Minimum}"
            StringFormat="{Binding StringFormat}">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static local:Int64UpDown.TextProperty}" ConverterParameter="{Binding StringFormat}"
                    Converter="{x:Static Converters:Int64ToStringConverter.Default}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
            </e:Interaction.Behaviors>
        </local:Int64UpDown>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:PropertyGrid.SingleUpDownKey}">
        <local:SingleUpDown CanUpDown="{Data:InvertBinding IsReadOnly}"
            Increment="{Binding Increment}"
            IsReadOnly="{Binding IsReadOnly}"
            Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
            Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
            Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
            Maximum="{Binding Maximum}"
            Minimum="{Binding Minimum}"
            StringFormat="{Binding StringFormat}">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static local:SingleUpDown.TextProperty}" ConverterParameter="{Binding StringFormat}"
                    Converter="{x:Static Converters:SingleToStringConverter.Default}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
            </e:Interaction.Behaviors>
        </local:SingleUpDown>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:PropertyGrid.TimeSpanUpDownKey}">
        <local:TimeSpanUpDown x:Name="TimeSpanUpDown"
            CanUpDown="{Data:Self IsReadOnly, Converter={x:Static Converters:InverseBooleanConverter.Default}}"
            Increment="{Binding Increment}"
            IsReadOnly="{Binding IsReadOnly}"
            Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
            Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
            Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
            Maximum="{Binding Maximum}"
            Minimum="{Binding Minimum}">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static local:TimeSpanUpDown.TextProperty}" ConverterParameter="{Binding StringFormat}"
                    Converter="{x:Static Converters:TimeSpanToStringConverter.Default}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
            </e:Interaction.Behaviors>
        </local:TimeSpanUpDown>
    </DataTemplate>
    
    <DataTemplate x:Key="{x:Static local:PropertyGrid.UDoubleUpDownKey}">
        <local:UDoubleUpDown CanUpDown="{Data:InvertBinding IsReadOnly}"
            Increment="{Binding Increment}"
            IsReadOnly="{Binding IsReadOnly}"
            Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
            Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
            Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
            Maximum="{Binding Maximum}"
            Minimum="{Binding Minimum}"
            StringFormat="{Binding StringFormat}">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static local:UDoubleUpDown.TextProperty}" ConverterParameter="{Binding StringFormat}"
                    Converter="{x:Static Converters:UDoubleToStringConverter.Default}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
            </e:Interaction.Behaviors>
        </local:UDoubleUpDown>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:PropertyGrid.UInt16UpDownKey}">
        <local:UInt16UpDown CanUpDown="{Data:InvertBinding IsReadOnly}"
            Increment="{Binding Increment}"
            IsReadOnly="{Binding IsReadOnly}"
            Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
            Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
            Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
            Maximum="{Binding Maximum}"
            Minimum="{Binding Minimum}"
            StringFormat="{Binding StringFormat}">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static local:UInt16UpDown.TextProperty}" ConverterParameter="{Binding StringFormat}"
                    Converter="{x:Static Converters:UInt16ToStringConverter.Default}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
            </e:Interaction.Behaviors>
        </local:UInt16UpDown>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:PropertyGrid.UInt32UpDownKey}">
        <local:UInt32UpDown CanUpDown="{Data:InvertBinding IsReadOnly}"
            Increment="{Binding Increment}"
            IsReadOnly="{Binding IsReadOnly}"
            Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
            Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
            Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
            Maximum="{Binding Maximum}"
            Minimum="{Binding Minimum}"
            StringFormat="{Binding StringFormat}">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static local:UInt32UpDown.TextProperty}" ConverterParameter="{Binding StringFormat}"
                    Converter="{x:Static Converters:UInt32ToStringConverter.Default}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
            </e:Interaction.Behaviors>
        </local:UInt32UpDown>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:PropertyGrid.UInt64UpDownKey}">
        <local:UInt64UpDown CanUpDown="{Data:InvertBinding IsReadOnly}"
            Increment="{Binding Increment}"
            IsReadOnly="{Binding IsReadOnly}"
            Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
            Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
            Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
            Maximum="{Binding Maximum}"
            Minimum="{Binding Minimum}"
            StringFormat="{Binding StringFormat}">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static local:UInt64UpDown.TextProperty}" ConverterParameter="{Binding StringFormat}"
                    Converter="{x:Static Converters:UInt64ToStringConverter.Default}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
            </e:Interaction.Behaviors>
        </local:UInt64UpDown>
    </DataTemplate>

    <!-- ... -->

    <DataTemplate x:Key="{x:Static local:PropertyGrid.ListTemplateKey}">
        <Grid Linq:XGrid.AutoRows="True" Linq:XGrid.Rows="Auto,*" Margin="0,2">
            <Grid.Resources>
                <Data:Reference x:Key="Member" 
                    Data="{Binding}"/>
                <Data:Reference x:Key="PropertyGrid" 
                    Data="{Data:Ancestor local:PropertyGrid}"/>
            </Grid.Resources>
            <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,Auto,Auto,Auto,*"
                Linq:XPanel.Spacing="0,0,5,0"
                Linq:XPanel.SpacingExcept="Last"
                Linq:XPanel.VerticalContentAlignment="Center"
                Margin="0,0,0,5"
                VerticalAlignment="Top">
                <ContentPresenter x:Name="ContentPresenter" Content="{Binding}"
                    Linq:XElement.OverrideMargin="0,0,1,0"
                    ToolTip="{l:Loc Add}"
                    Visibility="{Data:VisibilityBinding IsReadOnly, Invert=True}">
                    <ContentPresenter.ContentTemplate>
                        <DataTemplate>
                            <local:ImageButton ButtonSize="16,16" ButtonSource="{Markup:InternalImage Image=Plus}" ButtonVisibility="Visible">
                                <local:ImageButton.Menu>
                                    <ContextMenu DataContext="{Data:Self PlacementTarget.DataContext}" 
                                        ItemsSource="{Binding ItemTypes}"
                                        Linq:XItemsControl.GroupsItself="True"
                                        Linq:XItemsControl.GroupStyle="{StaticResource {x:Static Linq:XItemsControl.MenuGroupStyleKey}}">
                                        <Linq:XItemsControl.GroupContainerStyle>
                                            <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                                <Setter Property="Command" Value="{Binding Data.InsertAboveCommand, Source={StaticResource Member}}"/>
                                                <Setter Property="CommandParameter" Value="{Binding}"/>
                                                <Setter Property="Header" Value="{Data:DisplayNameBinding}"/>
                                            </Style>
                                        </Linq:XItemsControl.GroupContainerStyle>
                                    </ContextMenu>
                                </local:ImageButton.Menu>
                            </local:ImageButton>
                        </DataTemplate>
                    </ContentPresenter.ContentTemplate>
                </ContentPresenter>
                <local:ImageButton
                    Command="{Binding RemoveCommand}"
                    Source="{Markup:InternalImage Image=MinusRound}"
                    ToolTip="{l:Loc Remove}"
                    Visibility="{Data:VisibilityBinding IsReadOnly, Invert=True}"/>
                <local:ImageButton
                    Command="{Binding MoveUpCommand}"
                    Source="{Markup:InternalImage Image=TriangleUpRound}"
                    ToolTip="{l:Loc MoveUp}"/>
                <local:ImageButton
                    Command="{Binding MoveDownCommand}"
                    Source="{Markup:InternalImage Image=TriangleDownRound}"
                    ToolTip="{l:Loc MoveDown}"/>
                <local:Int32UpDown
                    CanUpDown="{Data:InvertBinding IsReadOnly}"
                    IsReadOnly="{Binding IsReadOnly}"
                    Linq:XTextBoxBase.Placeholder="{l:Loc Length}"
                    TextAlignment="Center"
                    Value="{Binding Length, Mode=TwoWay, UpdateSourceTrigger=LostFocus}"
                    Visibility="Collapsed"
                    Width="64"/>
            </Grid>
            <ListBox ItemsSource="{Binding Items}"
                SelectedIndex="{Binding SelectedIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                SelectionMode="Single">
                <ListBox.ItemContainerStyle>
                    <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                        <Setter Property="Padding" Value="2"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Data.IsReadOnly, Source={StaticResource Member}}" Value="False">
                                <Setter Property="ContextMenu">
                                    <Setter.Value>
                                        <ContextMenu DataContext="{Data:Self PlacementTarget.DataContext}">
                                            <MenuItem Header="{l:Loc Remove}"
                                                Command="{Binding Data.RemoveCommand, Source={StaticResource Member}}"
                                                CommandParameter="{Binding}"/>
                                            <Separator Linq:XSeparator.Header="{l:Loc Move}"/>
                                            <MenuItem Header="{l:Loc Up}"
                                                Command="{Binding Data.MoveUpCommand, Source={StaticResource Member}}"
                                                CommandParameter="{Binding}"/>
                                            <MenuItem Header="{l:Loc Down}"
                                                Command="{Binding Data.MoveDownCommand, Source={StaticResource Member}}"
                                                CommandParameter="{Binding}"/>
                                            <Separator Linq:XSeparator.Header="{l:Loc Insert}"/>
                                            <MenuItem Header="{l:Loc Above}"
                                                Command="{Binding Data.InsertAboveCommand, Source={StaticResource Member}}"
                                                CommandParameter="{Binding}"/>
                                            <MenuItem Header="{l:Loc Below}"
                                                Command="{Binding Data.InsertBelowCommand, Source={StaticResource Member}}"
                                                CommandParameter="{Binding}"/>
                                            <Separator/>
                                            <MenuItem Header="{l:Loc Reset}"
                                                Command="{Binding Data.ResetCommand, Source={StaticResource Member}}"
                                                CommandParameter="{Binding}"/>
                                        </ContextMenu>
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ListBox.ItemContainerStyle>
                <ListBox.ItemTemplate>
                    <DataTemplate DataType="{x:Type local:ListItemModel}">
                        <!--
                        <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,*">
                            <local:BulletElement Bullet="NumberParenthesis"
                                Margin="0,0,5,0"
                                Value="{Binding ParentIndex}"/>
                        </Grid>
                        -->
                        <local:MemberValuePresenter Content="{Binding}"/>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding ItemTypes}" Value="{x:Null}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <local:ImageButton
                                Command="{Binding InsertAboveCommand}"
                                Source="{Markup:InternalImage Image=Plus}"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:PropertyGrid.ListBulletTemplateKey}">
        <ItemsControl
            ItemsSource="{Binding Value, Converter={x:Static Converters:StringCollectionConverter.Default}}"
            Margin="0,5,0,0">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,*" 
                        Linq:XPanel.VerticalContentAlignment="Center"
                        Margin="0,0,0,5">
                        <local:BulletElement
                            Bullet="Square"
                            Margin="0,0,5,0"/>
                        <TextBlock
                            HorizontalAlignment="Left"
                            Text="{Binding Converter={x:Static Converters:ToStringConverter.Default}}"
                            TextTrimming="CharacterEllipsis"/>
                    </Grid>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:PropertyGrid.ListCommaTemplateKey}">
        <ItemsControl 
            ItemsSource="{Binding Value, Converter={x:Static Converters:StringCollectionConverter.Default}}"
            Linq:XItemsControl.ContainerTracking="True"
            Margin="0,5">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <WrapPanel Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="{Binding Converter={x:Static Converters:ToStringConverter.Default}}"/>
                        <TextBlock Text=", " Visibility="{Data:Ancestor ContentPresenter, Converter={x:Static Converters:BooleanToVisibilityConverter.Default}, ConverterParameter=1, Path=(Linq:XItemsControl.IsLastContainer)}"/>
                    </StackPanel>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:PropertyGrid.ListImageToggleButtonTemplateKey}">
        <local:ImageToggleButton
            Source="{Binding Icon}">
            <local:ImageToggleButton.Resources>
                <Data:Reference x:Key="Member" 
                    Data="{Binding}"/>
                <Data:Reference x:Key="PropertyGrid" 
                    Data="{Data:Ancestor local:PropertyGrid}"/>
            </local:ImageToggleButton.Resources>
            <local:ImageToggleButton.Menu>
                <ContextMenu>
                    <ContextMenu.Resources>
                        <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Style.Triggers>
                                <Trigger Property="Tag" Value="{x:Null}">
                                    <Setter Property="Command" Value="{Binding Data.Command, Source={StaticResource Member}}"/>
                                    <Setter Property="CommandParameter" Value="{Binding}"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </ContextMenu.Resources>
                    <ContextMenu.ItemsSource>
                        <CompositeCollection>
                            <CollectionContainer Collection="{Binding Data.Value, Source={StaticResource Member}}"/>
                            <MenuItem Tag="*" Header="{l:Loc Prefix=(, Key=None, Suffix=), Lower=True}"
                                FontStyle="Italic" 
                                IsEnabled="False"
                                Visibility="{Binding Data.Value.Count, Converter={x:Static Converters:Int32ToVisibilityConverter.Default}, Source={StaticResource Member}}"/>
                            <Separator
                                Visibility="{Data:VisibilityBinding Data.IsReadOnly, Invert=True, Source={StaticResource Member}}"/>
                            <MenuItem Tag="*" Header="{l:Loc Clear}"
                                Command="{Binding Data.ClearCommand, Source={StaticResource PropertyGrid}}"
                                CommandParameter="{Binding Data.Value, Source={StaticResource Member}}"
                                Visibility="{Data:VisibilityBinding Data.IsReadOnly, Invert=True, Source={StaticResource Member}}"/>
                        </CompositeCollection>
                    </ContextMenu.ItemsSource>
                    <ContextMenu.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Converter={x:Static Converters:ToStringConverter.Default}}"/>
                        </DataTemplate>
                    </ContextMenu.ItemTemplate>
                </ContextMenu>
            </local:ImageToggleButton.Menu>
        </local:ImageToggleButton>
    </DataTemplate>

    <!-- ... -->

    <DataTemplate x:Key="{x:Static local:PropertyGrid.ObjectTemplateKey}">
        <TreeView ItemsSource="{Binding Members}">
            <TreeView.ItemContainerStyle>
                <Style TargetType="TreeViewItem">
                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="TreeViewItem">
                                <Expander x:Name="Expander" Header="{TemplateBinding Header}"
                                    HeaderTemplate="{TemplateBinding HeaderTemplate}"
                                    HeaderTemplateSelector="{TemplateBinding HeaderTemplateSelector}">
                                    <local:LeftBorder Margin="8,5,0,5" Padding="12,0,0,0">
                                        <ItemsPresenter x:Name="ItemsPresenter"/>
                                    </local:LeftBorder>
                                </Expander>
                                <ControlTemplate.Triggers>
                                    <DataTrigger Binding="{Data:Self DataContext.Members}" Value="{x:Null}">
                                        <Setter TargetName="Expander" Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="Expander">
                                                    <ContentPresenter ContentSource="Header"/>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </TreeView.ItemContainerStyle>
            <TreeView.Resources>
                <HierarchicalDataTemplate DataType="{x:Type local:MemberModel}" ItemsSource="{Binding Members}">
                    <Grid x:Name="Grid" Margin="0,2,0,0" Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,*">
                        <local:MemberNamePresenter Content="{Binding}" Margin="0,0,5,0" VerticalAlignment="Center"/>
                        <local:MemberValuePresenter Content="{Binding}"/>
                    </Grid>
                    <HierarchicalDataTemplate.Triggers>
                        <DataTrigger Binding="{Data:PreviousData}" Value="{x:Null}">
                            <Setter TargetName="Grid" Property="Margin" Value="0"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Members.IsNotEmpty}" Value="True">
                            <Setter TargetName="Grid" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </HierarchicalDataTemplate.Triggers>
                </HierarchicalDataTemplate>
            </TreeView.Resources>
            <TreeView.Style>
                <Style TargetType="TreeView">
                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="TreeView">
                                <ItemsPresenter/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </TreeView.Style>
        </TreeView>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:PropertyGrid.ObjectButtonTemplateKey}">
        <ContentPresenter x:Name="ContentPresenter" Content="{Binding}">
            <ContentPresenter.ContentTemplate>
                <DataTemplate>
                    <local:ImageButton
                        Command="{Data:Ancestor EditCommand, {x:Type local:PropertyGrid}}"
                        CommandParameter="{Binding}"
                        HorizontalAlignment="Stretch"
                        Source="{Binding Icon}"
                        VerticalAlignment="Center"/>
                </DataTemplate>
            </ContentPresenter.ContentTemplate>
        </ContentPresenter>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Icon}" Value="{x:Null}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Button x:Name="Button" 
                                Content="{Binding Content}"
                                Command="{Data:Ancestor EditCommand, {x:Type local:PropertyGrid}}"
                                CommandParameter="{Binding}"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Center"/>
                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{Binding Content}" Value="{x:Null}">
                                    <Setter TargetName="Button" Property="Content" Value="{l:Loc Edit}"/>
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- ... -->

    <DataTemplate x:Key="{x:Static local:PropertyGrid.RangeSliderTemplateKey}">
        <Slider x:Name="Slider"
            IsEnabled="False"
            Margin="0,5"
            Maximum="{Data:DoubleBinding Maximum}"
            Minimum="{Data:DoubleBinding Minimum}"
            TickFrequency="{Data:DoubleBinding Increment}"
            VerticalAlignment="Center">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static Slider.ValueProperty}" 
                    ConverterSelectorKey="{Binding TemplateType}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}">
                    <Behavior:ManualBindingBehavior.ConverterSelector>
                        <Converters:DefaultConverterSelector>
                            <Converters:ConverterContainer DataKey="{x:Type MsSystem:Byte}" 
                                Converter="{x:Static Converters:ByteToDoubleConverter.Default}"/>
                            <Converters:ConverterContainer DataKey="{x:Type MsSystem:DateTime}" 
                                Converter="{x:Static Converters:DateTimeToDoubleConverter.Default}"/>
                            <Converters:ConverterContainer DataKey="{x:Type MsSystem:Decimal}" 
                                Converter="{x:Static Converters:DecimalToDoubleConverter.Default}"/>
                            <Converters:ConverterContainer DataKey="{x:Type MsSystem:Double}" 
                                Converter="{x:Null}"/>
                            <Converters:ConverterContainer DataKey="{x:Type MsSystem:Int16}" 
                                Converter="{x:Static Converters:Int16ToDoubleConverter.Default}"/>
                            <Converters:ConverterContainer DataKey="{x:Type MsSystem:Int32}" 
                                Converter="{x:Static Converters:Int32ToDoubleConverter.Default}"/>
                            <Converters:ConverterContainer DataKey="{x:Type MsSystem:Int64}" 
                                Converter="{x:Static Converters:Int64ToDoubleConverter.Default}"/>
                            <Converters:ConverterContainer DataKey="{x:Type MsSystem:Single}" 
                                Converter="{x:Static Converters:SingleToDoubleConverter.Default}"/>
                            <Converters:ConverterContainer DataKey="{x:Type MsSystem:TimeSpan}" 
                                Converter="{x:Static Converters:TimeSpanToDoubleConverter.Default}"/>
                            <Converters:ConverterContainer DataKey="{x:Type MsSystem:UInt16}" 
                                Converter="{x:Static Converters:UInt16ToDoubleConverter.Default}"/>
                            <Converters:ConverterContainer DataKey="{x:Type MsSystem:UInt32}" 
                                Converter="{x:Static Converters:UInt32ToDoubleConverter.Default}"/>
                            <Converters:ConverterContainer DataKey="{x:Type MsSystem:UInt64}" 
                                Converter="{x:Static Converters:UInt64ToDoubleConverter.Default}"/>
                            <Converters:ConverterContainer DataKey="{x:Type SharedCommon:UDouble}" 
                                Converter="{x:Static Converters:UDoubleToDoubleConverter.Default}"/>
                        </Converters:DefaultConverterSelector>
                    </Behavior:ManualBindingBehavior.ConverterSelector>
                </Behavior:ManualBindingBehavior>
            </e:Interaction.Behaviors>
        </Slider>
        <DataTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsIndeterminate}" Value="False"/>
                    <Condition Binding="{Binding IsReadOnly}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Slider" Property="IsEnabled" Value="True"/>
            </MultiDataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:PropertyGrid.RangeUpDownTemplateKey}">
        <ContentPresenter x:Name="ContentPresenter" Content="{Binding}"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type MsSystem:Byte}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.ByteUpDownKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type MsSystem:DateTime}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.DateTimeUpDownKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type MsSystem:Decimal}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.DecimalUpDownKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type MsSystem:Double}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.DoubleUpDownKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type MsSystem:Int16}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.Int16UpDownKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type MsSystem:Int32}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.Int32UpDownKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type MsSystem:Int64}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.Int64UpDownKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type MsSystem:Single}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.SingleUpDownKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type MsSystem:TimeSpan}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.TimeSpanUpDownKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type MsSystem:UInt16}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.UInt16UpDownKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type MsSystem:UInt32}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.UInt32UpDownKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type MsSystem:UInt64}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.UInt64UpDownKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type SharedCommon:UDouble}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.UDoubleUpDownKey}}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:PropertyGrid.RangeTemplateKey}">
        <ContentPresenter x:Name="ContentPresenter" Content="{Binding}"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Format}" Value="{x:Null}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.RangeUpDownTemplateKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Format}" Value="{x:Static Common:RangeFormat.None}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.RangeUpDownTemplateKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Format}" Value="{x:Static Common:RangeFormat.Both}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="60*,40*">
                                <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:PropertyGrid.RangeSliderTemplateKey}}"
                                    Margin="0,0,5,0"/>
                                <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:PropertyGrid.RangeUpDownTemplateKey}}"/>
                            </Grid>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Format}" Value="{x:Static Common:RangeFormat.Slider}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.RangeSliderTemplateKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Format}" Value="{x:Static Common:RangeFormat.UpDown}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.RangeUpDownTemplateKey}}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- ... -->

    <local:MemberTemplateSelector x:Key="MemberTemplateSelector">
        <!-- ... Imagin.Core -->
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type Common:Alignment}">
            <StackPanel>
                <ComboBox
                    ItemsSource="{Data:EnumerateBinding Value.Horizontal}"
                    Margin="0,0,0,5"
                    Style="{DynamicResource {x:Static local:PropertyGrid.ComboBoxStyleKey}}">
                    <e:Interaction.Behaviors>
                        <Behavior:ManualBindingBehavior Property="{x:Static ComboBox.SelectedItemProperty}" 
                            Mode="TwoWay" Path="Value.Horizontal" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                    </e:Interaction.Behaviors>
                </ComboBox>
                <ComboBox
                    ItemsSource="{Data:EnumerateBinding Value.Vertical}"
                    Style="{DynamicResource {x:Static local:PropertyGrid.ComboBoxStyleKey}}">
                    <e:Interaction.Behaviors>
                        <Behavior:ManualBindingBehavior Property="{x:Static ComboBox.SelectedItemProperty}" 
                            Mode="TwoWay" Path="Value.Vertical" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                    </e:Interaction.Behaviors>
                </ComboBox>
            </StackPanel>
        </local:KeyTemplate>

        <!-- ... Imagin.Core (Shared) -->
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type SharedCommon:CardinalDirection}">
            <local:DirectionControl HorizontalAlignment="Left">
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static local:DirectionControl.DirectionProperty}" 
                        Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
            </local:DirectionControl>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type SharedCommon:UDouble}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:PropertyGrid.RangeTemplateKey}}"/>
        </local:KeyTemplate>

        <!-- ... Imagin.Core.Configuration -->
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type Configuration:ApplicationResources}">
            <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="*,Auto,Auto"
                Linq:XPanel.Spacing="0,0,5,0"
                Linq:XPanel.SpacingExcept="Last">
                <ComboBox>
                    <e:Interaction.Behaviors>
                        <Behavior:ManualBindingBehavior Property="{x:Static ComboBox.SelectedItemProperty}" 
                            Mode="TwoWay" Path="Theme" Source="{Data:RemoteBinding RemoteSource=Options}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                    </e:Interaction.Behaviors>
                    <ComboBox.ItemsSource>
                        <CompositeCollection>
                            <local:ComboBoxSeparator Content="{l:Loc Default}"/>
                            <CollectionContainer Collection="{Markup:Enumerate Common:DefaultThemes, String=True}"/>
                            <local:ComboBoxSeparator Content="{l:Loc Custom}" Visibility="{Data:RemoteBinding CustomThemes.IsNotEmpty, Converter={x:Static Converters:BooleanToVisibilityConverter.Default}, RemoteSource=Resources}"/>
                            <CollectionContainer Collection="{Data:RemoteBinding CustomThemes, RemoteSource=Resources}"/>
                        </CompositeCollection>
                    </ComboBox.ItemsSource>
                    <ComboBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Converter={x:Static Converters:FileNameConverter.Default}, ConverterParameter=0}"/>
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                </ComboBox>
                <local:ImageButton
                    Command="{Data:RemoteBinding RemoteSource=Options, Path=SaveThemeCommand}"
                    Source="{Markup:InternalImage Save.png}"
                    ToolTip="{l:Loc Save}"/>
                <local:ImageButton
                    Command="{Data:RemoteBinding RemoteSource=Options, Path=DeleteThemeCommand}"
                    Source="{Markup:InternalImage Trash.png}"
                    ToolTip="{l:Loc Delete}"/>
            </Grid>
        </local:KeyTemplate>

        <!-- ... Imagin.Core.Controls -->
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type local:Layouts}">
            <Grid
                Linq:XGrid.Columns="*,Auto,Auto"
                Linq:XPanel.Spacing="0,0,5,0"
                Linq:XPanel.SpacingExcept="Last">
                <Grid.Resources>
                    <Data:Reference x:Key="Layouts" Data="{Binding Value}"/>
                </Grid.Resources>
                <ComboBox x:Name="ComboBox">
                    <e:Interaction.Behaviors>
                        <Behavior:ManualBindingBehavior Property="{x:Static ComboBox.SelectedItemProperty}" 
                            Mode="TwoWay" Path="Value.Layout" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                    </e:Interaction.Behaviors>
                    <ComboBox.ItemsSource>
                        <CompositeCollection>
                            <local:ComboBoxSeparator Content="{l:Loc Default}"/>
                            <CollectionContainer Collection="{Binding Data.DefaultLayouts, Source={StaticResource Layouts}}"/>
                            <local:ComboBoxSeparator Content="{l:Loc Custom}" Visibility="{Binding Data.IsNotEmpty, Converter={x:Static Converters:BooleanToVisibilityConverter.Default}, Source={StaticResource Layouts}}"/>
                            <CollectionContainer Collection="{Binding Data, Source={StaticResource Layouts}}"/>
                        </CompositeCollection>
                    </ComboBox.ItemsSource>
                    <ComboBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Converter={x:Static Converters:FileNameConverter.Default}, ConverterParameter=0}"/>
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                </ComboBox>
                <local:ImageButton
                    Grid.Column="1"
                    Command="{Binding Value.SaveLayoutCommand}"
                    Source="{Markup:InternalImage Save.png}"
                    ToolTip="{l:Loc Save}"/>
                <local:ImageButton
                    Grid.Column="2"
                    Command="{Binding Value.DeleteLayoutCommand}"
                    Source="{Markup:InternalImage Trash.png}"
                    ToolTip="{l:Loc Delete}"/>
            </Grid>
        </local:KeyTemplate>

        <!-- ... Imagin.Core.Numerics -->
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type SharedMath:DoubleMatrix}">
            <StackPanel Margin="5">
                <Slider
                    Margin="0,0,0,5"
                    Maximum="{Data:Ancestor ActualWidth, StackPanel}"
                    Minimum="32"
                    Value="{Binding Zoom, ElementName=MatrixControl, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                <local:MatrixControl x:Name="MatrixControl"
                    HorizontalAlignment="Left"
                    Matrix="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    Zoom="128"/>
            </StackPanel>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type SharedMath:Hexadecimal}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:PropertyGrid.ColorTemplateKey}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type SharedMath:Int32Pattern}">
            <local:PatternControl
                BorderThickness="0"
                CanvasLength="180"
                DotLength="32"
                InnerDotLength="24"
                IsEnabled="{Data:InvertBinding IsReadOnly}">
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static local:PatternControl.PatternProperty}" 
                        Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
            </local:PatternControl>
        </local:KeyTemplate>

        <!-- ... Imagin.Core.Media -->
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type Numerics:Unit}">
            <local:UnitControl
                IsEnabled="{Data:InvertBinding IsReadOnly}"
                Unit="{Binding Format}">
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static local:UnitControl.ValueProperty}" 
                        Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
            </local:UnitControl>
        </local:KeyTemplate>

        <!-- ... Imagin.Core.Media (Shared) -->
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type Media:Gradient}">
            <local:GradientBox
                HorizontalAlignment="Stretch"
                IsEnabled="{Binding IsReadOnly, Converter={x:Static Converters:InverseBooleanConverter.Default}}"
                Width="Auto">
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static local:GradientBox.ValueProperty}" 
                        Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
            </local:GradientBox>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type Media:GradientStepCollection}">
            <local:GradientControl Gradient="{Binding Value}"/>
        </local:KeyTemplate>

        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type Media:StringColor}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:PropertyGrid.ColorTemplateKey}}"/>
        </local:KeyTemplate>

        <!-- ... Imagin.Core.Models -->
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type Models:PanelCollection}">
            <ItemsControl ItemsSource="{Binding Value}" Margin="0,5,0,0">
                <ItemsControl.ItemTemplate>
                    <DataTemplate DataType="{x:Type Models:Panel}">
                        <CheckBox x:Name="CheckBox"
                            IsChecked="{Binding IsVisible, Mode=TwoWay}"
                            Margin="0,0,0,5"/>
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding TitleLocalized}" Value="True">
                                <Setter TargetName="CheckBox" Property="Content" Value="{Data:TranslateBinding Title}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding TitleLocalized}" Value="False">
                                <Setter TargetName="CheckBox" Property="Content" Value="{Binding Title}"/>
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </local:KeyTemplate>

        <!-- ... Imagin.Core.Text -->
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type Text:Bullets}">
            <ComboBox
                ItemsSource="{Data:EnumerateBinding Value}"
                Style="{DynamicResource {x:Static local:PropertyGrid.ComboBoxStyleKey}}">
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static ComboBox.SelectedItemProperty}" 
                        Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
                <Linq:XComboBox.SelectedItemTemplate>
                    <DataTemplate>
                        <local:BulletElement Bullet="{Binding}" MaxHeight="20" Value="1"/>
                    </DataTemplate>
                </Linq:XComboBox.SelectedItemTemplate>
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <local:BulletElement Bullet="{Binding}" MaxHeight="20" Value="1"/>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>
        </local:KeyTemplate>

        <!-- ... Sytem -->
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type MsSystem:Array}">
            <ContentPresenter x:Name="ContentPresenter" Content="{Binding}"/>
            <local:KeyTemplate.Triggers>
                <DataTrigger Binding="{Binding Style}" Value="{x:Null}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.ListCommaTemplateKey}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:ArrayStyle.Bullet}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.ListBulletTemplateKey}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:ArrayStyle.Comma}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.ListCommaTemplateKey}}"/>
                </DataTrigger>
            </local:KeyTemplate.Triggers>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type MsSystem:Boolean}">
            <ContentPresenter x:Name="ContentPresenter" Content="{Binding}"/>
            <local:KeyTemplate.Triggers>
                <DataTrigger Binding="{Binding Style}" Value="{x:Null}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <CheckBox Content="{Binding Content}"
                                    HorizontalAlignment="Left" 
                                    IsEnabled="{Data:InvertBinding IsReadOnly}">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static CheckBox.IsCheckedProperty}" 
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                </CheckBox>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:BooleanStyle.Image}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <local:ImageToggleButton Content="{Binding Content}"
                                    HorizontalAlignment="Left"
                                    Source="{Binding Icon}"
                                    IsEnabled="{Binding IsReadOnly, Converter={x:Static Converters:InverseBooleanConverter.Default}, Mode=OneWay}">
                                    <e:Interaction.Behaviors>
                                        <Behavior:DynamicResourceBehavior Property="{x:Static local:ImageToggleButton.ImageForegroundProperty}" 
                                            Key="{Binding IconColor}"/>
                                        <Behavior:ManualBindingBehavior Property="{x:Static local:ImageToggleButton.IsCheckedProperty}" 
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                </local:ImageToggleButton>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:BooleanStyle.Switch}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <local:SwitchButton
                                    IsEnabled="{Binding IsReadOnly, Converter={x:Static Converters:InverseBooleanConverter.Default}, Mode=OneWay}">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static local:SwitchButton.IsCheckedProperty}" 
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                </local:SwitchButton>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </local:KeyTemplate.Triggers>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type MsSystem:Byte}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:PropertyGrid.RangeTemplateKey}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type MsSystem:DateTime}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:PropertyGrid.RangeTemplateKey}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type MsSystem:Decimal}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:PropertyGrid.RangeTemplateKey}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type MsSystem:Double}">
            <ContentPresenter x:Name="ContentPresenter" Content="{Binding}"/>
            <local:KeyTemplate.Triggers>
                <DataTrigger Binding="{Binding Style}" Value="{x:Null}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.RangeTemplateKey}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:DoubleStyle.Angle}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <local:AngleControl HorizontalAlignment="Left">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static local:AngleControl.DegreesProperty}"
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                </local:AngleControl>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:DoubleStyle.Progress}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <ProgressBar>
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static ProgressBar.ValueProperty}"
                                            Mode="OneWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                </ProgressBar>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:DoubleStyle.ProgressRound}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <local:ProgressRing HorizontalAlignment="Left">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static local:ProgressRing.ValueProperty}"
                                            Mode="OneWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                </local:ProgressRing>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:DoubleStyle.Unit}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <local:UnitControl
                                    IsReadOnly="{Binding IsReadOnly}"
                                    Resolution="72"
                                    StringFormat="{Binding StringFormat}"
                                    Unit="Pixel">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static local:UnitControl.ValueProperty}"
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                </local:UnitControl>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </local:KeyTemplate.Triggers>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type MsSystem:Enum}">
            <ContentPresenter x:Name="ContentPresenter" Content="{Binding}"/>
            <local:KeyTemplate.Triggers>
                <DataTrigger Binding="{Binding Style}" Value="{x:Null}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <ComboBox
                                    ItemsSource="{Data:EnumerateBinding Value}"
                                    ItemTemplate="{DynamicResource {x:Static local:PropertyGrid.EnumItemTemplateKey}}"
                                    Style="{DynamicResource {x:Static local:PropertyGrid.ComboBoxStyleKey}}">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static ComboBox.SelectedItemProperty}" 
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                </ComboBox>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:EnumStyle.FlagCheck}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate DataType="{x:Type local:MemberModel}">
                                <local:FlagGroup
                                    Type="{Data:TypeBinding Value}"
                                    TypeVisibility="Visible">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static local:FlagGroup.ValueProperty}" 
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                    <local:FlagGroup.ItemTemplate>
                                        <DataTemplate>
                                            <CheckBox Content="{Binding Value}" IsChecked="{Data:TwoWay IsChecked}"
                                                Margin="0,0,0,5"/>
                                        </DataTemplate>
                                    </local:FlagGroup.ItemTemplate>
                                </local:FlagGroup>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:EnumStyle.FlagSelect}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate DataType="{x:Type local:MemberModel}">
                                <ComboBox
                                    ItemsSource="{Data:EnumerateBinding Value}"
                                    ItemTemplate="{DynamicResource {x:Static local:PropertyGrid.EnumItemTemplateKey}}"
                                    Linq:XComboBox.SelectionMode="Multiple"
                                    Style="{DynamicResource {x:Static local:PropertyGrid.ComboBoxStyleKey}}">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static Linq:XComboBox.FlagsProperty}" 
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                    <Linq:XComboBox.SelectedItemTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Data:Ancestor ComboBox, Path=(Linq:XComboBox.Flags)}"/>
                                        </DataTemplate>
                                    </Linq:XComboBox.SelectedItemTemplate>
                                </ComboBox>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:EnumStyle.FlagSwitch}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate DataType="{x:Type local:MemberModel}">
                                <local:FlagGroup
                                    Type="{Data:TypeBinding Value}"
                                    TypeVisibility="Visible">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static local:FlagGroup.ValueProperty}" 
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                    <local:FlagGroup.ItemTemplate>
                                        <DataTemplate>
                                            <local:SwitchButton Content="{Binding Value}" IsChecked="{Data:TwoWay IsChecked}"
                                                Margin="0,0,0,5"/>
                                        </DataTemplate>
                                    </local:FlagGroup.ItemTemplate>
                                </local:FlagGroup>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:EnumStyle.FlagToggle}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate DataType="{x:Type local:MemberModel}">
                                <local:FlagGroup
                                    Type="{Data:TypeBinding Value}"
                                    TypeVisibility="Visible">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static local:FlagGroup.ValueProperty}" 
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                    <local:FlagGroup.ItemTemplate>
                                        <DataTemplate>
                                            <local:ImageToggleButton Content="{Binding Value}" IsChecked="{Data:TwoWay IsChecked}"
                                                Margin="0,0,0,5"/>
                                        </DataTemplate>
                                    </local:FlagGroup.ItemTemplate>
                                </local:FlagGroup>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </local:KeyTemplate.Triggers>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type MsSystem:Guid}">
            <TextBox x:Name="TextBox"
                Linq:XTextBoxBase.Regex="{x:Static Text:Expressions.Guid}"
                Style="{DynamicResource {x:Static local:PropertyGrid.TextBoxStyleKey}}">
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static TextBox.TextProperty}" 
                        Converter="{x:Static Converters:GuidToStringConverter.Default}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
            </TextBox>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type MsSystem:Int16}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:PropertyGrid.RangeTemplateKey}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type MsSystem:Int32}">
            <ContentPresenter x:Name="ContentPresenter" Content="{Binding}"/>
            <local:KeyTemplate.Triggers>
                <DataTrigger Binding="{Binding Style}" Value="{x:Null}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.RangeTemplateKey}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:Int32Style.Index}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <ComboBox ItemsSource="{Binding ItemSource}"
                                    Style="{DynamicResource {x:Static local:PropertyGrid.ComboBoxStyleKey}}">
                                    <ComboBox.Resources>
                                        <Data:Reference x:Key="Member" Data="{Binding}"/>
                                    </ComboBox.Resources>
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static ComboBox.SelectedIndexProperty}" 
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                    <ComboBox.ItemTemplate>
                                        <DataTemplate>
                                            <TextBlock>
                                                <e:Interaction.Behaviors>
                                                    <Behavior:ManualBindingBehavior Property="{x:Static TextBlock.TextProperty}" 
                                                        Mode="OneWay" Path="{Binding Data.ItemPath, Source={StaticResource Member}}" Source="{Binding}" UpdateSourceTrigger="PropertyChanged" />
                                                </e:Interaction.Behaviors>
                                            </TextBlock>
                                        </DataTemplate>
                                    </ComboBox.ItemTemplate>
                                </ComboBox>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </local:KeyTemplate.Triggers>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type MsSystem:Int64}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:PropertyGrid.RangeTemplateKey}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type MsSystem:Object}">
            <ContentPresenter x:Name="ContentPresenter" Content="{Binding}" ContentTemplate="{Markup:EmptyTemplate}"/>
            <local:KeyTemplate.Triggers>
                <DataTrigger Binding="{Binding Style}" Value="{x:Null}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.ObjectButtonTemplateKey}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:ObjectStyle.Button}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.ObjectButtonTemplateKey}}"/>
                </DataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Depth}" Value="0"/>
                        <Condition Binding="{Binding Style}" Value="{x:Static Data:ObjectStyle.Default}"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.ObjectTemplateKey}}"/>
                </MultiDataTrigger>
            </local:KeyTemplate.Triggers>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type MsSystem:Single}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:PropertyGrid.RangeTemplateKey}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type MsSystem:String}">
            <ContentPresenter x:Name="ContentPresenter" Content="{Binding}">
                <ContentPresenter.ContentTemplate>
                    <DataTemplate>
                        <TextBox x:Name="TextBox"
                            Linq:XTextBox.ClearButtonVisibility="{Data:VisibilityBinding ClearText}"
                            Linq:XTextBox.EnterCommand="{Binding Command}"
                            Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
                            Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
                            Linq:XTextBoxBase.Suggestions="{Binding Suggestions}"
                            Linq:XTextBoxBase.SuggestionCommand="{Binding SuggestionCommand}"
                            Style="{DynamicResource {x:Static local:PropertyGrid.TextBoxStyleKey}}">
                            <e:Interaction.Behaviors>
                                <Behavior:ManualBindingBehavior Property="{x:Static TextBox.TextProperty}" 
                                    Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                            </e:Interaction.Behaviors>
                        </TextBox>
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:StringStyle.Search}">
                                <Setter TargetName="TextBox" Property="Linq:XTextBox.EnterButtonSource" Value="{Binding Icon}"/>
                                <Setter TargetName="TextBox" Property="Linq:XTextBox.EnterButtonVisibility" Value="Visible"/>
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </ContentPresenter.ContentTemplate>
            </ContentPresenter>
            <local:KeyTemplate.Triggers>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:StringStyle.FilePath}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <local:PathBox
                                    BrowseMode="OpenFile"
                                    CanBrowse="{Binding IsReadOnly, Converter={x:Static Converters:InverseBooleanConverter.Default}, Mode=OneWay}"
                                    CanValidate="True"
                                    IconVisibility="Visible"
                                    IsReadOnly="{Binding IsReadOnly}"
                                    Linq:XTextBox.ClearButtonVisibility="Visible"
                                    Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
                                    ValidateHandler="{Binding ValidateHandler}">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static local:PathBox.TextProperty}" 
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                </local:PathBox>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:StringStyle.FolderPath}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <local:PathBox
                                    BrowseMode="OpenFolder"
                                    CanBrowse="{Binding IsReadOnly, Converter={x:Static Converters:InverseBooleanConverter.Default}, Mode=OneWay}"
                                    CanValidate="True"
                                    IconVisibility="Visible"
                                    IsReadOnly="{Binding IsReadOnly}"
                                    Linq:XTextBox.ClearButtonVisibility="Visible"
                                    Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
                                    ValidateHandler="{Binding ValidateHandler}">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static local:PathBox.TextProperty}" 
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                </local:PathBox>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:StringStyle.MultiFiles}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <local:MultiPathBox
                                    BrowseMode="OpenFolder"
                                    CanBrowse="{Binding IsReadOnly, Converter={x:Static Converters:InverseBooleanConverter.Default}, Mode=OneWay}"
                                    CanValidate="True"
                                    IconVisibility="Visible"
                                    IsReadOnly="{Binding IsReadOnly}"
                                    Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
                                    ValidateHandler="{Binding ValidateHandler}">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static local:MultiPathBox.SourceProperty}" 
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                </local:MultiPathBox>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:StringStyle.MultiFolders}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <local:MultiPathBox
                                    BrowseMode="OpenFolder"
                                    CanBrowse="{Binding IsReadOnly, Converter={x:Static Converters:InverseBooleanConverter.Default}, Mode=OneWay}"
                                    CanValidate="True"
                                    IconVisibility="Visible"
                                    IsReadOnly="{Binding IsReadOnly}"
                                    Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
                                    ValidateHandler="{Binding ValidateHandler}">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static local:MultiPathBox.SourceProperty}" 
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                </local:MultiPathBox>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:StringStyle.MultiLines}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <TextBox x:Name="TextBox"
                                    AcceptsReturn="True"
                                    Height="Auto"
                                    Padding="5,7"
                                    Style="{DynamicResource {x:Static local:PropertyGrid.TextBoxStyleKey}}"
                                    TextBlock.LineStackingStrategy="BlockLineHeight"
                                    TextBlock.LineHeight="15"
                                    TextWrapping="Wrap"
                                    VerticalContentAlignment="Top">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static TextBox.TextProperty}" 
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                </TextBox>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:StringStyle.MultiPaths}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <local:MultiPathBox
                                    BrowseMode="OpenFolder"
                                    CanBrowse="{Binding IsReadOnly, Converter={x:Static Converters:InverseBooleanConverter.Default}, Mode=OneWay}"
                                    CanValidate="True"
                                    IconVisibility="Visible"
                                    IsReadOnly="{Binding IsReadOnly}"
                                    Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
                                    ValidateHandler="{Binding ValidateHandler}">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static local:MultiPathBox.SourceProperty}" 
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                </local:MultiPathBox>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:StringStyle.Password}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <PasswordBox Style="{DynamicResource {x:Static local:PropertyGrid.PasswordBoxStyleKey}}">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static Linq:XPasswordBox.PasswordProperty}" 
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                </PasswordBox>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:StringStyle.Thumbnail}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <local:Thumbnail Path="{Binding Value}"
                                    Height="16" Width="16"/>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger> 
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:StringStyle.Tokens}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <local:TokenBox
                                    IsReadOnly="{Binding IsReadOnly}"
                                    Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
                                    TokenDelimiter="{Binding Delimiter}">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static local:TokenBox.SourceProperty}" 
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                </local:TokenBox>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger> 
            </local:KeyTemplate.Triggers>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type MsSystem:TimeSpan}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:PropertyGrid.RangeTemplateKey}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type MsSystem:TimeZoneInfo}">
            <local:TimeZoneBox
                IsEnabled="{Data:InvertBinding IsReadOnly}"
                Linq:XComboBox.Placeholder="{local:MemberPlaceholder}">
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static local:TimeZoneBox.SelectedItemProperty}" 
                        Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
            </local:TimeZoneBox>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type MsSystem:Type}">
            <TextBox IsReadOnly="True" Text="{Binding Value.FullName}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type MsSystem:UInt16}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:PropertyGrid.RangeTemplateKey}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type MsSystem:UInt32}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:PropertyGrid.RangeTemplateKey}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type MsSystem:UInt64}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:PropertyGrid.RangeTemplateKey}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type MsSystem:Version}">
            <local:VersionBox x:Name="VersionBox"
                HorizontalAlignment="Stretch"
                IsReadOnly="{Binding IsReadOnly}"
                Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}">
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static local:VersionBox.TextProperty}" 
                        Converter="{x:Static Converters:VersionToStringConverter.Default}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
            </local:VersionBox>
        </local:KeyTemplate>

        <!-- ... System -->
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type System:Uri}">
            <local:UriBox
                IsReadOnly="{Binding IsReadOnly}"
                Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}">
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static local:UriBox.TextProperty}" 
                        Converter="{x:Static Converters:UriToStringConverter.Default}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
            </local:UriBox>
        </local:KeyTemplate>

        <!-- ... System.Collections -->
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type MsCollections:IEnumerable}">
            <ContentPresenter x:Name="ContentPresenter" Content="{Binding}"/>
            <local:KeyTemplate.Triggers>
                <DataTrigger Binding="{Binding Style}" Value="{x:Null}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.ListCommaTemplateKey}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:EnumerableStyle.Bullet}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.ListBulletTemplateKey}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:EnumerableStyle.Comma}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.ListCommaTemplateKey}}"/>
                </DataTrigger>
            </local:KeyTemplate.Triggers>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type MsCollections:IList}">
            <ContentPresenter x:Name="ContentPresenter" Content="{Binding}"/>
            <local:KeyTemplate.Triggers>
                <DataTrigger Binding="{Binding Style}" Value="{x:Null}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.ListCommaTemplateKey}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:ListStyle.Bullet}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.ListBulletTemplateKey}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:ListStyle.Comma}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.ListCommaTemplateKey}}"/>
                </DataTrigger>
            </local:KeyTemplate.Triggers>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type MsCollectionsSpecialized:INotifyCollectionChanged}">
            <ContentPresenter x:Name="ContentPresenter" Content="{Binding}"/>
            <local:KeyTemplate.Triggers>
                <DataTrigger Binding="{Binding Style}" Value="{x:Null}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.ListCommaTemplateKey}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:CollectionStyle.Bullet}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.ListBulletTemplateKey}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:CollectionStyle.Button}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.ObjectButtonTemplateKey}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:CollectionStyle.Comma}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.ListCommaTemplateKey}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:CollectionStyle.Default}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.ListTemplateKey}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static Data:CollectionStyle.ImageToggleButton}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:PropertyGrid.ListImageToggleButtonTemplateKey}}"/>
                </DataTrigger>
            </local:KeyTemplate.Triggers>
        </local:KeyTemplate>

        <!-- ... System.Drawing -->
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type SystemDrawing:Color}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:PropertyGrid.ColorTemplateKey}}"/>
        </local:KeyTemplate>

        <!-- ... System.Net -->
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type SystemNet:NetworkCredential}">
            <StackPanel>
                <TextBox x:Name="TextBox"
                    Linq:XTextBoxBase.Placeholder="{l:Loc Username}"
                    Margin="0,0,0,5"
                    Style="{DynamicResource {x:Static local:PropertyGrid.TextBoxStyleKey}}">
                    <e:Interaction.Behaviors>
                        <Behavior:ManualBindingBehavior Property="{x:Static TextBox.TextProperty}" 
                            Mode="TwoWay" Path="Value.UserName" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                    </e:Interaction.Behaviors>
                </TextBox>
                <PasswordBox x:Name="PasswordBox"
                    Linq:XPasswordBox.ToggleButtonVisibility="Visible"
                    Style="{DynamicResource {x:Static local:PropertyGrid.PasswordBoxStyleKey}}">
                    <e:Interaction.Behaviors>
                        <Behavior:ManualBindingBehavior Property="{x:Static Linq:XPasswordBox.PasswordProperty}" 
                            Mode="TwoWay" Path="Value.Password" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                    </e:Interaction.Behaviors>
                </PasswordBox>
            </StackPanel>
        </local:KeyTemplate>

        <!-- ... System.Windows -->
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type Color}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:PropertyGrid.ColorTemplateKey}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type FontFamily}">
            <local:FontFamilyBox
                IsEnabled="{Data:InvertBinding IsReadOnly}"
                Linq:XComboBox.Placeholder="{local:MemberPlaceholder}">
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static local:FontFamilyBox.SelectedItemProperty}" 
                        Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
            </local:FontFamilyBox>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type FontStyle}">
            <local:FontStyleBox
                IsEnabled="{Data:InvertBinding IsReadOnly}"
                Linq:XComboBox.Placeholder="{local:MemberPlaceholder}">
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static local:FontStyleBox.SelectedItemProperty}" 
                        Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
            </local:FontStyleBox>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type FontWeight}">
            <local:FontWeightBox
                IsEnabled="{Data:InvertBinding IsReadOnly}"
                Linq:XComboBox.Placeholder="{local:MemberPlaceholder}">
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static local:FontWeightBox.SelectedItemProperty}" 
                        Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
            </local:FontWeightBox>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type LinearGradientBrush}">
            <local:GradientBox 
                HorizontalAlignment="Stretch"
                IsEnabled="{Binding IsReadOnly, Converter={x:Static Converters:InverseBooleanConverter.Default}}"
                Width="Auto">
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static local:GradientBox.ValueProperty}" 
                        Converter="{x:Static Converters:LinearGradientBrushConverter.Default}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
            </local:GradientBox>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type ListCollectionView}">
            <ContentPresenter x:Name="ContentPresenter" Content="{Binding}"/>
            <local:KeyTemplate.Triggers>
                <DataTrigger Binding="{Binding Style}" Value="{x:Null}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <local:ImageToggleButton Source="{Binding Icon}">
                                    <local:ImageToggleButton.Resources>
                                        <Data:Reference x:Key="Member" Data="{Binding}"/>
                                    </local:ImageToggleButton.Resources>
                                    <local:ImageToggleButton.Menu>
                                        <ContextMenu ItemsSource="{Binding Data.Value, Source={StaticResource Member}}"
                                            Linq:XItemsControl.GroupsItself="True"
                                            Linq:XItemsControl.GroupStyle="{StaticResource {x:Static Linq:XItemsControl.MenuGroupStyleKey}}">
                                            <Linq:XItemsControl.GroupContainerStyle>
                                                <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                                    <Setter Property="Command" Value="{Binding Data.Command, Source={StaticResource Member}}"/>
                                                    <Setter Property="CommandParameter" Value="{Binding}"/>
                                                    <Setter Property="Header" Value="{Data:DisplayNameBinding}"/>
                                                </Style>
                                            </Linq:XItemsControl.GroupContainerStyle>
                                        </ContextMenu>
                                    </local:ImageToggleButton.Menu>
                                </local:ImageToggleButton>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </local:KeyTemplate.Triggers>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type PointCollection}">
            <StackPanel Margin="5">
                <Slider
                    Margin="0,0,0,5"
                    Maximum="{Data:Ancestor ActualWidth, StackPanel}"
                    Minimum="64"
                    Value="{Binding Zoom, ElementName=PointControl, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                <local:PointControl x:Name="PointControl"
                    HorizontalAlignment="Left"
                    Points="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    Zoom="128"/>
            </StackPanel>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type RadialGradientBrush}">
            <local:GradientBox 
                HorizontalAlignment="Stretch"
                IsEnabled="{Binding IsReadOnly, Converter={x:Static Converters:InverseBooleanConverter.Default}}"
                Width="Auto">
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static local:GradientBox.ValueProperty}" 
                        Converter="{x:Static Converters:RadialGradientBrushConverter.Default}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
            </local:GradientBox>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type SolidColorBrush}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:PropertyGrid.ColorTemplateKey}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type Thickness}">
            <local:ThicknessControl
                HorizontalAlignment="Stretch"
                IsEnabled="{Binding IsReadOnly, Converter={x:Static Converters:InverseBooleanConverter.Default}}">
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static local:ThicknessControl.ThicknessProperty}" 
                        Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
            </local:ThicknessControl>
        </local:KeyTemplate>

        <!-- ... System.Windows.Input -->
        <local:KeyTemplate DataType="{x:Type local:MemberModel}" DataKey="{x:Type SystemInput:ICommand}">
            <ContentPresenter x:Name="ContentPresenter" Content="{Binding}"/>
            <local:KeyTemplate.Triggers>
                <DataTrigger Binding="{Data:IsNullBinding Icon}" Value="True">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <Button x:Name="Button"
                                    Command="{Binding Value}" 
                                    Content="{Data:TranslateBinding DisplayName}"/>
                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding IsIndeterminate}" Value="True">
                                        <Setter TargetName="Button" Property="Command" Value="{Data:Ancestor ExecuteAllCommand, {x:Type local:PropertyGrid}}"/>
                                        <Setter TargetName="Button" Property="CommandParameter" Value="{Binding}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsIndeterminate}" Value="False">
                                        <Setter TargetName="Button" Property="Command" Value="{Binding Value}"/>
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Data:IsNullBinding Icon}" Value="False">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <local:ImageButton x:Name="ImageButton" Source="{Binding Icon}"/>
                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding IsIndeterminate}" Value="True">
                                        <Setter TargetName="ImageButton" Property="Command" Value="{Data:Ancestor ExecuteAllCommand, {x:Type local:PropertyGrid}}"/>
                                        <Setter TargetName="ImageButton" Property="CommandParameter" Value="{Binding}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsIndeterminate}" Value="False">
                                        <Setter TargetName="ImageButton" Property="Command" Value="{Binding Value}"/>
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </local:KeyTemplate.Triggers>
        </local:KeyTemplate>
    </local:MemberTemplateSelector>
</ResourceDictionary>