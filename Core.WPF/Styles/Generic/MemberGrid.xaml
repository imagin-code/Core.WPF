<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:e="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:l="clr-namespace:Imagin.Core.Local.Extensions"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Behavior="clr-namespace:Imagin.Core.Behavior"
    xmlns:Core="clr-namespace:Imagin.Core;assembly=Imagin.Core"
    xmlns:ComponentModel="clr-namespace:System.ComponentModel;assembly=System"
    xmlns:Conversion="clr-namespace:Imagin.Core.Conversion"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Input="clr-namespace:System.Windows.Input;assembly=System"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Markup="clr-namespace:Imagin.Core.Markup"
    xmlns:Reflection="clr-namespace:Imagin.Core.Reflection"
    xmlns:System="clr-namespace:System;assembly=mscorlib"
    xmlns:SystemInput="clr-namespace:System.Windows.Input;assembly=System">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=ComboBox}"/>
        <ResourceDictionary Source="{local:StyleKey Key=DataGrid}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Member}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Menu}"/>
        <ResourceDictionary Source="{local:StyleKey Key=TextBlock}"/>
        <ResourceDictionary Source="{local:StyleKey Key=ToolBar}"/>
    </ResourceDictionary.MergedDictionaries>
    <!-- ... -->

    <Style x:Key="{x:Static local:MemberGrid.DescriptionStyleKey}" TargetType="Border">
        <Setter Property="Background" Value="{local:ThemeKey Key=MemberGrid.Description.Background}"/>
        <Setter Property="BorderBrush" Value="{local:ThemeKey Key=MemberGrid.Description.Border}"/>
        <Setter Property="BorderThickness" Value="0,1,0,0"/>
        <Setter Property="MinHeight" Value="36"/>
        <Setter Property="TextElement.Foreground" Value="{local:ThemeKey Key=Text}"/>
        <Setter Property="Padding" Value="10"/>
    </Style>

    <Style x:Key="{x:Static local:MemberGrid.GridSplitterStyleKey}" TargetType="GridSplitter">
        <Setter Property="Background" Value="{local:ThemeKey ActualKey=GridSplitterBackground}"/>
        <Setter Property="Height" Value="4"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="ResizeBehavior" Value="PreviousAndNext" />
        <Setter Property="ResizeDirection" Value="Rows" />
        <Setter Property="Width" Value="Auto"/>
    </Style>

    <!-- ... -->

    <DataTemplate x:Key="{x:Static local:MemberGrid.NullTemplateKey}">
        <TextBlock Style="{Data:Ancestor MemberNullTextStyle, {x:Type local:MemberGrid}}"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.ReadOnlyTemplateKey}">
        <TextBox IsReadOnly="True"
            BorderThickness="0">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static TextBox.TextProperty}" StringFormat="{Binding StringFormat}"
                    Converter="{Binding Converter}" ConverterParameter="{Binding ConverterParameter}" Mode="OneWay" Path="Value" Source="{Binding}"/>
            </e:Interaction.Behaviors>
        </TextBox>
    </DataTemplate>

    <!-- ... -->

    <DataTemplate x:Key="{x:Static local:MemberGrid.ToolTipKey}">
        <StackPanel>
            <local:TitleLabel Step="6">
                <TextBlock x:Name="TextBlock0" TextTrimming="CharacterEllipsis"/>
            </local:TitleLabel>
            <Grid Opacity="0.5">
                <TextBlock x:Name="TextBlock1" TextWrapping="Wrap"
                    Visibility="{Data:VisibilityBinding Text, Relative=Self}"/>
                <TextBlock Text="{l:Loc NoDescription}" FontStyle="Italic"
                    Visibility="{Data:VisibilityBinding Text, ConverterParameter=1, ElementName=TextBlock1}"/>
            </Grid>
        </StackPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Data:IsBinding local:MemberCrumb}" Value="True">
                <Setter TargetName="TextBlock0" Property="Text" Value="{local:ObjectNameBinding Element.Value}"/>
                <Setter TargetName="TextBlock1" Property="Text" Value="{local:ObjectDescriptionBinding Element.Value}"/>
            </DataTrigger>
            <DataTrigger Binding="{Data:IsBinding Reflection:MemberModel}" Value="True">
                <Setter TargetName="TextBlock0" Property="Text" Value="{local:MemberNameBinding}"/>
                <Setter TargetName="TextBlock1" Property="Text" Value="{local:MemberDescriptionBinding}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- ... -->

    <Style x:Key="{x:Type local:MemberNamePresenter}" TargetType="{x:Type local:MemberNamePresenter}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type Reflection:MemberModel}">
                    <TextBlock x:Name="TextBlock"
                        Linq:XTextBlock.SplitText="{Binding DisplayName}"
                        Linq:XTextBlock.SplitTextMode="StartsWith"
                        TextTrimming="CharacterEllipsis"
                        VerticalAlignment="Center">
                        <Linq:XTextBlock.SplitTextStyle>
                            <Style TargetType="Run">
                                <Setter Property="Background" Value="{local:ThemeKey ActualKey=Accent}"/>
                                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=AccentForeground}"/>
                            </Style>
                        </Linq:XTextBlock.SplitTextStyle>
                    </TextBlock>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Data:Ancestor SearchName, local:MemberGrid}" Value="Category">
                            <Setter TargetName="TextBlock" Property="Linq:XTextBlock.SplitTextKey" Value="{x:Null}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Data:Ancestor SearchName, local:MemberGrid}" Value="Name">
                            <Setter TargetName="TextBlock" Property="Linq:XTextBlock.SplitTextKey" Value="{Data:Ancestor Search, local:MemberGrid}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Label}" Value="False">
                            <Setter TargetName="TextBlock" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type Input:ICommand}">
                            <Setter TargetName="TextBlock" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XElement.ToolTipTemplate" Value="{DynamicResource {x:Static local:MemberGrid.ToolTipKey}}"/>
        <Setter Property="ToolTip" Value="{Data:Self DataContext}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Label}" Value="False">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type Input:ICommand}">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type local:MemberValuePresenter}" TargetType="{x:Type local:MemberValuePresenter}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type Reflection:MemberModel}">
                    <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="*,Auto">
                        <Grid.Resources>
                            <Data:Reference x:Key="Member" 
                                Data="{Binding}"/>
                            <Data:Reference x:Key="MemberGrid"
                                Data="{Data:Ancestor local:MemberGrid}"/>
                        </Grid.Resources>
                        <ContentPresenter x:Name="ContentPresenter" Content="{Binding TemplateType}">
                            <ContentPresenter.ContentTemplate>
                                <DataTemplate>
                                    <ContentPresenter x:Name="ContentPresenter" Content="{Binding Data, Source={StaticResource Member}}" 
                                        ContentTemplateSelector="{StaticResource MemberTemplateSelector}"/>
                                    <DataTemplate.Triggers>
                                        <!-- Value = null -->
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Data.Value, Source={StaticResource Member}}" Value="{x:Null}"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:MemberGrid.NullTemplateKey}}"/>
                                            <Setter TargetName="ContentPresenter" Property="ContentTemplateSelector" Value="{x:Null}"/>
                                        </MultiDataTrigger>
                                        <!-- Converter != null & IsReadOnly -->
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Data:IsNullBinding Data.Converter, Source={StaticResource Member}}" Value="False"/>
                                                <Condition Binding="{Binding Data.IsReadOnly, Source={StaticResource Member}}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:MemberGrid.ReadOnlyTemplateKey}}"/>
                                            <Setter TargetName="ContentPresenter" Property="ContentTemplateSelector" Value="{x:Null}"/>
                                        </MultiDataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </ContentPresenter.ContentTemplate>
                        </ContentPresenter>
                        <local:ImageButton x:Name="ImageButton"
                            ButtonVisibility="Visible"
                            Margin="1,0,0,0"
                            ToolTip="{l:Loc Options}"
                            VerticalAlignment="Center"
                            Visibility="{Data:VisibilityBinding Assignable}">
                            <local:ImageButton.Menu>
                                <ContextMenu DataContext="{Data:Self PlacementTarget.DataContext}">
                                    <ContextMenu.Resources>
                                        <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                            <Style.Triggers>
                                                <Trigger Property="Tag" Value="{x:Null}">
                                                    <Setter Property="Command" Value="{Binding Data.MemberNewCommand, Source={StaticResource MemberGrid}}"/>
                                                </Trigger>
                                                <DataTrigger Binding="{Data:IsBinding Type={x:Type Core:BaseNamable}}" Value="True">
                                                    <Setter Property="CommandParameter">
                                                        <Setter.Value>
                                                            <Data:DoubleReference First="{Binding Data, Source={StaticResource Member}}" Second="{Binding Value}"/>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Setter Property="Header" Value="{Binding Name}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Data:IsBinding Type={x:Type System:Type}}" Value="True">
                                                    <Setter Property="CommandParameter">
                                                        <Setter.Value>
                                                            <Data:DoubleReference First="{Binding Data, Source={StaticResource Member}}" Second="{Binding}"/>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Setter Property="Header" Value="{Data:DisplayNameBinding}"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ContextMenu.Resources>
                                    <ContextMenu.ItemsSource>
                                        <CompositeCollection>
                                            <MenuItem Tag="0" Header="{l:Loc Default}"
                                                Command="{Binding Data.MemberDefaultCommand, Source={StaticResource MemberGrid}}"
                                                CommandParameter="{Binding}"/>
                                            <Separator Linq:XSeparator.Header="{l:Loc New}" Visibility="{Data:VisibilityBinding AssignableTypes.Count}"/>
                                            <CollectionContainer Collection="{Binding Data.AssignableTypes, Source={StaticResource Member}}"/>
                                            <Separator Linq:XSeparator.Header="{l:Loc New}" Visibility="{Data:VisibilityBinding AssignableValues.Count}"/>
                                            <CollectionContainer Collection="{Binding Data.AssignableValues, Source={StaticResource Member}}"/>
                                            <Separator/>
                                            <MenuItem Tag="0" Header="{l:Loc Reset}"
                                                Command="{Binding Data.MemberResetCommand, Source={StaticResource MemberGrid}}"
                                                CommandParameter="{Binding}"/>
                                            <MenuItem Tag="0" Header="{l:Loc Clear}"
                                                Command="{Binding Data.MemberClearCommand, Source={StaticResource MemberGrid}}"
                                                CommandParameter="{Binding}"
                                                Visibility="{Data:VisibilityBinding IsEnabled, Relative=Self}"/>
                                        </CompositeCollection>
                                    </ContextMenu.ItemsSource>
                                </ContextMenu>
                            </local:ImageButton.Menu>
                        </local:ImageButton>
                    </Grid>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsLocked}" Value="True">
                            <Setter TargetName="ImageButton" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsReadOnly}" Value="True">
                            <Setter TargetName="ImageButton" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type SystemInput:ICommand}">
                            <Setter TargetName="ImageButton" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <MultiDataTrigger >
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Data:IsNullBinding Icon}" Value="False"/>
                                <Condition Binding="{Binding StyleLevel}" Value="{x:Null}"/>
                                <Condition Binding="{Binding TemplateType}" Value="{x:Type System:Object}"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ImageButton" Property="Visibility" Value="Collapsed"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger >
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Data:IsNullBinding Icon}" Value="False"/>
                                <Condition Binding="{Binding Style}" Value="{x:Null}"/>
                                <Condition Binding="{Binding TemplateType}" Value="{x:Type System:Object}"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ImageButton" Property="Visibility" Value="Collapsed"/>
                        </MultiDataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IsEnabled" Value="False"/>
        <Setter Property="Linq:XElement.ToolTipTemplate" Value="{DynamicResource {x:Static local:MemberGrid.ToolTipKey}}"/>
        <Setter Property="ToolTip" Value="{Data:Self DataContext}"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsEnabled}" Value="True"/>
                    <Condition Binding="{Binding IsLocked}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="IsEnabled" Value="True"/>
            </MultiDataTrigger>
            <!-- ... -->
            <DataTrigger Binding="{Data:Ancestor Orientation, local:MemberGrid}" Value="Horizontal">
                <Setter Property="MaxWidth" Value="{Data:DoubleBinding MaximumWidth}"/>
                <Setter Property="MinWidth" Value="{Data:DoubleBinding MinimumWidth}"/>
                <Setter Property="Width" Value="{Data:DoubleBinding Width}"/>
            </DataTrigger>
            <DataTrigger Binding="{Data:Ancestor Orientation, local:MemberGrid}" Value="Vertical">
                <Setter Property="MaxHeight" Value="{Data:DoubleBinding MaximumHeight}"/>
                <Setter Property="MinHeight" Value="{Data:DoubleBinding MinimumHeight}"/>
                <Setter Property="Height" Value="{Data:DoubleBinding Height}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- ... -->

    <Style x:Key="ToolBarGroupStyle" TargetType="GroupItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupItem}">
                    <StackPanel Orientation="Horizontal">
                        <ItemsControl ItemsSource="{Binding Items}" Linq:XElement.RelativeTag="ToolBar" ItemTemplate="{Data:Self Tag.ItemTemplate}">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                        </ItemsControl>
                        <local:LineElement Orientation="Vertical"
                            Margin="0,2,5,2"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <DataTemplate x:Key="ToolBarItemTemplate">
        <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,Auto"
            Linq:XPanel.Spacing="0,0,5,0"
            Linq:XPanel.VerticalContentAlignment="Center">
            <local:MemberNamePresenter Content="{Binding}"/>
            <local:MemberValuePresenter Content="{Binding}"/>
        </Grid>
    </DataTemplate>

    <!-- ... -->

    <ControlTemplate x:Key="{x:Static local:MemberGrid.HorizontalTemplate}" TargetType="{x:Type local:MemberGrid}">
        <Grid Linq:XGrid.Columns="Auto,Auto,Auto,*,Auto">
            <Grid.Resources>
                <Data:Reference x:Key="MemberGrid"  Data="{Data:TemplatedParent}"/>
            </Grid.Resources>

            <!-- ... Header -->
            <Grid Linq:XGrid.Columns="Auto,Auto" Linq:XPanel.VerticalContentAlignment="Center"
                Margin="0,0,5,0">
                <Grid.Visibility>
                    <MultiBinding Converter="{x:Static Conversion:BooleanToVisibilityMultiConverter.Default}">
                        <Data:TemplatedParent Path="HeaderVisibility"/>
                        <Data:TemplatedParent Path="Source"
                            Converter="{x:Static Conversion:ObjectToVisibilityConverter.Default}"/>
                    </MultiBinding>
                </Grid.Visibility>
                <!-- ... Back -->
                <ContentPresenter Grid.Column="0"
                    Content="{Data:TemplatedParent BackCommand}"
                    ContentTemplate="{TemplateBinding BackButtonTemplate}"
                    Margin="0,-1,5,0"
                    Visibility="{Data:VisibilityBinding CanNavigateBack, Relative=TemplatedParent}"/>

                <!-- ... Path -->
                <ContentPresenter Grid.Column="1"
                    Content="{Data:TemplatedParent Route}"
                    ContentStringFormat="{TemplateBinding RouteStringFormat}"
                    ContentTemplate="{TemplateBinding RouteTemplate}"
                    ContentTemplateSelector="{TemplateBinding RouteTemplateSelector}"/>
            </Grid>

            <ComboBox Grid.Column="1"
                Linq:XItemsControl.GroupStyle="{Data:TemplatedParent Path=(Linq:XItemsControl.GroupStyle)}"
                Margin="0,0,0,10"
                SelectedItem="{Data:TemplatedParent ViewMember, Mode=TwoWay}">
                <ComboBox.ItemTemplate>
                    <DataTemplate DataType="{x:Type Reflection:MemberModel}">
                        <TextBlock Text="{Binding DisplayName}"/>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
                <ComboBox.Style>
                    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Data:TemplatedParent View}" Value="{x:Static local:MemberView.All}">
                                <Setter Property="ItemsSource" Value="{x:Null}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Data:TemplatedParent View}" Value="{x:Static local:MemberView.Single}">
                                <Setter Property="ItemsSource" Value="{Data:TemplatedParent ViewAll}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ComboBox.Style>
                <!-- XItemsControl static constructor does not affect this if visible initially; IsEmpty will always be true! No fix yet... -->
                <ComboBox.Visibility>
                    <MultiBinding Converter="{x:Static Conversion:BooleanToVisibilityMultiConverter.Default}" Mode="OneWay">
                        <Data:TemplatedParent Path="Source"
                            Converter="{x:Static Conversion:IsNullConverter.Default}"
                            ConverterParameter="1"/>
                        <Data:TemplatedParent Path="View"
                            Converter="{x:Static Conversion:ValueEqualsParameterConverter.Default}"
                            ConverterParameter="{x:Static local:MemberView.Single}"/>
                    </MultiBinding>
                </ComboBox.Visibility>
            </ComboBox>

            <!-- ... Featured (Above) -->
            <ContentPresenter Grid.Column="2"
                Content="{Data:TemplatedParent FeaturedAbove}"
                ContentTemplate="{TemplateBinding FeaturedTemplate}"
                Margin="0,0,5,0">
                <ContentPresenter.Visibility>
                    <MultiBinding Converter="{x:Static Conversion:BooleanToVisibilityMultiConverter.Default}" Mode="OneWay">
                        <Data:TemplatedParent Path="FeaturedAbove.IsEmpty"
                            Converter="{x:Static Conversion:InverseBooleanConverter.Default}"/>
                        <Data:TemplatedParent Path="FeaturedVisibility"/>
                    </MultiBinding>
                </ContentPresenter.Visibility>
            </ContentPresenter>

            <!-- ... Loader -->
            <ContentPresenter Grid.Column="2" Grid.ColumnSpan="3"
                ContentTemplate="{TemplateBinding LoaderTemplate}"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Visibility="{Data:TemplatedParent Loading, Converter={x:Static Conversion:BooleanToVisibilityConverter.Default}}"/>

            <!-- ... Content -->
            <local:EmptyPresenter Grid.Column="2" Grid.ColumnSpan="3"/>
            <ToolBar Grid.Column="3"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                ItemTemplate="{StaticResource ToolBarItemTemplate}"
                Padding="{TemplateBinding Padding}">
                <ToolBar.ItemContainerStyle>
                    <Style TargetType="FrameworkElement">
                        <Setter Property="Visibility" Value="{Data:VisibilityBinding IsVisible}"/>
                    </Style>
                </ToolBar.ItemContainerStyle>
                <ToolBar.GroupStyle>
                    <GroupStyle ContainerStyle="{StaticResource ToolBarGroupStyle}">
                        <GroupStyle.Panel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Horizontal"/>
                            </ItemsPanelTemplate>
                        </GroupStyle.Panel>
                    </GroupStyle>
                </ToolBar.GroupStyle>
                <ToolBar.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel Orientation="Horizontal"/>
                    </ItemsPanelTemplate>
                </ToolBar.ItemsPanel>
                <ToolBar.Style>
                    <Style TargetType="{x:Type ToolBar}" BasedOn="{StaticResource {x:Type ToolBar}}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Data:TemplatedParent View}" Value="All">
                                <Setter Property="ItemsSource" Value="{Data:TemplatedParent ViewAll}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Data:TemplatedParent View}" Value="Single">
                                <Setter Property="ItemsSource" Value="{Data:TemplatedParent ViewSingle}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ToolBar.Style>
            </ToolBar>

            <!-- ... Featured (Below) -->
            <ContentPresenter Grid.Column="4"
                Content="{Data:TemplatedParent FeaturedBelow}"
                ContentTemplate="{TemplateBinding FeaturedTemplate}"
                Margin="5,0,0,0">
                <ContentPresenter.Visibility>
                    <MultiBinding Converter="{x:Static Conversion:BooleanToVisibilityMultiConverter.Default}" Mode="OneWay">
                        <Data:TemplatedParent Path="FeaturedBelow.IsEmpty"
                            Converter="{x:Static Conversion:InverseBooleanConverter.Default}"/>
                        <Data:TemplatedParent Path="FeaturedVisibility"/>
                    </MultiBinding>
                </ContentPresenter.Visibility>
            </ContentPresenter>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{x:Static local:MemberGrid.VerticalTemplate}" TargetType="{x:Type local:MemberGrid}">
        <Border
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="{TemplateBinding Border.CornerRadius}">
            <Grid>
                <Grid.Resources>
                    <Data:Reference x:Key="MemberGrid" Data="{Data:TemplatedParent}"/>

                    <Style TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource {x:Type DataGridCell}}">
                        <Setter Property="Padding" Value="5,2"/>
                    </Style>
                </Grid.Resources>

                <!-- ... Loader -->
                <ContentPresenter
                    ContentTemplate="{TemplateBinding LoaderTemplate}"
                    Visibility="{Data:TemplatedParent Loading, Converter={x:Static Conversion:BooleanToVisibilityConverter.Default}}"/>

                <Grid Linq:XGrid.Rows="Auto,Auto,Auto,Auto,*,Auto"
                    Visibility="{Data:TemplatedParent Loading, Converter={x:Static Conversion:BooleanToVisibilityConverter.Default}, ConverterParameter=1}">

                    <!-- ... Header -->
                    <local:BottomBorder Grid.Row="0">
                        <local:BottomBorder.Visibility>
                            <MultiBinding Converter="{x:Static Conversion:BooleanToVisibilityMultiConverter.Default}" Mode="OneWay">
                                <Data:TemplatedParent Path="HeaderVisibility"/>
                                <Data:TemplatedParent Path="Source"
                                    Converter="{x:Static Conversion:ObjectToVisibilityConverter.Default}"/>
                            </MultiBinding>
                        </local:BottomBorder.Visibility>
                        <Grid Linq:XGrid.Columns="Auto,*,Auto,Auto"
                            Linq:XPanel.VerticalContentAlignment="Center"
                            Height="28"
                            Margin="0,2">
                            <local:ImageToggleButton Grid.Column="0"
                                IsChecked="{Data:VisibilityBinding SearchVisibility, Mode=TwoWay, Relative=TemplatedParent}"
                                Margin="5,0,2.5,0"
                                Source="{Markup:InternalImage Search.png}"
                                ToolTip="{l:Loc Search}"/>

                            <Grid Grid.Column="1" Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,*"
                                Visibility="{Data:TemplatedParent SearchVisibility, Converter={x:Static Conversion:InverseVisibilityConverter.Default}}">
                                <ContentPresenter
                                    Content="{Data:TemplatedParent BackCommand}"
                                    ContentTemplate="{TemplateBinding BackButtonTemplate}"
                                    Margin="5,-1,0,0"
                                    Visibility="{Data:VisibilityBinding CanNavigateBack, Relative=TemplatedParent}"/>
                                <ContentPresenter
                                    Content="{Data:TemplatedParent Route}"
                                    ContentStringFormat="{TemplateBinding RouteStringFormat}"
                                    ContentTemplate="{TemplateBinding RouteTemplate}"
                                    ContentTemplateSelector="{TemplateBinding RouteTemplateSelector}"
                                    Margin="2,0,5,0"/>
                            </Grid>
                            <Grid Grid.Column="1" Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,*"
                                Linq:XPanel.VerticalContentAlignment="Center"
                                Margin="1,0"
                                Visibility="{Data:TemplatedParent SearchVisibility}">
                                <!-- ... Search -->
                                <ComboBox
                                    ItemsSource="{Markup:Enumerate local:MemberSearchName}"
                                    Margin="0,0,2.5,0"
                                    SelectedItem="{Data:TemplatedParent SearchName, Mode=TwoWay}"
                                    ToolTip="{l:Loc Search}">
                                    <ComboBox.ItemTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Data:TranslateBinding}"/>
                                        </DataTemplate>
                                    </ComboBox.ItemTemplate>
                                </ComboBox>
                                <TextBox
                                    Background="Transparent"
                                    BorderThickness="0"
                                    Linq:XTextBox.ClearButtonVisibility="Visible"
                                    Linq:XTextBoxBase.Placeholder="{l:Loc Search}"
                                    Padding="0"
                                    Text="{Data:TemplatedParent Search, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                    ToolTip="{l:Loc Search}"/>
                            </Grid>

                            <!-- ... Buttons (Custom) -->
                            <ItemsControl Grid.Column="2" ItemsSource="{TemplateBinding HeaderButtons}">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Horizontal"/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <ContentPresenter Content="{Binding}"/>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>

                            <!-- ... Options -->
                            <local:ImageToggleButton Grid.Column="3"
                                Margin="1,0"
                                Source="{Markup:InternalImage TriangleDown.png}"
                                ToolTip="{l:Loc Options}"
                                Visibility="{TemplateBinding OptionsButtonVisibility}">
                                <local:ImageToggleButton.Menu>
                                    <ContextMenu DataContext="{Binding Data, Source={StaticResource MemberGrid}}">
                                        <ContextMenu.Resources>
                                            <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Data:TypeBinding}" Value="{x:Type local:MemberView}">
                                                        <Setter Property="Command" Value="{Binding Data.ViewCommand, Source={StaticResource MemberGrid}}"/>
                                                        <Setter Property="CommandParameter" Value="{Binding}"/>
                                                        <Setter Property="Header" Value="{Data:TranslateBinding}"/>
                                                        <Setter Property="IsCheckable" Value="True"/>
                                                        <Setter Property="IsChecked">
                                                            <Setter.Value>
                                                                <MultiBinding Converter="{x:Static Conversion:ValueEqualsParameterMultiConverter.Default}" Mode="OneWay">
                                                                    <Binding Path="Data.View" Source="{StaticResource MemberGrid}"/>
                                                                    <Binding Path="."/>
                                                                </MultiBinding>
                                                            </Setter.Value>
                                                        </Setter>
                                                        <Setter Property="StaysOpenOnClick" Value="True"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </ContextMenu.Resources>
                                        <ContextMenu.ItemsSource>
                                            <CompositeCollection>
                                                <Separator Linq:XSeparator.Header="Filter"/>
                                                <MenuItem Header="{l:Loc Group}" 
                                                    Icon="{Markup:InternalImage Group.png}"
                                                    InputGestureText="{Binding Data.GroupName, Source={StaticResource MemberGrid}}">
                                                    <Linq:XMenuItem.InputGestureTextTemplate>
                                                        <DataTemplate>
                                                            <local:AccentLabel Content="{Binding}" FontStyle="Italic" HorizontalAlignment="Left"/>
                                                        </DataTemplate>
                                                    </Linq:XMenuItem.InputGestureTextTemplate>
                                                    <MenuItem.ItemsSource>
                                                        <CompositeCollection>
                                                            <MenuItem Header="{l:Loc Collapse}"
                                                                Command="{Binding Data.CollapseGroupsCommand, Source={StaticResource MemberGrid}}"/>
                                                            <MenuItem Header="{l:Loc Expand}"
                                                                Command="{Binding Data.ExpandGroupsCommand, Source={StaticResource MemberGrid}}"/>
                                                            <Separator/> 
                                                            <CollectionContainer Collection="{Markup:Enumerate local:MemberGroupName}"/>
                                                            <Separator/>
                                                            <CollectionContainer Collection="{Markup:Enumerate ComponentModel:ListSortDirection}"/>
                                                        </CompositeCollection>
                                                    </MenuItem.ItemsSource>
                                                    <MenuItem.Resources>
                                                        <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                                            <Setter Property="CommandParameter" Value="{Binding}"/>
                                                            <Setter Property="Header" Value="{Data:TranslateBinding}"/>
                                                            <Setter Property="StaysOpenOnClick" Value="True"/>
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Data:TypeBinding}" Value="{x:Type local:MemberGroupName}">
                                                                    <Setter Property="Command" Value="{Binding Data.GroupCommand, Source={StaticResource MemberGrid}}"/>
                                                                    <Setter Property="IsChecked">
                                                                        <Setter.Value>
                                                                            <MultiBinding Converter="{x:Static Conversion:ValueEqualsParameterMultiConverter.Default}" Mode="OneWay">
                                                                                <Binding Path="Data.GroupName" Source="{StaticResource MemberGrid}"/>
                                                                                <Binding Path="."/>
                                                                            </MultiBinding>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Data:TypeBinding}" Value="{x:Type ComponentModel:ListSortDirection}">
                                                                    <Setter Property="IsChecked">
                                                                        <Setter.Value>
                                                                            <MultiBinding Converter="{x:Static Conversion:ValueEqualsParameterMultiConverter.Default}" Mode="OneWay">
                                                                                <Binding Path="Data.GroupDirection" Source="{StaticResource MemberGrid}"/>
                                                                                <Binding Path="."/>
                                                                            </MultiBinding>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </MenuItem.Resources>
                                                </MenuItem>
                                                <MenuItem Header="{l:Loc Sort}"
                                                    Icon="{Markup:InternalImage Sort.png}"
                                                    InputGestureText="{Binding Data.SortName, Source={StaticResource MemberGrid}}">
                                                    <Linq:XMenuItem.InputGestureTextTemplate>
                                                        <DataTemplate>
                                                            <local:AccentLabel Content="{Binding}" FontStyle="Italic" HorizontalAlignment="Left"/>
                                                        </DataTemplate>
                                                    </Linq:XMenuItem.InputGestureTextTemplate>
                                                    <MenuItem.ItemsSource>
                                                        <CompositeCollection>
                                                            <CollectionContainer Collection="{Markup:Enumerate local:MemberSortName}"/>
                                                            <Separator/>
                                                            <CollectionContainer Collection="{Markup:Enumerate ComponentModel:ListSortDirection}"/>
                                                        </CompositeCollection>
                                                    </MenuItem.ItemsSource>
                                                    <MenuItem.Resources>
                                                        <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                                            <Setter Property="CommandParameter" Value="{Binding}"/>
                                                            <Setter Property="Header" Value="{Data:TranslateBinding}"/>
                                                            <Setter Property="StaysOpenOnClick" Value="True"/>
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Data:TypeBinding}" Value="{x:Type local:MemberSortName}">
                                                                    <Setter Property="Command" Value="{Binding Data.SortCommand, Source={StaticResource MemberGrid}}"/>
                                                                    <Setter Property="IsChecked">
                                                                        <Setter.Value>
                                                                            <MultiBinding Converter="{x:Static Conversion:ValueEqualsParameterMultiConverter.Default}" Mode="OneWay">
                                                                                <Binding Path="Data.SortName" Source="{StaticResource MemberGrid}"/>
                                                                                <Binding Path="."/>
                                                                            </MultiBinding>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Data:TypeBinding}" Value="{x:Type ComponentModel:ListSortDirection}">
                                                                    <Setter Property="IsChecked">
                                                                        <Setter.Value>
                                                                            <MultiBinding Converter="{x:Static Conversion:ValueEqualsParameterMultiConverter.Default}" Mode="OneWay">
                                                                                <Binding Path="Data.SortDirection" Source="{StaticResource MemberGrid}"/>
                                                                                <Binding Path="."/>
                                                                            </MultiBinding>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </MenuItem.Resources>
                                                </MenuItem>
                                                <Separator Linq:XSeparator.Header="View"/>
                                                <MenuItem Header="{l:Loc Description}"
                                                    IsCheckable="True"
                                                    IsChecked="{Data:VisibilityBinding DescriptionVisibility, Mode=TwoWay}"/>
                                                <Separator/>
                                                <CollectionContainer Collection="{Markup:Enumerate local:MemberView}"/>
                                            </CompositeCollection>
                                        </ContextMenu.ItemsSource>
                                    </ContextMenu>
                                </local:ImageToggleButton.Menu>
                            </local:ImageToggleButton>
                        </Grid>
                    </local:BottomBorder>

                    <!-- ... Tools -->
                    <local:BottomBorder Grid.Row="1">
                        <local:BottomBorder.Visibility>
                            <MultiBinding Converter="{x:Static Conversion:BooleanToVisibilityMultiConverter.Default}" Mode="OneWay">
                                <Data:VisibilityBinding Path="Tools.Count" Relative="TemplatedParent"/>
                                <Data:TemplatedParent Path="ToolVisibility"/>
                            </MultiBinding>
                        </local:BottomBorder.Visibility>
                        <ToolBar
                            BorderThickness="0"
                            ItemsSource="{Data:TemplatedParent ViewTools}"
                            ItemTemplate="{StaticResource ToolBarItemTemplate}"
                            Margin="5">
                            <ToolBar.GroupStyle>
                                <GroupStyle ContainerStyle="{StaticResource ToolBarGroupStyle}">
                                    <GroupStyle.Panel>
                                        <ItemsPanelTemplate>
                                            <StackPanel Orientation="Horizontal"/>
                                        </ItemsPanelTemplate>
                                    </GroupStyle.Panel>
                                </GroupStyle>
                            </ToolBar.GroupStyle>
                            <ToolBar.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </ToolBar.ItemsPanel>
                        </ToolBar>
                    </local:BottomBorder>

                    <!-- ... Featured (Above) -->
                    <local:BottomBorder Grid.Row="2">
                        <local:BottomBorder.Visibility>
                            <MultiBinding Converter="{x:Static Conversion:BooleanToVisibilityMultiConverter.Default}" Mode="OneWay">
                                <Data:TemplatedParent Path="FeaturedAbove.IsEmpty"
                                    Converter="{x:Static Conversion:InverseBooleanConverter.Default}"/>
                                <Data:TemplatedParent Path="FeaturedVisibility"/>
                            </MultiBinding>
                        </local:BottomBorder.Visibility>
                        <ContentPresenter
                            Content="{Data:TemplatedParent FeaturedAbove}"
                            ContentTemplate="{TemplateBinding FeaturedTemplate}"/>
                    </local:BottomBorder>

                    <!-- ... -->
                    <ComboBox Grid.Row="3"
                        Linq:XItemsControl.GroupsItself="True"
                        Margin="5"
                        SelectedItem="{Data:TemplatedParent ViewMember, Mode=TwoWay}">
                        <Linq:XItemsControl.GroupStyle>
                            <GroupStyle ContainerStyle="{StaticResource {x:Type GroupItem}}">
                                <GroupStyle.Panel>
                                    <ItemsPanelTemplate>
                                        <StackPanel/>
                                    </ItemsPanelTemplate>
                                </GroupStyle.Panel>
                            </GroupStyle>
                        </Linq:XItemsControl.GroupStyle>
                        <ComboBox.ItemTemplate>
                            <DataTemplate DataType="{x:Type Reflection:MemberModel}">
                                <TextBlock Text="{Binding DisplayName}"/>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                        <ComboBox.Style>
                            <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Data:TemplatedParent View}" Value="{x:Static local:MemberView.All}">
                                        <Setter Property="ItemsSource" Value="{x:Null}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Data:TemplatedParent View}" Value="{x:Static local:MemberView.Single}">
                                        <Setter Property="ItemsSource" Value="{Data:TemplatedParent ViewAll}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ComboBox.Style>
                        <!-- XItemsControl static constructor does not affect this if visible initially; IsEmpty will always be true! No fix yet... -->
                        <ComboBox.Visibility>
                            <MultiBinding Converter="{x:Static Conversion:BooleanToVisibilityMultiConverter.Default}" Mode="OneWay">
                                <Data:TemplatedParent Path="Source"
                                    Converter="{x:Static Conversion:IsNullConverter.Default}"
                                    ConverterParameter="1"/>
                                <Data:TemplatedParent Path="View"
                                    Converter="{x:Static Conversion:ValueEqualsParameterConverter.Default}"
                                    ConverterParameter="{x:Static local:MemberView.Single}"/>
                            </MultiBinding>
                        </ComboBox.Visibility>
                    </ComboBox>

                    <!-- ... Content -->
                    <local:EmptyPresenter Grid.Row="4"/>
                    <ScrollViewer Grid.Row="4" Linq:XElement.Name="{x:Static local:MemberGrid.ScrollViewerKey}"
                        Focusable="False"
                        Linq:XScrollViewer.Overlap="True">
                        <ItemsPresenter 
                            Margin="{TemplateBinding Padding}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </ScrollViewer>

                    <!-- ... Description -->
                    <Grid Grid.Row="4">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="{Data:TemplatedParent DescriptionHeight, Mode=TwoWay}"/>
                        </Grid.RowDefinitions>
                        <GridSplitter Grid.Row="1"
                            Style="{StaticResource {x:Static local:MemberGrid.GridSplitterStyleKey}}">
                            <GridSplitter.Visibility>
                                <MultiBinding Converter="{x:Static Conversion:BooleanToVisibilityMultiConverter.Default}" Mode="OneWay">
                                    <Data:TemplatedParent Path="CanResizeDescription"/>
                                    <Data:TemplatedParent Path="DescriptionVisibility"/>
                                    <Data:TemplatedParent Path="ActiveMember" Converter="{x:Static Conversion:IsNullConverter.Default}" ConverterParameter="1"/>
                                </MultiBinding>
                            </GridSplitter.Visibility>
                        </GridSplitter>
                        <Border Grid.Row="2"
                            Style="{StaticResource {x:Static local:MemberGrid.DescriptionStyleKey}}">
                            <Border.Visibility>
                                <MultiBinding Converter="{x:Static Conversion:BooleanToVisibilityMultiConverter.Default}" Mode="OneWay">
                                    <Data:TemplatedParent Path="DescriptionVisibility"/>
                                    <Data:TemplatedParent Path="ActiveMember" Converter="{x:Static Conversion:IsNullConverter.Default}" ConverterParameter="1"/>
                                </MultiBinding>
                            </Border.Visibility>
                            <ContentPresenter
                                Content="{Data:TemplatedParent ActiveMember}"
                                ContentTemplate="{Data:TemplatedParent DescriptionTemplate}"
                                ContentTemplateSelector="{Data:TemplatedParent DescriptionTemplateSelector}"/>
                        </Border>
                    </Grid>

                    <!-- ... Featured (Below) -->
                    <local:TopBorder Grid.Row="5">
                        <local:TopBorder.Visibility>
                            <MultiBinding Converter="{x:Static Conversion:BooleanToVisibilityMultiConverter.Default}" Mode="OneWay">
                                <Data:TemplatedParent Path="FeaturedBelow.IsEmpty"
                                    Converter="{x:Static Conversion:InverseBooleanConverter.Default}"/>
                                <Data:TemplatedParent Path="FeaturedVisibility"/>
                            </MultiBinding>
                        </local:TopBorder.Visibility>
                        <ContentPresenter
                            Content="{Data:TemplatedParent FeaturedBelow}"
                            ContentTemplate="{TemplateBinding FeaturedTemplate}"/>
                    </local:TopBorder>
                </Grid>
            </Grid>
        </Border>
    </ControlTemplate>

    <!-- ... -->

    <Style x:Key="{x:Type local:MemberGrid}" TargetType="{x:Type local:MemberGrid}" BasedOn="{StaticResource {x:Type DataGrid}}">
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BackButtonTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type ICommand}">
                    <local:ImageButton
                        Command="{Binding}"
                        Source="{Markup:InternalImage ArrowLeftRound.png}"
                        ToolTip="{l:Loc Back}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="{local:ThemeKey Key=Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CanResizeDescription" Value="True"/>
        <Setter Property="CanUserAddRows" Value="False"/>
        <Setter Property="CanUserDeleteRows" Value="False"/>
        <Setter Property="CanUserReorderColumns" Value="False"/>
        <Setter Property="CanUserResizeColumns" Value="True"/>
        <Setter Property="CanUserResizeRows" Value="False"/>
        <Setter Property="CellStyle">
            <Setter.Value>
                <Style TargetType="DataGridCell" BasedOn="{StaticResource {x:Type DataGridCell}}">
                    <Setter Property="Padding" Value="2,4"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="DefaultCategoryName" Value="{l:Loc General}"/>
        <Setter Property="DescriptionTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid Linq:XGrid.Rows="Auto,Auto">
                        <TextBlock 
                            FontWeight="Bold"
                            Margin="0,0,0,7"
                            Text="{Binding DisplayName, Converter={x:Static Conversion:CamelCaseConverter.Default}, Mode=OneWay}"
                            TextTrimming="CharacterEllipsis"
                            ToolTip="{Data:Self Text}"/>
                        <TextBlock 
                            Grid.Row="1"
                            Text="{Binding Description, Mode=OneWay}"
                            TextTrimming="CharacterEllipsis"
                            TextWrapping="Wrap"
                            ToolTip="{Data:Self Text}"/>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="DescriptionVisibility" Value="Collapsed"/>
        <Setter Property="EnableColumnVirtualization" Value="True"/>
        <Setter Property="EnableRowVirtualization" Value="True"/>
        <Setter Property="FeaturedRepeats" Value="False"/>
        <Setter Property="Foreground" Value="{local:ThemeKey Key=Text}"/>
        <Setter Property="HeaderVisibility" Value="Visible"/>
        <Setter Property="HeadersVisibility" Value="None"/>
        <!-- ... -->
        <Setter Property="MemberNullText" Value="{l:Loc Prefix=(, Key=Null, Suffix=), Lower=True}"/>
        <Setter Property="MemberNullTextStyle">
            <Setter.Value>
                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
                    <Setter Property="FontStyle" Value="Italic"/>
                    <Setter Property="HorizontalAlignment" Value="Left"/>
                    <Setter Property="Margin" Value="0,5"/>
                    <Setter Property="Text" Value="{Data:Ancestor MemberNullText, {x:Type local:MemberGrid}}"/>
                    <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
                </Style>
            </Setter.Value>
        </Setter>
        <!-- ... -->
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type DataGridRow}">
                    <Setter Property="BorderThickness" Value="0" />
                    <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=DataGridRowForeground}" />
                    <Setter Property="Linq:XElement.FadeIn" Value="True" />
                    <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=DataGridRowForeground}" />
                    <Setter Property="OverridesDefaultStyle" Value="True" />
                    <Setter Property="SnapsToDevicePixels" Value="True" />
                    <Setter Property="Template" Value="{StaticResource {x:Static Linq:XDataGridRow.TemplateKey}}"/>
                    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
                    <Setter Property="ValidationErrorTemplate" Value="{StaticResource {x:Static Linq:XDataGridRow.ValidationErrorTemplateKey}}"/>
                    <Setter Property="Visibility">
                        <Setter.Value>
                            <MultiBinding Converter="{x:Static local:MemberVisibilityConverter.Default}">
                                <Binding Path="."/>
                                <Binding Path="IsVisible"/>
                                <Data:Ancestor Path="SearchName" 
                                    Type="{x:Type local:MemberGrid}"/>
                                <Data:Ancestor Path="Search"
                                    Type="{x:Type local:MemberGrid}"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="Selector.IsSelectionActive" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=DataGridRowForeground}" />
                            <Setter Property="Linq:XDataGridRow.SelectionVisibility" Value="Visible" />
                            <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=DataGridRowForeground}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="Selector.IsSelectionActive" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=DataGridRowForeground}" />
                            <Setter Property="Linq:XDataGridRow.SelectionVisibility" Value="Visible" />
                            <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=DataGridRowForeground}" />
                        </MultiTrigger>
                        <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                            <Setter Property="Background" Value="{local:ThemeKey ActualKey=DataGridRowEvenBackground}"/>
                        </Trigger>
                        <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                            <Setter Property="Background" Value="{local:ThemeKey ActualKey=DataGridRowOddBackground}"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XItemsControl.CanDragSelect" Value="False"/>
        <Setter Property="Linq:XItemsControl.GroupsItself" Value="True"/>
        <Setter Property="Linq:XItemsControl.GroupStyle">
            <Setter.Value>
                <GroupStyle>
                    <GroupStyle.ContainerStyle>
                        <Style TargetType="GroupItem">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type GroupItem}">
                                        <Expander IsExpanded="True"
                                            HorizontalAlignment="Stretch">
                                            <Expander.Header>
                                                <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,Auto,*">
                                                    <ContentPresenter Content="{Binding Name}">
                                                        <ContentPresenter.ContentTemplate>
                                                            <DataTemplate>
                                                                <TextBlock x:Name="TextBlock" FontSize="12" 
                                                                    Foreground="{local:ThemeKey ActualKey=AccentLight}"
                                                                    Linq:XTextBlock.SplitText="{Binding}"
                                                                    Linq:XTextBlock.SplitTextMode="StartsWith">
                                                                    <Linq:XTextBlock.SplitTextStyle>
                                                                        <Style TargetType="Run">
                                                                            <Setter Property="Background" Value="{local:ThemeKey ActualKey=Accent}"/>
                                                                            <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=AccentForeground}"/>
                                                                        </Style>
                                                                    </Linq:XTextBlock.SplitTextStyle>
                                                                </TextBlock>
                                                                <DataTemplate.Triggers>
                                                                    <DataTrigger Binding="{Data:Ancestor SearchName, local:MemberGrid}" Value="Category">
                                                                        <Setter TargetName="TextBlock" Property="Linq:XTextBlock.SplitTextKey" Value="{Data:Ancestor Search, local:MemberGrid}" />
                                                                    </DataTrigger>
                                                                    <DataTrigger Binding="{Data:Ancestor SearchName, local:MemberGrid}" Value="Name">
                                                                        <Setter TargetName="TextBlock" Property="Linq:XTextBlock.SplitTextKey" Value="{x:Null}" />
                                                                    </DataTrigger>
                                                                </DataTemplate.Triggers>
                                                            </DataTemplate>
                                                        </ContentPresenter.ContentTemplate>
                                                    </ContentPresenter>
                                                    <TextBlock FontSize="12" Text="{Binding ItemCount, Mode=OneWay, StringFormat= ({0})}"
                                                        Foreground="{local:ThemeKey ActualKey=Text}"
                                                        Margin="1.5,0,0,0"/>
                                                    <local:LineElement
                                                        Margin="5,0,0,0"
                                                        Orientation="Horizontal"/>
                                                </Grid>
                                            </Expander.Header>
                                            <ItemsPresenter/>
                                        </Expander>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </GroupStyle.ContainerStyle>
                    <GroupStyle.Panel>
                        <ItemsPanelTemplate>
                            <DataGridRowsPresenter/>
                        </ItemsPanelTemplate>
                    </GroupStyle.Panel>
                </GroupStyle>
            </Setter.Value>
        </Setter>
        <Setter Property="LoaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:ProgressCircle
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="NameColumnHeader" Value="{l:Loc Name}"/>
        <Setter Property="NameColumnVisibility" Value="Visible"/>
        <Setter Property="NameColumnWidth" Value="3*"/>
        <Setter Property="NameTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type Reflection:MemberModel}">
                    <local:MemberNamePresenter Content="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="RouteTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ToolBar ItemsSource="{Binding}" 
                        BorderThickness="0"
                        Padding="0">
                        <ToolBar.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Horizontal"/>
                            </ItemsPanelTemplate>
                        </ToolBar.ItemsPanel>
                        <ToolBar.ItemTemplate>
                            <DataTemplate DataType="{x:Type Reflection:MemberPathElement}">
                                <local:ImageButton x:Name="Button"
                                    ButtonVisibility="Collapsed"
                                    Command="{Data:Ancestor EditCommand, {x:Type local:MemberGrid}}"
                                    CommandParameter="{Binding}"
                                    Linq:XElement.ToolTipTemplate="{DynamicResource {x:Static local:MemberGrid.ToolTipKey}}"
                                    Margin="0,0,2,0"
                                    ToolTip="{Binding}">
                                    <local:ImageButton.Menu>
                                        <ContextMenu/>
                                    </local:ImageButton.Menu>
                                    <StackPanel Orientation="Horizontal">
                                        <ContentPresenter x:Name="ContentPresenter0" Content="{Binding}">
                                            <ContentPresenter.ContentTemplate>
                                                <DataTemplate>
                                                    <local:ImageElement
                                                        Margin="0,0,5,0"
                                                        Source="{Data:IconBinding Value}"/>
                                                </DataTemplate>
                                            </ContentPresenter.ContentTemplate>
                                        </ContentPresenter>
                                        <ContentPresenter x:Name="ContentPresenter1" Content="{Binding}"/>
                                    </StackPanel>
                                </local:ImageButton>
                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Data:IconBinding Element.Value}" Value="{x:Null}">
                                        <Setter TargetName="ContentPresenter0" Property="ContentTemplate" Value="{Markup:EmptyTemplate}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Data:TypeBinding}" Value="{x:Type Reflection:MemberPathChild}">
                                        <Setter TargetName="ContentPresenter1" Property="ContentTemplate">
                                            <Setter.Value>
                                                <DataTemplate DataType="{x:Type Reflection:MemberPathChild}">
                                                    <TextBlock Text="{Binding Name}"/>
                                                </DataTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Data:TypeBinding}" Value="{x:Type Reflection:MemberPathItem}">
                                        <Setter TargetName="ContentPresenter1" Property="ContentTemplate">
                                            <Setter.Value>
                                                <DataTemplate DataType="{x:Type Reflection:MemberPathItem}">
                                                    <TextBlock Text="{Data:DisplayNameBinding Value}"/>
                                                </DataTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Data:TypeBinding}" Value="{x:Type Reflection:MemberPathSource}">
                                        <Setter TargetName="ContentPresenter1" Property="ContentTemplate">
                                            <Setter.Value>
                                                <DataTemplate DataType="{x:Type Reflection:MemberPathSource}">
                                                    <TextBlock Text="{Data:DisplayNameBinding Value}"/>
                                                </DataTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </ToolBar.ItemTemplate>
                    </ToolBar>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="SelectionMode" Value="Single"/>
        <Setter Property="ValueColumnHeader" Value="{l:Loc Value}"/>
        <Setter Property="ValueColumnWidth" Value="7*"/>
        <Setter Property="ValueTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type Reflection:MemberModel}">
                    <local:MemberValuePresenter Content="{Binding}"
                        VerticalAlignment="Center"/>
                </DataTemplate>
            </Setter.Value>
        </Setter> 
        <Setter Property="VirtualizingPanel.IsContainerVirtualizable" Value="True"/>
        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True"/>
        <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="CellStyle">
                    <Setter.Value>
                        <Style TargetType="DataGridCell" BasedOn="{StaticResource {x:Type DataGridCell}}">
                            <Setter Property="Padding" Value="2,0"/>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="FeaturedTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <ItemsControl
                                Linq:XItemsControl.SortName="Index"
                                Linq:XItemsControl.SortDirection="Ascending"
                                ItemsSource="{Binding}">
                                <ItemsControl.ItemContainerStyle>
                                    <Style TargetType="FrameworkElement">
                                        <Setter Property="Visibility" Value="{Data:VisibilityBinding IsVisible}"/>
                                    </Style>
                                </ItemsControl.ItemContainerStyle>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate DataType="{x:Type Reflection:MemberModel}">
                                        <Grid Linq:XGrid.Columns="Auto,*"
                                            Linq:XPanel.VerticalContentAlignment="Center"
                                            Margin="2,0">
                                            <local:MemberNamePresenter Grid.Column="0"
                                                Content="{Binding}"
                                                Margin="0,0,10,0"/>
                                            <local:MemberValuePresenter Grid.Column="1"
                                                Content="{Binding}"/>
                                        </Grid>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Horizontal"/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Linq:XItemsControl.EmptyTemplate" Value="{StaticResource {x:Static Linq:XItemsControl.EmptyHorizontalTemplateKey}}"/>
                <Setter Property="LoaderTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <local:ProgressCircle Height="20" Width="20"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template" Value="{StaticResource {x:Static local:MemberGrid.HorizontalTemplate}}"/>
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="FeaturedTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <ItemsControl
                                Linq:XItemsControl.SortName="Index"
                                Linq:XItemsControl.SortDirection="Ascending"
                                ItemsSource="{Binding}"
                                Margin="2,2,2,0">
                                <ItemsControl.ItemContainerStyle>
                                    <Style TargetType="FrameworkElement">
                                        <Setter Property="Visibility" Value="{Data:VisibilityBinding IsVisible}"/>
                                    </Style>
                                </ItemsControl.ItemContainerStyle>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate DataType="{x:Type Reflection:MemberModel}">
                                        <Grid Linq:XGrid.Columns="Auto,*"
                                            Linq:XPanel.VerticalContentAlignment="Center"
                                            Margin="0,0,0,2">
                                            <local:MemberNamePresenter Grid.Column="0"
                                                Content="{Binding}"
                                                Margin="3,0,10,0"/>
                                            <local:MemberValuePresenter Grid.Column="1"
                                                Content="{Binding}"/>
                                        </Grid>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template" Value="{StaticResource {x:Static local:MemberGrid.VerticalTemplate}}"/>
            </Trigger>
            <Trigger Property="Source" Value="{x:Null}">
                <Setter Property="IsEnabled" Value="False"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>