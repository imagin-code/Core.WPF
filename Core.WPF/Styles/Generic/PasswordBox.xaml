<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:l="clr-namespace:Imagin.Core.Local.Extensions"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Converters="clr-namespace:Imagin.Core.Converters"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Markup="clr-namespace:Imagin.Core.Markup"
    xmlns:Text="clr-namespace:Imagin.Core.Text;assembly=Imagin.Core">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=Control}"/>
    </ResourceDictionary.MergedDictionaries>
    <Style x:Key="{x:Type PasswordBox}" TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="Background" Value="{local:ThemeKey Key=TextBox.Background}" />
        <Setter Property="BorderBrush" Value="{local:ThemeKey Key=TextBox.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CaretBrush" Value="{local:ThemeKey Key=TextBox.Caret}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="FontFamily" Value="{x:Static SystemFonts.MessageFontFamily}"/>
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Foreground" Value="{local:ThemeKey Key=Text}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="IsInactiveSelectionHighlightEnabled" Value="True" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="Border.CornerRadius" Value="0" />
        <Setter Property="Linq:XPasswordBox.GenerateButtonTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:ImageButton DataContext="{Data:Ancestor PasswordBox}"
                        Command="{x:Static Linq:XPasswordBox.GenerateCommand}"
                        CommandTarget="{Binding}"
                        Focusable="False"
                        Margin="0,0,5,0"
                        Source="{Markup:InternalImage Refresh.png}"
                        VerticalAlignment="Center"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XPasswordBox.GenerateButtonVisibility" Value="Visible"/>
        <Setter Property="Linq:XPasswordBox.GenerateCharacters" Value="{x:Static Text:Characters.LettersAndNumbers}" />
        <Setter Property="Linq:XPasswordBox.GenerateDistinct" Value="True" />
        <Setter Property="Linq:XPasswordBox.GenerateLength" Value="8,16" />
        <Setter Property="Linq:XPasswordBox.Mask" Value="True" />
        <Setter Property="Linq:XPasswordBox.Placeholder" Value="{l:Loc Password}" />
        <Setter Property="Linq:XPasswordBox.PlaceholderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock
                        Opacity="0.4"
                        Text="{Binding}"
                        TextTrimming="CharacterEllipsis"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XPasswordBox.TextTrimming" Value="CharacterEllipsis"/>
        <Setter Property="Linq:XPasswordBox.ToggleButtonTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:ImageToggleButton
                        Focusable="False"
                        IsChecked="{Data:Ancestor PasswordBox, Path=(Linq:XPasswordBox.Mask), Converter={x:Static Converters:InverseBooleanConverter.Default}, Mode=TwoWay}"  
                        Margin="0,0,5,0"
                        Source="{Markup:InternalImage Toggle.png}"
                        VerticalAlignment="Center"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XPasswordBox.ToggleButtonVisibility" Value="Visible"/>
        <Setter Property="Linq:XPasswordBox.ToggleTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock
                        Text="{Binding}"
                        TextTrimming="CharacterEllipsis"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=Text}"/>
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="PasswordChar" Value="●" />
        <Setter Property="SelectionBrush" Value="{local:ThemeKey Key=TextBox.Selection}" />
        <Setter Property="SelectionOpacity" Value="0.4" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}">
                        <Grid Linq:XGrid.Columns="*,Auto,Auto">
                            <ContentPresenter 
                                Content="{Data:TemplatedParent Path=(Linq:XPasswordBox.Placeholder)}" 
                                ContentTemplate="{Data:TemplatedParent Path=(Linq:XPasswordBox.PlaceholderTemplate)}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                IsHitTestVisible="False" 
                                Margin="{TemplateBinding Padding}" 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Visibility="{Data:TemplatedParent Path=(Linq:XPasswordBox.Password), Converter={x:Static Converters:StringToVisibilityConverter.Default}, ConverterParameter=1}"/>
                            <ScrollViewer x:Name="PART_ContentHost"
                                Cursor="IBeam"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Padding="{TemplateBinding Padding}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                Visibility="{Data:TemplatedParent Path=(Linq:XPasswordBox.Mask), Converter={x:Static Converters:BooleanToVisibilityConverter.Default}}"/>
                            <ContentPresenter
                                Cursor="Arrow"
                                Content="{Data:TemplatedParent Path=(Linq:XPasswordBox.Password)}"
                                ContentTemplate="{Data:TemplatedParent Path=(Linq:XPasswordBox.ToggleTemplate)}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                Margin="{TemplateBinding Padding}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Visibility="{Data:TemplatedParent Path=(Linq:XPasswordBox.Mask), Converter={x:Static Converters:BooleanToVisibilityConverter.Default}, ConverterParameter=1}"/>
                            <ContentPresenter Grid.Column="1"
                                Content="{Markup:True}"
                                ContentTemplate="{Data:TemplatedParent Path=(Linq:XPasswordBox.GenerateButtonTemplate)}"
                                Visibility="{Data:TemplatedParent Path=(Linq:XPasswordBox.GenerateButtonVisibility)}"/>
                            <ContentPresenter Grid.Column="2"
                                Content="{Markup:True}"
                                ContentTemplate="{Data:TemplatedParent Path=(Linq:XPasswordBox.ToggleButtonTemplate)}"
                                Visibility="{Data:TemplatedParent Path=(Linq:XPasswordBox.ToggleButtonVisibility)}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="ContextMenu" Value="{x:Null}"/>
                <Setter Property="SelectionBrush" Value="{local:ThemeKey Key=TextBox.Disabled.Selection}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="ContextMenu">
                    <Setter.Value>
                        <ContextMenu DataContext="{Data:Self PlacementTarget}">
                            <MenuItem 
                                Command="{Binding Path=(Linq:XPasswordBox.CutCommand)}"
                                CommandParameter="{Binding}"
                                Header="{l:Loc Cut}"
                                Icon="{Markup:InternalImage Cut.png}"
                                InputGestureText="Ctrl + X"/>
                            <MenuItem 
                                Command="{Binding Path=(Linq:XPasswordBox.CopyCommand)}"
                                CommandParameter="{Binding}"
                                Header="{l:Loc Copy}"
                                Icon="{Markup:InternalImage Copy.png}"
                                InputGestureText="Ctrl + C"/>
                            <MenuItem 
                                Command="{Binding Path=(Linq:XPasswordBox.PasteCommand)}"
                                CommandParameter="{Binding}"
                                Header="{l:Loc Paste}"
                                Icon="{Markup:InternalImage Paste.png}"
                                InputGestureText="Ctrl + V"/>
                            <Separator/>
                            <MenuItem 
                                Command="{x:Static Linq:XPasswordBox.ClearCommand}"
                                CommandTarget="{Binding}"
                                Header="{l:Loc Clear}"
                                Icon="{Markup:InternalImage XRound.png}"/>
                        </ContextMenu>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=TextBoxFocusedBorder}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="False">
                <Setter Property="SelectionBrush" Value="{local:ThemeKey Key=TextBox.Selection.Inactive}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsFocused" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=TextBoxMouseOverBorder}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>