<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Math="clr-namespace:Imagin.Core.Numerics;assembly=Imagin.Core">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=Button}"/>
    </ResourceDictionary.MergedDictionaries>
    <Style x:Key="{x:Type local:Presenter}" TargetType="{x:Type local:Presenter}"/>

    <!-- ... -->

    <Style x:Key="{x:Type local:ButtonPresenter}" TargetType="{x:Type local:ButtonPresenter}" BasedOn="{StaticResource {x:Type local:Presenter}}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl
                        HorizontalAlignment="Right"
                        ItemsSource="{Binding}"
                        VerticalAlignment="Center">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Horizontal"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Spacing" Value="3,0,0,0"/>
    </Style>

    <Style x:Key="{x:Type local:DialogPresenter}" TargetType="{x:Type local:DialogPresenter}" BasedOn="{StaticResource {x:Type local:Presenter}}">
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:TransitionControl
                        Content="{Data:Ancestor CurrentDialog, local:DialogPresenter}"
                        ContentTemplate="{Data:Ancestor Window, Path=(Linq:XWindow.DialogTemplate)}"
                        Transition="LeftReplace"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsShowing" Value="True">
                <Setter Property="IsHitTestVisible" Value="True"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ... -->

    <Thickness x:Key="{x:Static local:EmptyPresenter.PopupMarginKey}">10</Thickness>
    
    <Style x:Key="{x:Type local:EmptyPresenter}" TargetType="{x:Type local:EmptyPresenter}" BasedOn="{StaticResource {x:Type local:Presenter}}">
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="Opacity" Value="0"/>
        <Style.Triggers>
            <Trigger Property="IsEmpty" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:1" From="0" To="1" Storyboard.TargetProperty="Opacity"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:1" From="1" To="0" Storyboard.TargetProperty="Opacity"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ... -->

    <Style x:Key="{x:Type local:NotificationPresenter}" TargetType="{x:Type local:NotificationPresenter}" BasedOn="{StaticResource {x:Type local:Presenter}}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl
                        ItemsSource="{Binding}"
                        ItemTemplate="{Data:Ancestor Window, Path=(Linq:XWindow.NotificationTemplate)}"
                        Margin="10"
                        VerticalAlignment="Bottom">
                        <ItemsControl.ItemContainerStyle>
                            <Style TargetType="ContentPresenter">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsRead}" Value="True">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsRead}" Value="False">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ItemsControl.ItemContainerStyle>
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type local:SelectionPresenter}" TargetType="{x:Type local:SelectionPresenter}" BasedOn="{StaticResource {x:Type local:Presenter}}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type Math:DoubleRegion}">
                    <Canvas>
                        <local:SelectionBorder
                            Canvas.Left="{Binding X}"
                            Canvas.Top="{Binding Y}"
                            Height="{Binding Height}"
                            IsHitTestVisible="False"
                            Panel.ZIndex="1"
                            Width="{Binding Width}"/>
                    </Canvas>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>