<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Converters="clr-namespace:Imagin.Core.Converters"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Markup="clr-namespace:Imagin.Core.Markup">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=Control}"/>
        <ResourceDictionary Source="{local:StyleKey Key=FrameworkElement}"/>
    </ResourceDictionary.MergedDictionaries>
    <!-- ... -->

    <Style x:Key="{x:Static Linq:XToggleButton.StyleKey}" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type FrameworkElement}}">
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Cursor" Value="Arrow" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Padding" Value="10,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <ContentPresenter
                                Content="{Markup:True}"
                                ContentTemplate="{Data:TemplatedParent Path=(Linq:XToggleButton.BulletTemplate)}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </BulletDecorator.Bullet>
                        <!-- ... Everything, but FontSize carries over! -->
                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Margin="{TemplateBinding Padding}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Visibility="{Data:VisibilityBinding Content, Relative=TemplatedParent}"/>
                    </BulletDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ... -->

    <Style x:Key="{x:Type CheckBox}" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Static Linq:XToggleButton.StyleKey}}">
        <Setter Property="Background" Value="{local:ThemeKey ActualKey=CheckBoxBackground}" />
        <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=CheckBoxBorder}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=Text}" />
        <Setter Property="Linq:XToggleButton.BulletSize" Value="16,16"/>
        <Setter Property="Linq:XToggleButton.BulletTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border DataContext="{Data:Ancestor {x:Type CheckBox}}"
                        Background="{Binding Background}"
                        BorderBrush="{Binding BorderBrush}"
                        BorderThickness="{Binding BorderThickness}"
                        Height="{Binding Path=(Linq:XToggleButton.BulletSize).Height}" 
                        Width="{Binding Path=(Linq:XToggleButton.BulletSize).Width}">
                        <Border Margin="2">
                            <Border.Style>
                                <Style TargetType="{x:Type Border}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsChecked}" Value="{x:Null}">
                                            <Setter Property="Background" Value="Transparent" />
                                            <Setter Property="BorderBrush" Value="{local:ThemeKey Key=CheckBox.Tick.Fill}" />
                                            <Setter Property="BorderThickness" Value="3" />
                                            <Setter Property="Margin" Value="-2" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsChecked}" Value="True">
                                            <Setter Property="Background" Value="{local:ThemeKey Key=CheckBox.Tick.Fill}" />
                                            <Setter Property="BorderBrush" Value="Transparent" />
                                            <Setter Property="BorderThickness" Value="0" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsChecked}" Value="False">
                                            <Setter Property="Background" Value="Transparent" />
                                            <Setter Property="BorderBrush" Value="Transparent" />
                                            <Setter Property="BorderThickness" Value="0" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                        </Border>
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{x:Static Linq:XElement.DisabledOpacity}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type local:ImageToggleButton}" TargetType="{x:Type local:ImageToggleButton}" BasedOn="{StaticResource {x:Static Linq:XToggleButton.StyleKey}}">
        <Setter Property="Background" Value="{local:ThemeKey Key=ImageButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{local:ThemeKey Key=ImageButtonBorder}"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ButtonMargin" Value="5,0,0,0" />
        <Setter Property="ButtonSize" Value="12,12"/>
        <Setter Property="ButtonSource" Value="{Markup:InternalImage TriangleDown.png}"/>
        <Setter Property="ButtonToolTip" Value="{x:Null}" />
        <Setter Property="ButtonVisibility" Value="Collapsed" />
        <Setter Property="ContentMargin" Value="0" />
        <Setter Property="Foreground" Value="{local:ThemeKey Key=ImageButtonForeground}"/>
        <Setter Property="Padding" Value="3" />
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="SourceSize" Value="16,16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:ImageToggleButton">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <Border.Resources>
                            <Data:Reference x:Key="ImageToggleButton" Data="{Data:TemplatedParent}"/>
                        </Border.Resources>
                        <Border.Style>
                            <Style TargetType="{x:Type Border}">
                                <Setter Property="ToolTip" Value="{Data:TemplatedParent ToolTip}"/>
                                <Style.Triggers>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Data:TemplatedParent IsChecked}" Value="True"/>
                                            <Condition Binding="{Data:TemplatedParent CheckedToolTip, Converter={x:Static Converters:IsNullConverter.Default}}" Value="False"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="ToolTip" Value="{Data:TemplatedParent CheckedToolTip}"/>
                                    </MultiDataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                        <Grid Linq:XGrid.Columns="Auto,Auto,Auto">
                            <ContentPresenter Grid.Column="0" Content="{TemplateBinding Source}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Visibility="{Data:VisibilityBinding Source, Relative=TemplatedParent}">
                                <ContentPresenter.ContentTemplate>
                                    <DataTemplate>
                                        <local:ImageElement x:Name="ImageElement"
                                            Source="{Binding}"
                                            SourceSize="{Data:Ancestor SourceSize, local:ImageToggleButton}"/>
                                        <DataTemplate.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Data.IsChecked, Source={StaticResource ImageToggleButton}}" Value="True"/>
                                                    <Condition Binding="{Data:IsNullBinding Data.CheckedSource, Source={StaticResource ImageToggleButton}}" Value="False"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter TargetName="ImageElement" Property="Source" Value="{Binding Data.CheckedSource, Source={StaticResource ImageToggleButton}}"/>
                                            </MultiDataTrigger>
                                        </DataTemplate.Triggers>
                                    </DataTemplate>
                                </ContentPresenter.ContentTemplate>
                            </ContentPresenter>
                            <ContentPresenter Grid.Column="1" ContentSource="Content"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="{TemplateBinding ContentMargin}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Visibility="{Data:VisibilityBinding Content, Relative=TemplatedParent}">
                                <ContentPresenter.Style>
                                    <Style TargetType="ContentPresenter">
                                        <Style.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Data:TemplatedParent IsChecked}" Value="True"/>
                                                    <Condition Binding="{Data:IsNullBinding CheckedContent, Relative=TemplatedParent}" Value="False"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Content" Value="{Data:TemplatedParent CheckedContent}"/>
                                            </MultiDataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ContentPresenter.Style>
                            </ContentPresenter>
                            <local:RotateElement Grid.Column="2"
                                Margin="{TemplateBinding ButtonMargin}"
                                Rotate="{Data:TemplatedParent IsChecked}"
                                Rotation="-90,0"
                                ToolTip="{TemplateBinding ButtonToolTip}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Visibility="{TemplateBinding ButtonVisibility}">
                                <local:ImageElement
                                    Foreground="{Data:TemplatedParent Path=(local:ImageElement.Foreground)}"
                                    Source="{TemplateBinding ButtonSource}"
                                    SourceSize="{TemplateBinding ButtonSize}"/>
                            </local:RotateElement>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{x:Static Linq:XElement.DisabledOpacity}" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Self Content, Converter={x:Static Converters:IsNullConverter.Default}}" Value="False"/>
                    <Condition Binding="{Data:Self Source, Converter={x:Static Converters:IsNullConverter.Default}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="ContentMargin" Value="5,0,0,0"/>
            </MultiDataTrigger>
            <!-- ... -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}"/>
                    <Condition Property="HasMenu" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Padding" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ButtonVisibility" Value="Visible"/>
                    <Condition Property="Content" Value="{x:Null}"/>
                    <Condition Property="Source" Value="{x:Null}"/>
                </MultiTrigger.Conditions>
                <Setter Property="ButtonMargin" Value="0"/>
            </MultiTrigger>
            <!-- ... -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" 
                    Value="{local:ThemeKey ActualKey=ImageToggleButtonMouseOverBackground}"/>
                <Setter Property="BorderBrush" 
                    Value="{local:ThemeKey ActualKey=ImageToggleButtonMouseOverBorder}"/>
                <Setter Property="Foreground" 
                    Value="{local:ThemeKey ActualKey=ImageToggleButtonMouseOverForeground}"/>
                <Setter Property="local:ImageElement.Foreground" 
                    Value="{local:ThemeKey ActualKey=ImageToggleButtonMouseOverForeground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" 
                    Value="{local:ThemeKey ActualKey=ImageToggleButtonCheckedBackground}"/>
                <Setter Property="BorderBrush" 
                    Value="{local:ThemeKey ActualKey=ImageToggleButtonCheckedBorder}"/>
                <Setter Property="Foreground" 
                    Value="{local:ThemeKey ActualKey=ImageToggleButtonCheckedForeground}"/>
                <Setter Property="local:ImageElement.Foreground" 
                    Value="{local:ThemeKey ActualKey=ImageToggleButtonCheckedForeground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" 
                    Value="{local:ThemeKey ActualKey=ImageToggleButtonPressedBackground}"/>
                <Setter Property="BorderBrush" 
                    Value="{local:ThemeKey ActualKey=ImageToggleButtonPressedBorder}"/>
                <Setter Property="Foreground" 
                    Value="{local:ThemeKey ActualKey=ImageToggleButtonPressedForeground}"/>
                <Setter Property="local:ImageElement.Foreground" 
                    Value="{local:ThemeKey ActualKey=ImageToggleButtonPressedForeground}"/>
            </MultiTrigger>
            <!-- ... -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasMenu" Value="True"/>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" 
                    Value="{local:ThemeKey ActualKey=ImageButtonMouseOverBackground}"/>
                <Setter Property="BorderBrush" 
                    Value="{local:ThemeKey ActualKey=ImageButtonMouseOverBorder}"/>
                <Setter Property="Foreground" 
                    Value="{local:ThemeKey ActualKey=ImageButtonMouseOverForeground}"/>
                <Setter Property="local:ImageElement.Foreground" 
                    Value="{local:ThemeKey ActualKey=ImageButtonMouseOverForeground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasMenu" Value="True"/>
                    <Condition Property="IsChecked" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" 
                    Value="{local:ThemeKey ActualKey=ImageButtonCheckedBackground}"/>
                <Setter Property="BorderBrush" 
                    Value="{local:ThemeKey ActualKey=ImageButtonCheckedBorder}"/>
                <Setter Property="Foreground" 
                    Value="{local:ThemeKey ActualKey=ImageButtonCheckedForeground}"/>
                <Setter Property="local:ImageElement.Foreground" 
                    Value="{local:ThemeKey ActualKey=ImageButtonCheckedForeground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasMenu" Value="True"/>
                    <Condition Property="IsPressed" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" 
                    Value="{local:ThemeKey ActualKey=ImageButtonPressedBackground}"/>
                <Setter Property="BorderBrush" 
                    Value="{local:ThemeKey ActualKey=ImageButtonPressedBorder}"/>
                <Setter Property="Foreground" 
                    Value="{local:ThemeKey ActualKey=ImageButtonPressedForeground}"/>
                <Setter Property="local:ImageElement.Foreground" 
                    Value="{local:ThemeKey ActualKey=ImageButtonPressedForeground}"/>
            </MultiTrigger>
            <!-- ... -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}"/>
                    <Condition Property="HasMenu" Value="False"/>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" 
                    Value="Transparent"/>
                <Setter Property="BorderBrush" 
                    Value="Transparent"/>
                <Setter Property="Foreground"
                    Value="{local:ThemeKey Key=ImageButton.MouseOver}"/>
                <Setter Property="local:ImageElement.Foreground" 
                    Value="{local:ThemeKey Key=ImageButton.MouseOver}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}"/>
                    <Condition Property="HasMenu" Value="False"/>
                    <Condition Property="IsChecked" Value="True"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" 
                    Value="Transparent"/>
                <Setter Property="BorderBrush" 
                    Value="Transparent"/>
                <Setter Property="Foreground"
                    Value="{local:ThemeKey Key=ImageButton.Checked}"/>
                <Setter Property="local:ImageElement.Foreground" 
                    Value="{local:ThemeKey Key=ImageButton.Checked}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}"/>
                    <Condition Property="HasMenu" Value="False"/>
                    <Condition Property="IsChecked" Value="True"/>
                    <Condition Property="IsMouseOver" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" 
                    Value="Transparent"/>
                <Setter Property="BorderBrush" 
                    Value="Transparent"/>
                <Setter Property="Foreground" 
                    Value="{local:ThemeKey Key=ImageButton.Checked}"/>
                <Setter Property="local:ImageElement.Foreground" 
                    Value="{local:ThemeKey Key=ImageButton.Checked}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}"/>
                    <Condition Property="HasMenu" Value="False"/>
                    <Condition Property="IsPressed" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" 
                    Value="Transparent"/>
                <Setter Property="BorderBrush" 
                    Value="Transparent"/>
                <Setter Property="Foreground" 
                    Value="{local:ThemeKey Key=ImageButton.Pressed}"/>
                <Setter Property="local:ImageElement.Foreground" 
                    Value="{local:ThemeKey Key=ImageButton.Pressed}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type RadioButton}" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Static Linq:XToggleButton.StyleKey}}">
        <Setter Property="Background" Value="{local:ThemeKey ActualKey=RadioButtonBackground}" />
        <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=RadioButtonBorder}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=RadioButtonForeground}" />
        <Setter Property="Border.CornerRadius" Value="999"/>
        <Setter Property="Linq:XToggleButton.BulletSize" Value="16,16"/>
        <Setter Property="Linq:XToggleButton.BulletTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border DataContext="{Data:Ancestor {x:Type RadioButton}}"
                        Background="{Binding Background}"
                        BorderBrush="{Binding BorderBrush}"
                        BorderThickness="{Binding BorderThickness}" 
                        CornerRadius="{Binding Path=(Border.CornerRadius)}"
                        Height="{Binding Path=(Linq:XToggleButton.BulletSize).Height}" 
                        Width="{Binding Path=(Linq:XToggleButton.BulletSize).Width}">
                        <Ellipse
                            HorizontalAlignment="Stretch" 
                            Margin="1" 
                            VerticalAlignment="Stretch">
                            <Ellipse.Style>
                                <Style TargetType="{x:Type Ellipse}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsChecked}" Value="True">
                                            <Setter Property="Fill" Value="{local:ThemeKey Key=RadioButton.Tick.Stroke}" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsChecked}" Value="False">
                                            <Setter Property="Fill" Value="Transparent" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Ellipse.Style>
                        </Ellipse>
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{x:Static Linq:XElement.DisabledOpacity}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type local:SwipeButton}" TargetType="{x:Type local:SwipeButton}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Background" Value="{local:ThemeKey ActualKey=SwipeButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=SwipeButtonBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=SwipeButtonForeground}"/>
        <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=SwipeButtonForeground}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="IsCheckable" Value="False"/>
        <Setter Property="SwipeAnimationAcceleration" Value="0.4"/>
        <Setter Property="SwipeAnimationDeceleration" Value="0.6"/>
        <Setter Property="SwipeAnimationDuration" Value="0:0:0.8"/>
        <Setter Property="SwipeCommandThreshold" Value="50%"/>
        <Setter Property="SwipeDirection" Value="Horizontal"/>
        <Setter Property="SwipeMode" Value="Default"/>
        <Setter Property="SwipeStartLength" Value="4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:SwipeButton">
                    <Grid>
                        <ContentPresenter Content="{TemplateBinding Left}"
                            ContentTemplate="{TemplateBinding LeftTemplate}"
                            ContentTemplateSelector="{TemplateBinding LeftTemplateSelector}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Margin="{TemplateBinding Padding}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <ContentPresenter.Visibility>
                                <MultiBinding Converter="{x:Static local:SwipeButton.VisibilityConverter}">
                                    <Data:TemplatedParent Path="IsLeftSwiping"/>
                                    <Data:TemplatedParent Path="IsAnimating"/>
                                    <Data:TemplatedParent Path="IsSwiping"/>
                                </MultiBinding>
                            </ContentPresenter.Visibility>
                        </ContentPresenter>
                        <local:FillElement Opacity="{TemplateBinding LeftSwipeProgress, Converter={x:Static Converters:InverseDoubleConverter.Default}}">
                            <local:FillElement.Fill>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                    <GradientStop Offset="0" Color="#AA000000"/>
                                    <GradientStop Offset="0.5" Color="#00000000"/>
                                    <GradientStop Offset="1" Color="#00000000"/>
                                </LinearGradientBrush>
                            </local:FillElement.Fill>
                        </local:FillElement>
                        <ContentPresenter Content="{TemplateBinding Right}"
                            ContentTemplate="{TemplateBinding RightTemplate}"
                            ContentTemplateSelector="{TemplateBinding RightTemplateSelector}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Margin="{TemplateBinding Padding}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <ContentPresenter.Visibility>
                                <MultiBinding Converter="{x:Static local:SwipeButton.VisibilityConverter}">
                                    <Data:TemplatedParent Path="IsRightSwiping"/>
                                    <Data:TemplatedParent Path="IsAnimating"/>
                                    <Data:TemplatedParent Path="IsSwiping"/>
                                </MultiBinding>
                            </ContentPresenter.Visibility>
                        </ContentPresenter>
                        <local:FillElement Opacity="{TemplateBinding RightSwipeProgress, Converter={x:Static Converters:InverseDoubleConverter.Default}}">
                            <local:FillElement.Fill>
                                <LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
                                    <GradientStop Offset="0" Color="#AA000000"/>
                                    <GradientStop Offset="0.5" Color="#00000000"/>
                                    <GradientStop Offset="1" Color="#00000000"/>
                                </LinearGradientBrush>
                            </local:FillElement.Fill>
                        </local:FillElement>
                        <Canvas
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Margin="{TemplateBinding Padding}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Border
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Canvas.Left="{TemplateBinding ContentX}"
                                Canvas.Top="{TemplateBinding ContentY}"
                                CornerRadius="{TemplateBinding Border.CornerRadius}"
                                Height="{TemplateBinding ActualHeight}"
                                Width="{TemplateBinding ActualWidth}">
                                <ContentPresenter x:Name="BackContent" ContentSource="Content"/>
                            </Border>
                        </Canvas>
                        <ContentPresenter x:Name="FrontContent" ContentSource="Content"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Margin="{TemplateBinding Padding}"
                            Opacity="0"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsAnimating" Value="False"/>
                                <Condition Property="IsSwiping" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="BackContent" Property="Opacity" Value="0"/>
                            <Setter TargetName="FrontContent" Property="Opacity" Value="1"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=SwipeButtonCheckedBackground}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=SwipeButtonCheckedForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=SwipeButtonCheckedForeground}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{x:Static Linq:XElement.DisabledOpacity}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsMouseDown" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=SwipeButtonMouseDownBackground}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=SwipeButtonMouseDownForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=SwipeButtonMouseDownForeground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsMouseDown" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=SwipeButtonMouseOverBackground}"/>
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=SwipeButtonMouseOverForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=SwipeButtonMouseOverForeground}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type local:SwitchButton}" TargetType="{x:Type local:SwitchButton}" BasedOn="{StaticResource {x:Static Linq:XToggleButton.StyleKey}}">
        <Setter Property="Background" Value="{local:ThemeKey ActualKey=SwitchButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=SwitchButtonBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=Text}"/>
        <Setter Property="Border.CornerRadius" Value="2"/>
        <Setter Property="Linq:XToggleButton.BulletSize" Value="22,60"/>
        <Setter Property="Linq:XToggleButton.BulletTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid DataContext="{Data:Ancestor local:SwitchButton}"
                        Height="{Binding Path=(Linq:XToggleButton.BulletSize).Height}" 
                        Width="{Binding Path=(Linq:XToggleButton.BulletSize).Width}">
                        <Border
                            Background="{Binding Background}"
                            BorderBrush="{Binding BorderBrush}"
                            BorderThickness="{Binding BorderThickness}"
                            CornerRadius="{Binding Path=(Border.CornerRadius)}"
                            Padding="{Binding Padding}">
                            <Grid 
                                Linq:XGrid.Columns="*,*"
                                Linq:XPanel.HorizontalContentAlignment="Center"
                                Linq:XPanel.VerticalContentAlignment="Center">
                                <Line 
                                    Stroke="{Binding SymbolForeground}" 
                                    StrokeThickness="2"  
                                    Visibility="{Binding IsChecked, Converter={x:Static Converters:BooleanToVisibilityConverter.Default}}"
                                    X1="0"
                                    X2="0" 
                                    Y1="0" 
                                    Y2="{Binding SymbolSize}"/>
                                <Ellipse 
                                    Grid.Column="1"
                                    Height="{Binding SymbolSize}"
                                    Stroke="{Binding SymbolForeground}" 
                                    StrokeThickness="2" 
                                    Visibility="{Binding IsChecked, Converter={x:Static Converters:BooleanToVisibilityConverter.Default}, ConverterParameter=1}"
                                    Width="{Binding SymbolSize}"/>
                            </Grid>
                        </Border>
                        <Thumb x:Name="PART_Slider"
                            Height="{Binding Height}" 
                            HorizontalAlignment="Left" 
                            RenderTransformOrigin="0.5,0.5"
                            Style="{Binding ThumbStyle}">
                            <Thumb.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                                    <TranslateTransform X="0" Y="0"/>
                                </TransformGroup>
                            </Thumb.RenderTransform>
                        </Thumb>
                    </Grid>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Data:Ancestor IsChecked, local:SwitchButton}" Value="True">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames 
                                            BeginTime="00:00:00" 
                                            Storyboard.TargetName="PART_Slider"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[1].(TranslateTransform.X)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="50" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames 
                                            BeginTime="00:00:00" 
                                            Storyboard.TargetName="PART_Slider" 
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[1].(TranslateTransform.X)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="SymbolForeground" Value="{local:ThemeKey ActualKey=SwitchButtonForeground}"/>
        <Setter Property="SymbolSize" Value="10"/>
        <Setter Property="ThumbStyle">
            <Setter.Value>
                <Style TargetType="Thumb">
                    <Setter Property="Background" Value="{local:ThemeKey Key=SwitchButton.Thumb.Background}"/>
                    <Setter Property="BorderBrush" Value="{local:ThemeKey Key=SwitchButton.Thumb.Border}"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="Border.CornerRadius" Value="2"/>
                    <Setter Property="IsHitTestVisible" Value="False"/>
                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                    <Setter Property="Width" Value="12"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="Thumb">
                                <Border
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="{TemplateBinding Border.CornerRadius}"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <DataTrigger Binding="{Data:Ancestor IsChecked, {x:Type local:SwitchButton}}" Value="True">
                            <Setter Property="Background" Value="{local:ThemeKey Key=SwitchButton.Checked.Thumb.Background}" />
                            <Setter Property="BorderBrush" Value="{local:ThemeKey Key=SwitchButton.Checked.Thumb.Border}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Data:Ancestor IsChecked, {x:Type local:SwitchButton}}" Value="{x:Null}">
                            <Setter Property="Background" Value="{local:ThemeKey Key=SwitchButton.Null.Thumb.Background}" />
                            <Setter Property="BorderBrush" Value="{local:ThemeKey Key=SwitchButton.Null.Thumb.Border}" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=SwitchButtonCheckedBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=SwitchButtonCheckedBorder}" />
                <Setter Property="SymbolForeground" Value="{local:ThemeKey ActualKey=SwitchButtonCheckedForeground}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="{x:Null}">
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=SwitchButtonNullBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=SwitchButtonNullBorder}" />
                <Setter Property="SymbolForeground" Value="{local:ThemeKey ActualKey=SwitchButtonNullForeground}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{x:Static Linq:XElement.DisabledOpacity}" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>