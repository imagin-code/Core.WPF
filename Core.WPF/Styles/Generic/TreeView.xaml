<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:e="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:g="urn:gong-wpf-dragdrop"
    xmlns:l="clr-namespace:Imagin.Core.Local.Extensions"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Behavior="clr-namespace:Imagin.Core.Behavior"
    xmlns:Converters="clr-namespace:Imagin.Core.Converters"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Markup="clr-namespace:Imagin.Core.Markup">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=ComboBox}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Control}"/>
        <ResourceDictionary Source="{local:StyleKey Key=FrameworkElement}"/>
        <ResourceDictionary Source="{local:StyleKey Key=GridSplitter}"/>
        <ResourceDictionary Source="{local:StyleKey Key=ItemsControl}"/>
    </ResourceDictionary.MergedDictionaries>
    <!-- ... -->
    
    <Style x:Key="{x:Static Linq:XTreeViewItem.ToggleButtonTemplateKey}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Foreground" Value="{local:ThemeKey Key=TreeViewItem.ToggleButton.Empty.Fill}" />
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Linq:XGrid.Columns="Auto,*"
                        Background="{TemplateBinding Background}">
                        <local:RotateElement
                            Rotate="{TemplateBinding IsChecked}"
                            Rotation="-90,0"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <local:ImageElement
                                Margin="{TemplateBinding Padding}"
                                Source="{Markup:InternalImage 32-ArrowDown.png}"
                                Foreground="{TemplateBinding Foreground}"/>
                        </local:RotateElement>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Ancestor HasItems, {x:Type TreeViewItem}}" Value="True"/>
                    <Condition Binding="{Data:Ancestor IsExpanded, {x:Type TreeViewItem}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{local:ThemeKey Key=TreeViewItem.ToggleButton.Filled.Checked.Fill}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Ancestor HasItems, {x:Type TreeViewItem}}" Value="True"/>
                    <Condition Binding="{Data:Ancestor IsExpanded, {x:Type TreeViewItem}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{local:ThemeKey Key=TreeViewItem.ToggleButton.Filled.Fill}"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <!-- ... -->

    <Style x:Key="{x:Type local:TreeViewColumnHeader}" TargetType="{x:Type local:TreeViewColumnHeader}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{local:ThemeKey Key=DataGridColumnHeader.Border}" />
        <Setter Property="BorderThickness" Value="1,0,1,1" />
        <Setter Property="Foreground" Value="{local:ThemeKey Key=Text}" />
        <Setter Property="Margin" Value="-1,0,0,-1" />
        <Setter Property="Padding" Value="5,7"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:TreeViewColumnHeader}">
                    <Grid Linq:XGrid.Columns="*,Auto">
                        <Border
                            Grid.ColumnSpan="2" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}" />
                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Margin="6,3" 
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <Path
                            Grid.Column="1" 
                            x:Name="SortArrow" 
                            Data="M0,0 L1,0 0.5,1 z" 
                            Fill="{TemplateBinding Foreground}"
                            Height="6" 
                            Margin="0,0,8,0"  
                            RenderTransformOrigin="0.5,0.4"
                            Stretch="Fill" 
                            VerticalAlignment="Center" 
                            Visibility="Collapsed" 
                            Width="8"/>
                        <Thumb 
                            Grid.ColumnSpan="2" 
                            x:Name="PART_RightHeaderGripper" 
                            Cursor="SizeWE"
                            Margin="-8,0,-9,0"
                            HorizontalAlignment="Right"
                            Style="{TemplateBinding GripperStyle}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="SortDirection" Value="Ascending">
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                            <Setter TargetName="SortArrow" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="SortDirection" Value="Descending">
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{local:ThemeKey Key=DataGridColumnHeader.MouseOver.Background}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey Key=DataGridColumnHeader.MouseOver.Border}" />
                <Setter Property="Foreground" Value="{local:ThemeKey Key=DataGridColumnHeader.MouseOver.Foreground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{local:ThemeKey Key=DataGridColumnHeader.Pressed.Background}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey Key=DataGridColumnHeader.Pressed.Border}" />
                <Setter Property="Foreground" Value="{local:ThemeKey Key=DataGridColumnHeader.Pressed.Foreground}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type local:TreeViewColumnHeaderPresenter}" TargetType="{x:Type local:TreeViewColumnHeaderPresenter}">
        <Setter Property="MinHeight" Value="28" />
    </Style>

    <Style x:Key="{x:Type local:TreeViewRow}" TargetType="{x:Type local:TreeViewRow}" BasedOn="{StaticResource {x:Type FrameworkElement}}"/>

    <!-- ... -->

    <Style x:Key="{x:Type TreeView}" TargetType="{x:Type TreeView}" BasedOn="{StaticResource {x:Type ItemsControl}}">
        <Setter Property="AlternationCount" Value="2" />
        <Setter Property="Background" Value="{local:ThemeKey Key=TreeView.Background}"/>
        <Setter Property="BorderBrush" Value="{local:ThemeKey Key=TreeView.Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel IsItemsHost="True"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XItemsControl.CanDragSelect" Value="True"/>
        <Setter Property="Linq:XItemsControl.EmptyTemplateVisibility" Value="Visible"/>
        <Setter Property="Linq:XItemsControl.EnableColumnMenu" Value="True" />
        <Setter Property="Linq:XItemsControl.SelectNoneOnEmptySpaceClick" Value="True"/>
        <Setter Property="Linq:XTreeView.CollapseSiblingsOnClick" Value="True" />
        <Setter Property="Linq:XTreeView.ColumnHeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XTreeView.Mode" Value="Default"/>
        <Setter Property="Linq:XTreeView.SelectionMode" Value="Single"/>
        <Setter Property="Linq:XTreeView.SelectOnRightClick" Value="True" />
        <Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Cycle"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Padding" Value="5,0,0,0"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <ScrollViewer 
                        x:Name="PART_ScrollViewer"
                        Background="{TemplateBinding Background}" 
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        CanContentScroll="True"
                        Focusable="False" 
                        Padding="{TemplateBinding Padding}">
                        <ScrollViewer.Style>
                            <Style TargetType="ScrollViewer">
                                <Setter Property="CanContentScroll" Value="True"/>
                                <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="ScrollViewer">
                                            <Border 
                                                Background="{TemplateBinding Background}" 
                                                BorderBrush="{TemplateBinding BorderBrush}" 
                                                BorderThickness="{TemplateBinding BorderThickness}">
                                                <Grid Linq:XGrid.Columns="*,Auto"
                                                    Linq:XGrid.Rows="Auto,*,Auto"
                                                    Background="{TemplateBinding Background}">
                                                    <Border
                                                        Grid.ColumnSpan="2"
                                                        Grid.Row="0"
                                                        Background="{local:ThemeKey Key=DataGridColumnHeader.Background}"
                                                        BorderBrush="{local:ThemeKey Key=DataGridColumnHeader.Border}"
                                                        BorderThickness="0,0,0,1"
                                                        Visibility="{Data:Ancestor {x:Type TreeView}, Converter={x:Static Converters:ValueEqualsParameterVisibilityConverter.Default}, ConverterParameter={x:Static local:TreeViewModes.Grid}, Path=(Linq:XTreeView.Mode)}">
                                                        <local:TreeViewColumnHeaderPresenter
                                                            ItemsSource="{Data:Ancestor {x:Type TreeView}, Path=(Linq:XTreeView.Columns)}"
                                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                            SplitterVisibility="{Data:Ancestor {x:Type TreeView}, Path=(Linq:XTreeView.CanResizeColumns)}">
                                                            <local:TreeViewColumnHeaderPresenter.ItemTemplate>
                                                                <DataTemplate>
                                                                    <local:TreeViewColumnHeader
                                                                        ColumnWidth="{Binding Width}"
                                                                        Content="{Binding Header}"
                                                                        ContentStringFormat="{Binding HeaderStringFormat}"
                                                                        ContentTemplate="{Binding HeaderTemplate}"
                                                                        ContentTemplateSelector="{Binding HeaderTemplateSelector}"
                                                                        HorizontalContentAlignment="{Binding HorizontalContentAlignment}"
                                                                        SortDirection="{Binding SortDirection, Mode=TwoWay}"
                                                                        SortName="{Binding SortName}"
                                                                        VerticalContentAlignment="{Binding VerticalContentAlignment}">
                                                                        <local:TreeViewColumnHeader.Style>
                                                                            <Style TargetType="{x:Type local:TreeViewColumnHeader}" BasedOn="{StaticResource {x:Type local:TreeViewColumnHeader}}">
                                                                                <Style.Triggers>
                                                                                    <DataTrigger Binding="{Binding HeaderStringFormat}" Value="{x:Null}">
                                                                                        <Setter Property="ContentStringFormat" Value="{Data:Ancestor {x:Type TreeView}, Path=(Linq:XTreeView.ColumnHeaderStringFormat)}"/>
                                                                                    </DataTrigger>
                                                                                    <DataTrigger Binding="{Binding HeaderTemplate}" Value="{x:Null}">
                                                                                        <Setter Property="ContentTemplate" Value="{Data:Ancestor {x:Type TreeView}, Path=(Linq:XTreeView.ColumnHeaderTemplate)}"/>
                                                                                    </DataTrigger>
                                                                                    <DataTrigger Binding="{Binding HeaderTemplateSelector}" Value="{x:Null}">
                                                                                        <Setter Property="ContentTemplateSelector" Value="{Data:Ancestor {x:Type TreeView}, Path=(Linq:XTreeView.ColumnHeaderTemplateSelector)}"/>
                                                                                    </DataTrigger>
                                                                                </Style.Triggers>
                                                                            </Style>
                                                                        </local:TreeViewColumnHeader.Style>
                                                                    </local:TreeViewColumnHeader>
                                                                </DataTemplate>
                                                            </local:TreeViewColumnHeaderPresenter.ItemTemplate>
                                                            <local:TreeViewColumnHeaderPresenter.SplitterStyle>
                                                                <Style TargetType="{x:Type GridSplitter}" BasedOn="{StaticResource {x:Type GridSplitter}}">
                                                                    <Setter Property="Background" Value="Transparent"/>
                                                                    <Setter Property="Width" Value="7"/>
                                                                </Style>
                                                            </local:TreeViewColumnHeaderPresenter.SplitterStyle>
                                                        </local:TreeViewColumnHeaderPresenter>
                                                    </Border>

                                                    <ScrollContentPresenter 
                                                        Grid.ColumnSpan="2"
                                                        Grid.Row="1" 
                                                        x:Name="PART_ScrollContentPresenter" 
                                                        KeyboardNavigation.DirectionalNavigation="Local"
                                                        Margin="{TemplateBinding Padding}"/>

                                                    <ScrollBar 
                                                        Grid.Column="1"
                                                        Grid.Row="1"
                                                        x:Name="PART_VerticalScrollBar"
                                                        Maximum="{TemplateBinding ScrollableHeight}"
                                                        ViewportSize="{TemplateBinding ViewportHeight}"
                                                        Value="{TemplateBinding VerticalOffset}"
                                                        Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                                                    <ScrollBar 
                                                        Grid.Row="2"
                                                        x:Name="PART_HorizontalScrollBar"
                                                        Orientation="Horizontal"
                                                        Maximum="{TemplateBinding ScrollableWidth}"
                                                        ViewportSize="{TemplateBinding ViewportWidth}"
                                                        Value="{TemplateBinding HorizontalOffset}"
                                                        Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                                                </Grid>
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ScrollViewer.Style>
                        <Grid>
                            <local:EmptyPresenter/>
                            <local:SelectionPresenter/>
                            <ItemsPresenter 
                                HorizontalAlignment="Stretch"/>
                        </Grid>
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True"/>
        <Setter Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="True"/>
        <Setter Property="VirtualizingPanel.ScrollUnit" Value="Pixel"/>
        <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling"/>
    </Style>

    <Style x:Key="{x:Type TreeViewItem}" TargetType="{x:Type TreeViewItem}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Linq:XElement.FadeIn" Value="True" />
        <Setter Property="Linq:XTreeViewItem.ParentHasColumns" Value="{Data:Ancestor {x:Type TreeView}, Path=(Linq:XTreeView.Mode), Converter={x:Static Converters:ValueEqualsParameterConverter.Default}, ConverterParameter={x:Static local:TreeViewModes.Grid}}"/>
        <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=TreeViewItemForeground}" />
        <Setter Property="Opacity" Value="0" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Padding" Value="4,1.5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TreeViewItem">
                    <Grid x:Name="PART_Grid" 
                        Linq:XGrid.Columns="20,*" 
                        Linq:XGrid.Rows="Auto,*">
                        <ToggleButton x:Name="PART_ToggleButton"
                            Grid.ColumnSpan="2"
                            IsChecked="{Data:TemplatedParent IsExpanded, Mode=TwoWay}"
                            Style="{StaticResource {x:Static Linq:XTreeViewItem.ToggleButtonTemplateKey}}"/>
                        <Border x:Name="PART_Border" 
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Padding="{TemplateBinding Padding}" 
                            SnapsToDevicePixels="True">
                            <local:TreeViewRow
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost"
                            Grid.Row="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Data:Ancestor {x:Type TreeView}, Path=(Linq:XTreeView.Mode)}" Value="Default">
                            <Setter TargetName="PART_Border" Property="Grid.Column" Value="1"/>
                            <Setter TargetName="PART_Border" Property="Grid.ColumnSpan" Value="1"/>
                            <Setter TargetName="PART_Border" Property="IsHitTestVisible" Value="False"/>
                            <Setter TargetName="ItemsHost" Property="Grid.Column" Value="1"/>
                            <Setter TargetName="ItemsHost" Property="Grid.ColumnSpan" Value="1"/>
                            <Setter TargetName="PART_ToggleButton" Property="Visibility" Value="Visible"/>
                        </DataTrigger> 
                        <DataTrigger Binding="{Data:Ancestor {x:Type TreeView}, Path=(Linq:XTreeView.Mode)}" Value="Grid">
                            <Setter TargetName="PART_Border" Property="Grid.Column" Value="0"/>
                            <Setter TargetName="PART_Border" Property="Grid.ColumnSpan" Value="2"/>
                            <Setter TargetName="PART_Border" Property="IsHitTestVisible" Value="True"/>
                            <Setter TargetName="ItemsHost" Property="Grid.Column" Value="0"/>
                            <Setter TargetName="ItemsHost" Property="Grid.ColumnSpan" Value="2"/>
                            <Setter TargetName="PART_ToggleButton" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <!-- ... -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Linq:XTreeViewItem.ParentHasColumns" Value="True"/>
                                <Condition Property="ItemsControl.AlternationIndex" Value="0" />
                                <Condition SourceName="PART_Border" Property="IsMouseOver" Value="False" />
                                <Condition Property="Linq:XTreeViewItem.IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{local:ThemeKey Key=TreeViewItem.Even.Background}"/>
                            <Setter Property="BorderBrush" Value="{local:ThemeKey Key=TreeViewItem.Even.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Linq:XTreeViewItem.ParentHasColumns" Value="True"/>
                                <Condition Property="ItemsControl.AlternationIndex" Value="1" />
                                <Condition SourceName="PART_Border" Property="IsMouseOver" Value="False" />
                                <Condition Property="Linq:XTreeViewItem.IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{local:ThemeKey Key=TreeViewItem.Odd.Background}"/>
                            <Setter Property="BorderBrush" Value="{local:ThemeKey Key=TreeViewItem.Odd.Border}"/>
                        </MultiTrigger>
                        <!-- ... -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasItems" Value="True"/>
                                <Condition Property="IsExpanded" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasItems" Value="True"/>
                                <Condition Property="IsExpanded" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasItems" Value="False"/>
                                <Condition Property="IsExpanded" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasItems" Value="False"/>
                                <Condition Property="IsExpanded" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
                        </MultiTrigger>
                        <!-- ... -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Linq:XTreeViewItem.IsSelected" Value="False"/>
                                <Condition SourceName="PART_Border" Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Border" Property="Background" Value="{local:ThemeKey Key=TreeViewItem.MouseOver.Background}"/>
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{local:ThemeKey Key=TreeViewItem.MouseOver.Border}"/>
                            <Setter Property="TextBlock.Foreground" Value="{local:ThemeKey Key=TreeViewItem.MouseOver.Foreground}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Linq:XTreeViewItem.IsSelected" Value="True"/>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Border" Property="Background" Value="{local:ThemeKey Key=TreeViewItem.Selected.Active.Background}"/>
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{local:ThemeKey Key=TreeViewItem.Selected.Active.Border}"/>
                            <Setter Property="TextBlock.Foreground" Value="{local:ThemeKey Key=TreeViewItem.Selected.Active.Foreground}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Linq:XTreeViewItem.IsSelected" Value="True"/>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Border" Property="Background" Value="{local:ThemeKey Key=TreeViewItem.Selected.Background}"/>
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{local:ThemeKey Key=TreeViewItem.Selected.Border}"/>
                            <Setter Property="TextBlock.Foreground" Value="{local:ThemeKey Key=TreeViewItem.Selected.Foreground}"/>
                        </MultiTrigger>
                        <!-- ... -->
                        <Trigger SourceName="PART_Border" Property="Linq:XControl.IsDraggingOver" Value="True">
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{local:ThemeKey Key=DropTarget.Border}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True"/>
        <Setter Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="True"/>
        <Setter Property="VirtualizingPanel.ScrollUnit" Value="Pixel"/>
        <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling"/>
    </Style>

    <!-- ... -->

    <Style x:Key="TreeViewBox.ToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Linq:XGrid.Columns="*,Auto">
                        <Border Grid.ColumnSpan="2" 
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"/>
                        <local:RotateElement Grid.Column="1"
                            Margin="5,0"
                            Rotate="{TemplateBinding IsChecked}"
                            Rotation="-90,0"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Visibility="{Data:Ancestor IsReadOnly, {x:Type ComboBox}, Converter={x:Static Converters:BooleanToVisibilityConverter.Default}, ConverterParameter=1}">
                            <local:ImageElement 
                                Source="{Markup:InternalImage 32-ArrowDown.png}"
                                Foreground="{TemplateBinding Foreground}"/>
                        </local:RotateElement>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <Style x:Key="{x:Type local:TreeViewBox}" TargetType="{x:Type local:TreeViewBox}" BasedOn="{StaticResource {x:Type TreeView}}">
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Foreground" Value="{local:ThemeKey Key=Text}" />
        <Setter Property="g:DragDrop.DropHandler" Value="{Data:Self DropHandler}"/>
        <Setter Property="g:DragDrop.IsDropTarget" Value="True"/>
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Linq:XControl.DropTemplateVisibility" Value="Visible" />
        <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey Key=Text}" />
        <Setter Property="MenuAnimation" Value="Fade"/>
        <Setter Property="MenuHeight" Value="{x:Static Linq:XPopup.Height}"/>
        <Setter Property="MenuPlacement" Value="Bottom"/>
        <Setter Property="Padding" Value="5" />
        <Setter Property="Placeholder" Value="{l:Loc Prefix=(, Key=NoSelection, Suffix=)}"/>
        <Setter Property="PlaceholderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock
                        Opacity="0.4"
                        Text="{Binding}"
                        TextTrimming="CharacterEllipsis"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="SelectedItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:AccentLabel Content="{Binding}"
                        Margin="0,0,5,0"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="SelectionTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ScrollViewer HorizontalScrollBarVisibility="Auto">
                        <ItemsControl ItemsSource="{Binding}"
                            ItemTemplate="{Data:Ancestor SelectedItemTemplate, {x:Type local:TreeViewBox}}"
                            ItemTemplateSelector="{Data:Ancestor SelectedItemTemplateSelector, {x:Type local:TreeViewBox}}">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                        </ItemsControl>
                    </ScrollViewer>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="StaysOpen" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:TreeViewBox}">
                    <Grid Linq:XGrid.Columns="*,15">
                        <ToggleButton Grid.ColumnSpan="2"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Foreground="{TemplateBinding Foreground}"
                            IsChecked="{Data:TemplatedParent IsMenuOpen, Mode=TwoWay}"
                            Style="{StaticResource TreeViewBox.ToggleButton}"/>
                        <ContentPresenter
                            Content="{TemplateBinding Placeholder}" 
                            ContentTemplate="{TemplateBinding PlaceholderTemplate}"
                            ContentTemplateSelector="{TemplateBinding PlaceholderTemplateSelector}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                            IsHitTestVisible="False"
                            Margin="{TemplateBinding Padding}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Visibility="{Data:TemplatedParent Path=(Linq:XTreeView.SelectedItems).IsEmpty, Converter={x:Static Converters:BooleanToVisibilityConverter.Default}}"/>
                        <ContentPresenter
                            Content="{Data:TemplatedParent Path=(Linq:XTreeView.SelectedItems)}" 
                            ContentTemplate="{TemplateBinding SelectionTemplate}" 
                            ContentTemplateSelector="{TemplateBinding SelectionTemplateSelector}" 
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Margin="{TemplateBinding Padding}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                        <Popup
                            AllowsTransparency="True"
                            Focusable="False" 
                            IsOpen="{Data:TemplatedParent IsMenuOpen, Mode=TwoWay}"
                            Linq:XPopup.CloseOnMouseLeave="True"
                            Linq:XPopup.Parent="{Data:TemplatedParent}"
                            Placement="{TemplateBinding MenuPlacement}"
                            PopupAnimation="{TemplateBinding MenuAnimation}"
                            SnapsToDevicePixels="True"
                            StaysOpen="{TemplateBinding StaysOpen}">
                            <local:PopupBorder
                                MaxHeight="{Data:TemplatedParent MenuHeight.Maximum}"
                                MinHeight="{Data:TemplatedParent MenuHeight.Minimum}"
                                MinWidth="{TemplateBinding ActualWidth}">
                                <ScrollViewer x:Name="PART_ScrollViewer"
                                    CanContentScroll="True"
                                    Focusable="False"
                                    Padding="{TemplateBinding Padding}">
                                    <ScrollViewer.Style>
                                        <Style TargetType="ScrollViewer">
                                            <Setter Property="CanContentScroll" Value="True"/>
                                            <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="ScrollViewer">
                                                        <Border 
                                                            Background="{TemplateBinding Background}" 
                                                            BorderBrush="{TemplateBinding BorderBrush}" 
                                                            BorderThickness="{TemplateBinding BorderThickness}">
                                                            <Grid Linq:XGrid.Columns="*,Auto"
                                                                Linq:XGrid.Rows="Auto,*,Auto"
                                                                Background="{TemplateBinding Background}">
                                                                <Border
                                                                    Grid.ColumnSpan="2"
                                                                    Grid.Row="0"
                                                                    Background="{local:ThemeKey Key=DataGridColumnHeader.Background}"
                                                                    BorderBrush="{local:ThemeKey Key=DataGridColumnHeader.Border}"
                                                                    BorderThickness="0,0,0,1"
                                                                    Visibility="{Data:Ancestor {x:Type TreeView}, Converter={x:Static Converters:ValueEqualsParameterVisibilityConverter.Default}, ConverterParameter={x:Static local:TreeViewModes.Grid}, Path=(Linq:XTreeView.Mode)}">
                                                                    <local:TreeViewColumnHeaderPresenter
                                                                        ItemsSource="{Data:Ancestor {x:Type TreeView}, Path=(Linq:XTreeView.Columns)}"
                                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                                        SplitterVisibility="{Data:Ancestor {x:Type TreeView}, Path=(Linq:XTreeView.CanResizeColumns)}">
                                                                        <local:TreeViewColumnHeaderPresenter.ItemTemplate>
                                                                            <DataTemplate>
                                                                                <local:TreeViewColumnHeader
                                                                                    ColumnWidth="{Binding Width}"
                                                                                    Content="{Binding Header}"
                                                                                    ContentStringFormat="{Binding HeaderStringFormat}"
                                                                                    ContentTemplate="{Binding HeaderTemplate}"
                                                                                    ContentTemplateSelector="{Binding HeaderTemplateSelector}"
                                                                                    HorizontalContentAlignment="{Binding HorizontalContentAlignment}"
                                                                                    SortDirection="{Binding SortDirection, Mode=TwoWay}"
                                                                                    SortName="{Binding SortName}"
                                                                                    VerticalContentAlignment="{Binding VerticalContentAlignment}">
                                                                                    <local:TreeViewColumnHeader.Style>
                                                                                        <Style TargetType="{x:Type local:TreeViewColumnHeader}" BasedOn="{StaticResource {x:Type local:TreeViewColumnHeader}}">
                                                                                            <Style.Triggers>
                                                                                                <DataTrigger Binding="{Binding HeaderStringFormat}" Value="{x:Null}">
                                                                                                    <Setter Property="ContentStringFormat" Value="{Data:Ancestor {x:Type TreeView}, Path=(Linq:XTreeView.ColumnHeaderStringFormat)}"/>
                                                                                                </DataTrigger>
                                                                                                <DataTrigger Binding="{Binding HeaderTemplate}" Value="{x:Null}">
                                                                                                    <Setter Property="ContentTemplate" Value="{Data:Ancestor {x:Type TreeView}, Path=(Linq:XTreeView.ColumnHeaderTemplate)}"/>
                                                                                                </DataTrigger>
                                                                                                <DataTrigger Binding="{Binding HeaderTemplateSelector}" Value="{x:Null}">
                                                                                                    <Setter Property="ContentTemplateSelector" Value="{Data:Ancestor {x:Type TreeView}, Path=(Linq:XTreeView.ColumnHeaderTemplateSelector)}"/>
                                                                                                </DataTrigger>
                                                                                            </Style.Triggers>
                                                                                        </Style>
                                                                                    </local:TreeViewColumnHeader.Style>
                                                                                </local:TreeViewColumnHeader>
                                                                            </DataTemplate>
                                                                        </local:TreeViewColumnHeaderPresenter.ItemTemplate>
                                                                        <local:TreeViewColumnHeaderPresenter.SplitterStyle>
                                                                            <Style TargetType="{x:Type GridSplitter}" BasedOn="{StaticResource {x:Type GridSplitter}}">
                                                                                <Setter Property="Background" Value="Transparent"/>
                                                                                <Setter Property="Width" Value="7"/>
                                                                            </Style>
                                                                        </local:TreeViewColumnHeaderPresenter.SplitterStyle>
                                                                    </local:TreeViewColumnHeaderPresenter>
                                                                </Border>

                                                                <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" 
                                                                    Grid.ColumnSpan="2"
                                                                    Grid.Row="1"
                                                                    KeyboardNavigation.DirectionalNavigation="Local"
                                                                    Margin="{TemplateBinding Padding}"/>

                                                                <ScrollBar x:Name="PART_VerticalScrollBar"
                                                                    Grid.Column="1"
                                                                    Grid.Row="1"
                                                                    Maximum="{TemplateBinding ScrollableHeight}"
                                                                    ViewportSize="{TemplateBinding ViewportHeight}"
                                                                    Value="{TemplateBinding VerticalOffset}"
                                                                    Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                                                                <ScrollBar x:Name="PART_HorizontalScrollBar"
                                                                    Grid.Row="2"
                                                                    Orientation="Horizontal"
                                                                    Maximum="{TemplateBinding ScrollableWidth}"
                                                                    ViewportSize="{TemplateBinding ViewportWidth}"
                                                                    Value="{TemplateBinding HorizontalOffset}"
                                                                    Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                                                            </Grid>
                                                        </Border>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ScrollViewer.Style>
                                    <Grid>
                                        <local:EmptyPresenter/>
                                        <local:SelectionPresenter/>
                                        <ItemsPresenter 
                                            HorizontalAlignment="Stretch"/>
                                    </Grid>
                                </ScrollViewer>
                            </local:PopupBorder>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=TreeViewFocusBorder}" />
            </Trigger>
            <Trigger Property="IsMenuOpen" Value="True">
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=ComboBoxCheckedBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=ComboBoxCheckedBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=ComboBoxCheckedForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=ComboBoxCheckedForeground}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMenuOpen" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=ComboBoxMouseOverBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=ComboBoxMouseOverBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=ComboBoxMouseOverForeground}"/>
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=ComboBoxMouseOverForeground}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- ... -->

    <Style x:Key="{x:Type local:TreeViewCheckBoxColumn}" TargetType="{x:Type local:TreeViewCheckBoxColumn}">
        <Setter Property="Template">
            <Setter.Value>
                <DataTemplate>
                    <CheckBox 
                        IsEnabled="{Data:Ancestor Column.IsReadOnly, {x:Type local:TreeViewCell}, Converter={x:Static Converters:InverseBooleanConverter.Default}}"
                        IsThreeState="{Data:Ancestor Column.IsThreeState, {x:Type local:TreeViewCell}}">
                        <e:Interaction.Behaviors>
                            <Behavior:BindingBehavior
                                Binding="{Data:Ancestor Binding, {x:Type local:TreeViewCell}}"
                                Property="{x:Static CheckBox.IsCheckedProperty}"/>
                        </e:Interaction.Behaviors>
                    </CheckBox>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Width" Value="32"/>
    </Style>

    <Style x:Key="{x:Type local:TreeViewComboBoxColumn}" TargetType="{x:Type local:TreeViewComboBoxColumn}">
        <Setter Property="Template">
            <Setter.Value>
                <DataTemplate>
                    <ComboBox
                        IsEnabled="{Data:Ancestor Column.IsReadOnly, {x:Type local:TreeViewCell}, Converter={x:Static Converters:InverseBooleanConverter.Default}}"
                        ItemsSource="{Data:Ancestor Column.DataType, {x:Type local:TreeViewCell}, Converter={x:Static Converters:EnumConverter.Default}}">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Data:TranslateBinding}"/>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                        <ComboBox.Style>
                            <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Data:Ancestor Column.IsReadOnly, {x:Type local:TreeViewCell}}" Value="True">
                                        <Setter Property="BorderThickness" Value="0"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ComboBox.Style>
                        <e:Interaction.Behaviors>
                            <Behavior:BindingBehavior 
                                Binding="{Data:Ancestor Binding, {x:Type local:TreeViewCell}}"
                                Property="{x:Static ComboBox.SelectedItemProperty}"/>
                        </e:Interaction.Behaviors>
                    </ComboBox>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type local:TreeViewExpanderColumn}" TargetType="{x:Type local:TreeViewExpanderColumn}">
        <Setter Property="Template">
            <Setter.Value>
                <DataTemplate>
                    <ToggleButton 
                        IsChecked="{Data:Ancestor IsExpanded, {x:Type TreeViewItem}, Mode=TwoWay}"
                        Margin="{Data:Ancestor {x:Type TreeViewItem}, Converter={x:Static local:TreeViewItemMarginConverter.Default}, ConverterParameter=16}"
                        Style="{StaticResource {x:Static Linq:XTreeViewItem.ToggleButtonTemplateKey}}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Width" Value="32"/>
    </Style>
    
    <Style x:Key="{x:Type local:TreeViewHyperlinkColumn}" TargetType="{x:Type local:TreeViewHyperlinkColumn}">
        <Setter Property="Template">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock>
                        <Hyperlink
                            Command="{Data:Ancestor Column.Command, {x:Type local:TreeViewCell}}"
                            CommandParameter="{Data:Ancestor Column.CommandParameter, {x:Type local:TreeViewCell}}"
                            NavigateUri="{Binding}">
                            <Run Text="{Data:Ancestor Column.Text, {x:Type local:TreeViewCell}}"/>
                        </Hyperlink>
                    </TextBlock>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type local:TreeViewTemplateColumn}" TargetType="{x:Type local:TreeViewTemplateColumn}">
        <Setter Property="Template">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="{x:Type local:TreeViewTextColumn}" TargetType="{x:Type local:TreeViewTextColumn}">
        <Setter Property="Template">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl Content="{Binding}">
                        <ContentControl.Style>
                            <Style TargetType="{x:Type ContentControl}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Data:Ancestor Column.IsReadOnly, {x:Type local:TreeViewCell}}" Value="True">
                                        <Setter Property="ContentTemplate">
                                            <Setter.Value>
                                                <DataTemplate>
                                                    <TextBlock 
                                                        Text="{Binding}"
                                                        TextTrimming="{Data:Ancestor Column.TextTrimming, {x:Type local:TreeViewCell}}"
                                                        TextWrapping="{Data:Ancestor Column.TextWrapping, {x:Type local:TreeViewCell}}"/>
                                                </DataTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Data:Ancestor Column.IsReadOnly, {x:Type local:TreeViewCell}}" Value="False">
                                        <Setter Property="ContentTemplate">
                                            <Setter.Value>
                                                <DataTemplate>
                                                    <TextBox>
                                                        <e:Interaction.Behaviors>
                                                            <Behavior:BindingBehavior 
                                                                Binding="{Data:Ancestor Binding, {x:Type local:TreeViewCell}}"
                                                                Property="{x:Static TextBox.TextProperty}"/>
                                                        </e:Interaction.Behaviors>
                                                    </TextBox>
                                                </DataTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ContentControl.Style>
                    </ContentControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type local:TreeViewThumbnailColumn}" TargetType="{x:Type local:TreeViewThumbnailColumn}">
        <Setter Property="Template">
            <Setter.Value>
                <DataTemplate>
                    <local:Thumbnail
                        Height="{Data:Ancestor Column.ThumbnailHeight, {x:Type local:TreeViewCell}}"
                        Width="{Data:Ancestor Column.ThumbnailWidth, {x:Type local:TreeViewCell}}">
                        <e:Interaction.Behaviors>
                            <Behavior:BindingBehavior 
                                Binding="{Data:Ancestor Binding, {x:Type local:TreeViewCell}}"
                                Property="{x:Static local:Thumbnail.PathProperty}"/>
                        </e:Interaction.Behaviors>
                    </local:Thumbnail>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Width" Value="32"/>
    </Style>

    <Style x:Key="{x:Type local:TreeViewSwitchButtonColumn}" TargetType="{x:Type local:TreeViewSwitchButtonColumn}">
        <Setter Property="Template">
            <Setter.Value>
                <DataTemplate>
                    <local:SwitchButton 
                        IsEnabled="{Data:Ancestor Column.IsReadOnly, {x:Type local:TreeViewCell}, Converter={x:Static Converters:InverseBooleanConverter.Default}}"
                        IsThreeState="{Data:Ancestor Column.IsThreeState, {x:Type local:TreeViewCell}}">
                        <e:Interaction.Behaviors>
                            <Behavior:BindingBehavior 
                                Binding="{Data:Ancestor Binding, {x:Type local:TreeViewCell}}"
                                Property="{x:Static local:SwitchButton.IsCheckedProperty}"/>
                        </e:Interaction.Behaviors>
                    </local:SwitchButton>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>