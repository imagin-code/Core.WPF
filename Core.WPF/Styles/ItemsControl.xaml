<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:l="http://wpflocalizeextension.codeplex.com"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Markup="clr-namespace:Imagin.Core.Markup">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=Control}"/>
    </ResourceDictionary.MergedDictionaries>
    <!-- /// -->

    <DataTemplate x:Key="{x:Static Linq:XItemsControl.EmptyHorizontalTemplateKey}">
        <local:ImageElement
            HorizontalAlignment="Center"
            Opacity="0.3"
            Source="{Markup:SmallImage OpenBox.png}"
            SourceSize="32,32"
            VerticalAlignment="Center"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Linq:XItemsControl.EmptyVerticalTemplateKey}">
        <local:ImageElement
            HorizontalAlignment="Center"
            Opacity="0.3"
            Source="{Markup:SmallImage OpenBox.png}"
            SourceSize="42,42"
            VerticalAlignment="Center"/>
    </DataTemplate>

    <!-- /// -->

    <Style x:Key="{x:Type ItemsControl}" TargetType="{x:Type ItemsControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Linq:XItemsControl.EmptyTemplate" Value="{StaticResource {x:Static Linq:XItemsControl.EmptyVerticalTemplateKey}}"/>
        <Setter Property="Linq:XItemsControl.Extend" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ItemsControl}">
                    <local:ClipBorder
                        Background="{TemplateBinding Background}" 
                        BorderBrush="{TemplateBinding BorderBrush}"  
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <Grid>
                            <local:EmptyPresenter/>
                            <local:SelectionPresenter Visibility="{Data:VisibilityBinding From=FindAncestor, FromType={x:Type ItemsControl}, Path=(Linq:XItemsControl.CanDragSelect)}"/>
                            <ItemsPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                    </local:ClipBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
    </Style>

    <!-- /// -->

    <Style x:Key="{x:Type local:FlagGroup}" TargetType="{x:Type local:FlagGroup}" BasedOn="{StaticResource {x:Type ItemsControl}}">
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:SwitchButton 
                        Content="{Binding Value, Mode=OneWay}"
                        IsChecked="{Binding IsChecked, Mode=TwoWay}"
                        Margin="0,0,0,10"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- /// -->

    <Style x:Key="{x:Type local:MenuItemControl}" TargetType="{x:Type local:MenuItemControl}" BasedOn="{StaticResource {x:Type ItemsControl}}">
        <Setter Property="Linq:XItemsControl.EmptyTemplateVisibility" Value="Visible"/>
        <Setter Property="Padding" Value="0"/>
    </Style>

    <!-- /// -->

    <Style x:Key="{x:Static local:RadioGroup.ItemContainerStyleKey}" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Type FrameworkElement}}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{Data:Ancestor BorderBrush, {x:Type local:RadioGroup}}"/>
        <Setter Property="BorderThickness" Value="0,0,1,0"/>
        <Setter Property="Content" Value="{Binding}" />
        <Setter Property="ContentTemplate" Value="{Data:Ancestor ItemTemplate, local:RadioGroup}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Foreground" Value="{local:ThemeKey Text}"/>
        <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey Text}"/>
        <Setter Property="GroupName" Value="{Data:Ancestor GroupName, local:RadioGroup}"/>
        <Setter Property="Margin" Value="0,0,-1,0"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Padding" Value="7,5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border 
                        Background="{TemplateBinding Background}" 
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}">
                        <ContentPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey RadioGroupMouseOverBackground}" />
                <Setter Property="Cursor" Value="Hand" />
                <Setter Property="Foreground" Value="{local:ThemeKey RadioGroupMouseOverForeground}" />
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey RadioGroupMouseOverForeground}"/>
            </MultiTrigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{local:ThemeKey RadioGroupCheckedBackground}" />
                <Setter Property="Cursor" Value="Arrow" />
                <Setter Property="Foreground" Value="{local:ThemeKey RadioGroupCheckedForeground}" />
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey RadioGroupCheckedForeground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type local:RadioGroup}" TargetType="{x:Type local:RadioGroup}" BasedOn="{StaticResource {x:Type ItemsControl}}">
        <Setter Property="BorderBrush" Value="{local:ThemeKey RadioButtonBorder}"/>
        <Setter Property="Border.CornerRadius" Value="4"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{local:ThemeKey RadioButtonForeground}"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource {x:Static local:RadioGroup.ItemContainerStyleKey}}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>