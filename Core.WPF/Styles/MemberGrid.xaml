<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:e="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:l="http://wpflocalizeextension.codeplex.com"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Behavior="clr-namespace:Imagin.Core.Behavior"
    xmlns:Collections="clr-namespace:System.Collections;assembly=mscorlib"
    xmlns:Configuration="clr-namespace:Imagin.Core.Config" 
    xmlns:ComponentModel="clr-namespace:System.ComponentModel;assembly=System"
    xmlns:Conversion="clr-namespace:Imagin.Core.Conversion"
    xmlns:Core="clr-namespace:Imagin.Core"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Drawing="clr-namespace:System.Drawing;assembly=System.Drawing"
    xmlns:Input="clr-namespace:System.Windows.Input;assembly=System"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Markup="clr-namespace:Imagin.Core.Markup"
    xmlns:Media="clr-namespace:Imagin.Core.Media" 
    xmlns:Models="clr-namespace:Imagin.Core.Models"
    xmlns:Net="clr-namespace:System.Net;assembly=System"
    xmlns:Numerics="clr-namespace:Imagin.Core.Numerics;assembly=Imagin.Core"
    xmlns:ObjectModel="clr-namespace:Imagin.Core.Collections.ObjectModel" 
    xmlns:Reflection1="clr-namespace:Imagin.Core.Reflection"
    xmlns:Reflection2="clr-namespace:System.Reflection;assembly=mscorlib"
    xmlns:Reflection3="clr-namespace:Imagin.Core.Reflection;assembly=Imagin.Core"
    xmlns:SharedCore="clr-namespace:Imagin.Core;assembly=Imagin.Core"
    xmlns:Specialized="clr-namespace:System.Collections.Specialized;assembly=System"
    xmlns:System1="clr-namespace:System;assembly=mscorlib" 
    xmlns:System2="clr-namespace:System;assembly=System"
    xmlns:Text="clr-namespace:Imagin.Core.Text;assembly=Imagin.Core"
    xmlns:Validation="clr-namespace:Imagin.Core.Validation">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=Button}"/>
        <ResourceDictionary Source="{local:StyleKey Key=ComboBox}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Control}"/>
        <ResourceDictionary Source="{local:StyleKey Key=DataGrid}"/>
        <ResourceDictionary Source="{local:StyleKey Key=GroupItem}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Menu}"/>
        <ResourceDictionary Source="{local:StyleKey Key=PasswordBox}"/>
        <ResourceDictionary Source="{local:StyleKey Key=TabControl}"/>
        <ResourceDictionary Source="{local:StyleKey Key=TextBlock}"/>
        <ResourceDictionary Source="{local:StyleKey Key=TextBox}"/>
        <ResourceDictionary Source="{local:StyleKey Key=ToolBar}"/>
    </ResourceDictionary.MergedDictionaries>

    <!-- Constants -->

    <System1:Double x:Key="MemberToolTipMinWidth">360.0</System1:Double>

    <Thickness x:Key="ObjectMargin">16,0,0,0</Thickness>

    <!-- Styles -->

    <Style x:Key="{x:Static local:MemberGrid.ComboBoxStyleKey}" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="IsEnabled" Value="{Data:Bind Convert=Conversion:InverseBooleanConverter, Path=IsReadOnly}"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock x:Name="TextBlock"/>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Data:Ancestor DataContext.Localize, ComboBox}" Value="True">
                            <Setter TargetName="TextBlock" Property="Text" Value="{Data:LocalBinding {x:Type Conversion:NameAttributeConverter}}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Data:Ancestor DataContext.Localize, ComboBox}" Value="False">
                            <Setter TargetName="TextBlock" Property="Text" Value="{Data:Bind Convert={x:Type Conversion:NameAttributeConverter}}"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static local:MemberGrid.PasswordBoxStyleKey}" TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource {x:Type PasswordBox}}">
        <Setter Property="IsEnabled" Value="{Data:Bind Convert=Conversion:InverseBooleanConverter, Path=IsReadOnly}"/>
        <Setter Property="Linq:XPasswordBox.Placeholder" Value="{local:MemberPlaceholder}"/>
    </Style>

    <Style x:Key="{x:Static local:MemberGrid.TextBoxStyleKey}" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="MaxLength" Value="{Binding StyleAttribute.Length}"/>
        <Setter Property="IsReadOnly" Value="{Binding IsReadOnly}"/>
        <Setter Property="Linq:XTextBoxBase.Placeholder" Value="{local:MemberPlaceholder}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding StyleAttribute.StringType}" Value="Alpha">
                <Setter Property="Linq:XTextBoxBase.Regex" Value="{x:Static Text:Expressions.Letters}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding StyleAttribute.StringType}" Value="AlphaNumerical">
                <Setter Property="Linq:XTextBoxBase.Regex" Value="{x:Static Text:Expressions.LettersAndNumbers}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding StyleAttribute.StringType}" Value="Numerical">
                <Setter Property="Linq:XTextBoxBase.Regex" Value="{x:Static Text:Expressions.Numbers}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- ToolBar -->

    <Style x:Key="{x:Static local:MemberGrid.ToolBarMemberStyle}" TargetType="FrameworkElement">
        <Setter Property="Visibility" Value="{local:MemberVisibilityBinding}"/>
    </Style>

    <Style x:Key="{x:Static local:MemberGrid.DefaultGroupStyle}" TargetType="GroupItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupItem}">
                    <StackPanel Orientation="Horizontal">
                        <ItemsControl ItemsSource="{Binding Items}" Linq:XElement.RelativeTag="ItemsControl"
                            ItemContainerStyle="{StaticResource {x:Static local:MemberGrid.ToolBarMemberStyle}}" 
                            ItemTemplate="{Data:Self Tag.ItemTemplate}">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                        </ItemsControl>
                        <Reflection1:MemberVisibilitySelector x:Name="VisibilitySelector" Source="{Binding Items}"/>
                        <local:LineElement Orientation="Vertical"
                            Margin="5,2"
                            Visibility="{Data:VisibilityBinding IsGroupVisible, ElementName=VisibilitySelector}"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="{x:Static local:MemberGrid.ToolBarMemberTemplate}">
        <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,Auto"
            Linq:XPanel.VerticalContentAlignment="Center"
            Margin="0,0,5,0">
            <local:ChildElement x:Name="Name">
                <local:MemberNamePresenter Content="{Binding}" Margin="0,0,5,0"/>
            </local:ChildElement>
            <local:MemberValuePresenter Content="{Binding}" Orientation="Horizontal"/>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding HideName}" Value="True">
                <Setter TargetName="Name" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <Style x:Key="{x:Static local:MemberGrid.ToolBarGroupStyle}" TargetType="GroupItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupItem}">
                    <StackPanel Orientation="Horizontal">
                        <ItemsControl ItemsSource="{Binding Items}" Linq:XElement.RelativeTag="ToolBar"
                            ItemContainerStyle="{StaticResource {x:Static local:MemberGrid.ToolBarMemberStyle}}" 
                            ItemTemplate="{Data:Self Tag.ItemTemplate}">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                        </ItemsControl>
                        <Reflection1:MemberVisibilitySelector x:Name="VisibilitySelector" Source="{Binding Items}"/>
                        <local:LineElement Orientation="Vertical"
                            Margin="5,2"
                            Visibility="{Data:VisibilityBinding IsGroupVisible, ElementName=VisibilitySelector}"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="{x:Static local:MemberGrid.ToolBarTemplate}">
        <ToolBar ItemsSource="{Binding}"
            ItemContainerStyle="{StaticResource {x:Static local:MemberGrid.ToolBarMemberStyle}}"
            ItemTemplate="{StaticResource {x:Static local:MemberGrid.ToolBarMemberTemplate}}">
            <ToolBar.GroupStyle>
                <GroupStyle ContainerStyle="{StaticResource {x:Static local:MemberGrid.ToolBarGroupStyle}}">
                    <GroupStyle.Panel>
                        <ItemsPanelTemplate>
                            <StackPanel Orientation="Horizontal"/>
                        </ItemsPanelTemplate>
                    </GroupStyle.Panel>
                </GroupStyle>
            </ToolBar.GroupStyle>
            <ToolBar.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </ToolBar.ItemsPanel>
        </ToolBar>
    </DataTemplate>

    <!-- Pin -->

    <DataTemplate x:Key="{x:Static local:MemberGrid.HorizontalPinTemplate}">
        <ItemsControl
            Linq:XItemsControl.GroupsItself="True"
            ItemContainerStyle="{StaticResource {x:Static local:MemberGrid.ToolBarMemberStyle}}"
            ItemsSource="{Binding}">
            <ItemsControl.GroupStyle>
                <GroupStyle ContainerStyle="{StaticResource {x:Static local:MemberGrid.DefaultGroupStyle}}">
                    <GroupStyle.Panel>
                        <ItemsPanelTemplate>
                            <StackPanel Orientation="Horizontal"/>
                        </ItemsPanelTemplate>
                    </GroupStyle.Panel>
                </GroupStyle>
            </ItemsControl.GroupStyle>
            <ItemsControl.ItemTemplate>
                <DataTemplate DataType="Reflection1:MemberModel">
                    <ContentPresenter x:Name="Content" Content="{Binding}" Margin="2,0,0,0">
                        <ContentPresenter.ContentTemplate>
                            <DataTemplate DataType="Reflection1:MemberModel">
                                <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,*" Linq:XPanel.VerticalContentAlignment="Center">
                                    <local:MemberNamePresenter Content="{Binding}" Margin="0,0,5,0"/>
                                    <local:MemberValuePresenter Content="{Binding}"/>
                                </Grid>
                            </DataTemplate>
                        </ContentPresenter.ContentTemplate>
                    </ContentPresenter>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Data:PreviousData}" Value="{x:Null}">
                            <Setter TargetName="Content" Property="Margin" Value="0"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding HideName}" Value="True">
                            <Setter TargetName="Content" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate DataType="Reflection1:MemberModel">
                                        <local:MemberValuePresenter Content="{Binding}"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
        </ItemsControl>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.VerticalPinTemplate}">
        <ItemsControl
            ItemContainerStyle="{StaticResource {x:Static local:MemberGrid.ToolBarMemberStyle}}"
            ItemsSource="{Binding}">
            <ItemsControl.ItemTemplate>
                <DataTemplate DataType="Reflection1:MemberModel">
                    <ContentPresenter x:Name="Content" Content="{Binding}" Margin="0,2,0,0">
                        <ContentPresenter.ContentTemplate>
                            <DataTemplate DataType="Reflection1:MemberModel">
                                <Grid x:Name="Grid" Linq:XPanel.VerticalContentAlignment="Center">
                                    <local:MemberNamePresenter x:Name="Name" Content="{Binding}"/>
                                    <local:MemberValuePresenter x:Name="Value" Content="{Binding}"/>
                                </Grid>
                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding Orientation}" Value="Horizontal">
                                        <Setter TargetName="Grid" Property="Linq:XGrid.Columns" Value="Auto,*"/>
                                        <Setter TargetName="Grid" Property="Linq:XGrid.Rows" Value="*"/>
                                        <Setter TargetName="Name" Property="Margin" Value="0,0,5,0"/>
                                        <Setter TargetName="Value" Property="Grid.Column" Value="1"/>
                                        <Setter TargetName="Value" Property="Grid.Row" Value="0"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Orientation}" Value="Vertical">
                                        <Setter TargetName="Grid" Property="Linq:XGrid.Columns" Value="*"/>
                                        <Setter TargetName="Grid" Property="Linq:XGrid.Rows" Value="Auto,Auto"/>
                                        <Setter TargetName="Name" Property="Margin" Value="0,0,0,5"/>
                                        <Setter TargetName="Value" Property="Grid.Column" Value="0"/>
                                        <Setter TargetName="Value" Property="Grid.Row" Value="1"/>
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </ContentPresenter.ContentTemplate>
                    </ContentPresenter>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Data:PreviousData}" Value="{x:Null}">
                            <Setter TargetName="Content" Property="Margin" Value="0"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding HideName}" Value="True">
                            <Setter TargetName="Content" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate DataType="Reflection1:MemberModel">
                                        <local:MemberValuePresenter Content="{Binding}"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
        </ItemsControl>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.PinTemplate}" DataType="ListCollectionView">
        <ContentPresenter x:Name="Content" Content="{Binding}" ContentTemplate="{Markup:EmptyTemplate}"/>
        <DataTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Ancestor Orientation, local:MemberGrid}" Value="Horizontal"/>
                    <Condition Binding="{Data:CompareInt32Binding SourceCollection.Count, Result=Boolean, Type=Greater}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource {x:Static local:MemberGrid.HorizontalPinTemplate}}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Ancestor Orientation, local:MemberGrid}" Value="Vertical"/>
                    <Condition Binding="{Data:CompareInt32Binding SourceCollection.Count, Result=Boolean, Type=Greater}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource {x:Static local:MemberGrid.VerticalPinTemplate}}"/>
            </MultiDataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- View -->

    <DataTemplate x:Key="{x:Static local:MemberGrid.ViewSingleTemplate}" DataType="Reflection1:MemberCollection">
        <ContentPresenter x:Name="Content" Content="{Binding}" ContentTemplate="{Markup:EmptyTemplate}"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding CurrentView}" Value="Single">
                <Setter TargetName="Content" Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate DataType="Reflection1:MemberCollection">
                            <ComboBox ItemsSource="{Binding View}" 
                                Linq:XComboBox.Placeholder="{Markup:Loc Member}"
                                Linq:XItemsControl.GroupsItself="True"
                                SelectedItem="{Data:Bind SelectedMember, Way=2}">
                                <Linq:XItemsControl.GroupStyle>
                                    <GroupStyle ContainerStyle="{StaticResource {x:Type GroupItem}}">
                                        <GroupStyle.Panel>
                                            <ItemsPanelTemplate>
                                                <StackPanel/>
                                            </ItemsPanelTemplate>
                                        </GroupStyle.Panel>
                                    </GroupStyle>
                                </Linq:XItemsControl.GroupStyle>
                                <ComboBox.ItemTemplate>
                                    <DataTemplate DataType="Reflection1:MemberModel">
                                        <TextBlock Text="{Data:MemberNameBinding}"/>
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                                <ComboBox.Style>
                                    <Style TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
                                        <Setter Property="Linq:XElement.ToolTipTemplate" Value="{DynamicResource {x:Static local:MemberGrid.MemberToolTipKey}}"/>
                                        <Setter Property="Linq:XToolTip.Header" Value="{Binding SelectedMember}"/>
                                        <Setter Property="Linq:XToolTip.HeaderTemplate" Value="{DynamicResource {x:Static local:MemberGrid.MemberToolTipHeaderKey}}"/>
                                        <Setter Property="Linq:XToolTip.HeaderIcon" Value="{x:Null}"/>
                                        <Setter Property="Linq:XToolTip.MinimumWidth" Value="{DynamicResource MemberToolTipMinWidth}"/>
                                        <Setter Property="ToolTip" Value="{Binding SelectedMember}"/>
                                    </Style>
                                </ComboBox.Style>
                            </ComboBox>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.ViewTabTemplate}" DataType="Reflection1:MemberCollection">
        <ContentPresenter x:Name="Content" Content="{Binding}" ContentTemplate="{Markup:EmptyTemplate}"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding CurrentView}" Value="Tab">
                <Setter TargetName="Content" Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate DataType="Reflection1:MemberCollection">
                            <TabControl
                                ItemsSource="{Binding Tabs}" 
                                Linq:XTabControl.ContentVisibility="Collapsed"
                                SelectedIndex="{Data:Bind SelectedTab, Way=2}">
                                <TabControl.ItemContainerStyle>
                                    <Style TargetType="TabItem" BasedOn="{StaticResource {x:Type TabItem}}">
                                        <Setter Property="Linq:XElement.ToolTipTemplate" Value="{DynamicResource {x:Static local:MemberGrid.TabToolTipKey}}"/>
                                        <Setter Property="Linq:XToolTip.Header" Value="{Binding Name}"/>
                                        <Setter Property="Linq:XToolTip.HeaderIcon" Value="{Binding Image}"/>
                                        <Setter Property="Linq:XToolTip.MinimumWidth" Value="{DynamicResource MemberToolTipMinWidth}"/>
                                        <Setter Property="ToolTip" Value="{Binding}"/>
                                    </Style>
                                </TabControl.ItemContainerStyle>
                                <TabControl.ItemTemplate>
                                    <DataTemplate DataType="Reflection1:MemberTab">
                                        <StackPanel Orientation="Horizontal">
                                            <local:ImageElement Margin="0,0,5,0" Source="{Data:Bind Image, Convert=Conversion:StringToImageSourceConverter}" Visibility="{Data:VisibilityBinding Source, From=Self}"/>
                                            <TextBlock Text="{Binding Name}"/>
                                        </StackPanel>
                                    </DataTemplate>
                                </TabControl.ItemTemplate>
                            </TabControl>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- Caption -->

    <DataTemplate x:Key="{x:Static local:MemberGrid.CaptionTemplateKey}">
        <ContentPresenter Content="{Binding Caption}" ContentTemplate="{DynamicResource {x:Static local:MemberGrid.MemberMarkUpLeftTemplateKey}}"/>
    </DataTemplate>

    <!-- Color -->

    <DataTemplate x:Key="{x:Static local:MemberGrid.ColorBoxTemplateKey}">
        <local:ColorBox x:Name="ColorBox" 
            Height="25" Width="25"
            IsEnabled="{Data:Bind Convert=Conversion:InverseBooleanConverter, Path=IsReadOnly}">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static local:ColorBox.ValueProperty}" 
                    ConverterSelectorKey="{Binding TemplateType}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}">
                    <Behavior:ManualBindingBehavior.ConverterSelector>
                        <Conversion:DefaultConverterSelector>
                            <Conversion:ConverterContainer DataKey="{x:Type Color}" 
                                Converter="{x:Null}"/>
                            <Conversion:ConverterContainer DataKey="{x:Type Numerics:ByteVector4}" 
                                Converter="{x:Type Conversion:ByteVector4ToColorConverter}"/>
                            <Conversion:ConverterContainer DataKey="{x:Type SolidColorBrush}" 
                                Converter="{x:Type Conversion:SolidColorBrushToColorConverter}"/>
                            <Conversion:ConverterContainer DataKey="{x:Type Drawing:Color}" 
                                Converter="{x:Type Conversion:ColorToColorConverter}"/>
                        </Conversion:DefaultConverterSelector>
                    </Behavior:ManualBindingBehavior.ConverterSelector>
                </Behavior:ManualBindingBehavior>
            </e:Interaction.Behaviors>
        </local:ColorBox>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.ColorTextBoxTemplateKey}">
        <TextBox x:Name="TextBox"
            Linq:XTextBoxBase.Regex="{x:Static Text:Expressions.LettersAndNumbers}"
            MaxLength="8"
            Style="{DynamicResource {x:Static local:MemberGrid.TextBoxStyleKey}}">
            <TextBox.Resources>
                <Data:Reference x:Key="Member" Data="{Binding}"/>
            </TextBox.Resources>
            <Linq:XTextBoxBase.Left>
                <ObjectModel:DataTemplateCollection>
                    <DataTemplate>
                        <TextBlock Text="#"
                            Margin="5,0,0,0"
                            Opacity="0.5"/>
                    </DataTemplate>
                </ObjectModel:DataTemplateCollection>
            </Linq:XTextBoxBase.Left>
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static TextBox.TextProperty}" 
                    ConverterSelectorKey="{Binding TemplateType}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}">
                    <Behavior:ManualBindingBehavior.ConverterSelector>
                        <Conversion:DefaultConverterSelector>
                            <Conversion:ConverterContainer DataKey="{x:Type Color}" 
                                Converter="{x:Type Conversion:ColorToStringConverter}"/>
                            <Conversion:ConverterContainer DataKey="{x:Type Numerics:ByteVector4}" 
                                Converter="{x:Type Conversion:ByteVector4ToStringConverter}" Parameter="{Binding Data.StyleAttribute.Alpha, Source={StaticResource Member}}"/>
                            <Conversion:ConverterContainer DataKey="{x:Type SolidColorBrush}" 
                                Converter="{x:Type Conversion:SolidColorBrushToStringConverter}"/>
                            <Conversion:ConverterContainer DataKey="{x:Type Drawing:Color}" 
                                Converter="{x:Type Conversion:ColorToStringConverter}"/>
                        </Conversion:DefaultConverterSelector>
                    </Behavior:ManualBindingBehavior.ConverterSelector>
                </Behavior:ManualBindingBehavior>
            </e:Interaction.Behaviors>
        </TextBox>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.ColorModelTemplateKey}">
        <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,*">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:MemberGrid.ColorBoxTemplateKey}}"
                VerticalAlignment="Top"/>
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:MemberGrid.ObjectTemplate}}"
                Margin="5,0,0,0"/>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.ColorStringTemplateKey}">
        <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,*"
            Linq:XPanel.Spacing="0,0,5,0"
            Linq:XPanel.SpacingExcept="Last">
            <ContentPresenter Content="{Binding}" 
                ContentTemplate="{DynamicResource {x:Static local:MemberGrid.ColorBoxTemplateKey}}"/>
            <ContentPresenter Content="{Binding}"
                ContentTemplate="{DynamicResource {x:Static local:MemberGrid.ColorTextBoxTemplateKey}}"/>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.ColorTemplateKey}">
        <ContentPresenter x:Name="ContentPresenter" Content="{Binding}"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Style}" Value="{x:Null}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:MemberGrid.ColorStringTemplateKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:ColorStyle.Model}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:MemberGrid.ColorModelTemplateKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:ColorStyle.String}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:MemberGrid.ColorStringTemplateKey}}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- Enum -->
    
    <DataTemplate x:Key="{x:Static local:MemberGrid.EnumItemTemplateKey}">
        <StackPanel Linq:XPanel.VerticalContentAlignment="Center" Orientation="Horizontal">
            <StackPanel.Resources>
                <Data:Reference x:Key="Member" Data="{Data:Ancestor DataContext, ComboBox}"/>
            </StackPanel.Resources>
            <ContentPresenter x:Name="Image" Content="{Binding}" ContentTemplate="{Markup:EmptyTemplate}" Margin="0,0,5,0" Visibility="Collapsed"/>
            <ContentPresenter Content="{Binding}">
                <ContentPresenter.ContentTemplate>
                    <DataTemplate>
                        <TextBlock x:Name="Text"/>
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding Data.Localize, Source={StaticResource Member}}" Value="True">
                                <Setter TargetName="Text" Property="Text" Value="{Data:LocalBinding {x:Type Conversion:NameAttributeConverter}}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Data.Localize, Source={StaticResource Member}}" Value="False">
                                <Setter TargetName="Text" Property="Text" Value="{Data:Bind Convert=Conversion:NameAttributeConverter}"/>
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </ContentPresenter.ContentTemplate>
            </ContentPresenter>
        </StackPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Data:Bind {x:Type Conversion:EnumHasAttributeConverter}, {x:Type SharedCore:ColorAttribute}}" Value="True">
                <Setter TargetName="Image" Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Ellipse Fill="{Data:Bind Convert=Conversion:ColorAttributeConverter}" Height="16" Width="16"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter TargetName="Image" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Data:Bind {x:Type Conversion:EnumHasAttributeConverter}, {x:Type SharedCore:ImageAttribute}}" Value="True">
                <Setter TargetName="Image" Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <local:ImageElement Source="{Data:ImageAttributeBinding Type=Image}"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter TargetName="Image" Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- TextBox -->

    <ObjectModel:DataTemplateCollection x:Key="LeftTextTemplate">
        <DataTemplate>
            <Border>
                <Border.Resources>
                    <Data:Reference x:Key="Member" Data="{Data:Ancestor DataContext, {x:Type TextBoxBase}}"/>
                </Border.Resources>
                <TextBlock Margin="5,0,2.5,0" Opacity="0.5" Text="{Binding Data.LeftText, Source={StaticResource Member}}"/>
            </Border>
        </DataTemplate>
    </ObjectModel:DataTemplateCollection>

    <ObjectModel:DataTemplateCollection x:Key="RightTextTemplate">
        <DataTemplate>
            <Border>
                <Border.Resources>
                    <Data:Reference x:Key="Member" Data="{Data:Ancestor DataContext, {x:Type TextBoxBase}}"/>
                </Border.Resources>
                <TextBlock Margin="2.5,0,5,0" Opacity="0.5" Text="{Binding Data.RightText, Source={StaticResource Member}}"/>
            </Border>
        </DataTemplate>
    </ObjectModel:DataTemplateCollection>

    <!-- UpDown -->

    <DataTemplate x:Key="{x:Static local:MemberGrid.ByteUpDownKey}">
        <local:ByteUpDown CanUpDown="{Data:Bind Convert=Conversion:InverseBooleanConverter, Path=IsReadOnly}"
            Increment="{Binding Properties[Increment]}"
            IsReadOnly="{Binding IsReadOnly}"
            Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
            Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
            Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
            Maximum="{Binding Properties[Maximum]}"
            Minimum="{Binding Properties[Minimum]}"
            StringFormat="{Binding StringFormat}">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static local:ByteUpDown.TextProperty}" ConverterParameter="{Binding StringFormat}"
                    Converter="{x:Type Conversion:ByteToStringConverter}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
            </e:Interaction.Behaviors>
        </local:ByteUpDown>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.DateTimeUpDownKey}"/>

    <DataTemplate x:Key="{x:Static local:MemberGrid.DecimalUpDownKey}">
        <local:DecimalUpDown CanUpDown="{Data:Bind Convert=Conversion:InverseBooleanConverter, Path=IsReadOnly}"
            Increment="{Binding Properties[Increment]}"
            IsReadOnly="{Binding IsReadOnly}"
            Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
            Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
            Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
            Maximum="{Binding Properties[Maximum]}"
            Minimum="{Binding Properties[Minimum]}"
            StringFormat="{Binding StringFormat}">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static local:DecimalUpDown.TextProperty}" ConverterParameter="{Binding StringFormat}"
                    Converter="{x:Type Conversion:DecimalToStringConverter}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
            </e:Interaction.Behaviors>
        </local:DecimalUpDown>
    </DataTemplate>
    
    <DataTemplate x:Key="{x:Static local:MemberGrid.DoubleUpDownKey}">
        <local:DoubleUpDown CanUpDown="{Data:Bind Convert=Conversion:InverseBooleanConverter, Path=IsReadOnly}"
            Increment="{Binding Properties[Increment]}"
            IsReadOnly="{Binding IsReadOnly}"
            Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
            Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
            Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
            Maximum="{Binding Properties[Maximum]}"
            Minimum="{Binding Properties[Minimum]}"
            StringFormat="{Binding StringFormat}">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior x:Name="Behavior" Property="{x:Static local:DoubleUpDown.TextProperty}" ConverterParameter="{Binding StringFormat}"
                    Converter="{x:Type Conversion:DoubleToStringConverter}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
            </e:Interaction.Behaviors>
        </local:DoubleUpDown>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.Int16UpDownKey}">
        <local:Int16UpDown CanUpDown="{Data:Bind Convert=Conversion:InverseBooleanConverter, Path=IsReadOnly}"
            Increment="{Binding Properties[Increment]}"
            IsReadOnly="{Binding IsReadOnly}"
            Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
            Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
            Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
            Maximum="{Binding Properties[Maximum]}"
            Minimum="{Binding Properties[Minimum]}"
            StringFormat="{Binding StringFormat}">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static local:Int16UpDown.TextProperty}" ConverterParameter="{Binding StringFormat}"
                    Converter="{x:Type Conversion:Int16ToStringConverter}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
            </e:Interaction.Behaviors>
        </local:Int16UpDown>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.Int32UpDownKey}">
        <local:Int32UpDown CanUpDown="{Data:Bind Convert=Conversion:InverseBooleanConverter, Path=IsReadOnly}"
            Increment="{Binding Properties[Increment]}"
            IsReadOnly="{Binding IsReadOnly}"
            Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
            Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
            Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
            Maximum="{Binding Properties[Maximum]}"
            Minimum="{Binding Properties[Minimum]}"
            StringFormat="{Binding StringFormat}">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static local:Int32UpDown.TextProperty}" ConverterParameter="{Binding StringFormat}"
                    Converter="{x:Type Conversion:Int32ToStringConverter}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
            </e:Interaction.Behaviors>
        </local:Int32UpDown>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.Int64UpDownKey}">
        <local:Int64UpDown CanUpDown="{Data:Bind Convert=Conversion:InverseBooleanConverter, Path=IsReadOnly}"
            Increment="{Binding Properties[Increment]}"
            IsReadOnly="{Binding IsReadOnly}"
            Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
            Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
            Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
            Maximum="{Binding Properties[Maximum]}"
            Minimum="{Binding Properties[Minimum]}"
            StringFormat="{Binding StringFormat}">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static local:Int64UpDown.TextProperty}" ConverterParameter="{Binding StringFormat}"
                    Converter="{x:Type Conversion:Int64ToStringConverter}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
            </e:Interaction.Behaviors>
        </local:Int64UpDown>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.SingleUpDownKey}">
        <local:SingleUpDown CanUpDown="{Data:Bind Convert=Conversion:InverseBooleanConverter, Path=IsReadOnly}"
            Increment="{Binding Properties[Increment]}"
            IsReadOnly="{Binding IsReadOnly}"
            Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
            Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
            Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
            Maximum="{Binding Properties[Maximum]}"
            Minimum="{Binding Properties[Minimum]}"
            StringFormat="{Binding StringFormat}">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static local:SingleUpDown.TextProperty}" ConverterParameter="{Binding StringFormat}"
                    Converter="{x:Type Conversion:SingleToStringConverter}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
            </e:Interaction.Behaviors>
        </local:SingleUpDown>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.TimeSpanUpDownKey}"/>
    
    <DataTemplate x:Key="{x:Static local:MemberGrid.UDoubleUpDownKey}">
        <local:UDoubleUpDown CanUpDown="{Data:Bind Convert=Conversion:InverseBooleanConverter, Path=IsReadOnly}"
            Increment="{Binding Properties[Increment]}"
            IsReadOnly="{Binding IsReadOnly}"
            Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
            Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
            Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
            Maximum="{Binding Properties[Maximum]}"
            Minimum="{Binding Properties[Minimum]}"
            StringFormat="{Binding StringFormat}">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static local:UDoubleUpDown.TextProperty}" ConverterParameter="{Binding StringFormat}"
                    Converter="{x:Type Conversion:UDoubleToStringConverter}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
            </e:Interaction.Behaviors>
        </local:UDoubleUpDown>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.UInt16UpDownKey}">
        <local:UInt16UpDown CanUpDown="{Data:Bind Convert=Conversion:InverseBooleanConverter, Path=IsReadOnly}"
            Increment="{Binding Properties[Increment]}"
            IsReadOnly="{Binding IsReadOnly}"
            Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
            Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
            Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
            Maximum="{Binding Properties[Maximum]}"
            Minimum="{Binding Properties[Minimum]}"
            StringFormat="{Binding StringFormat}">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static local:UInt16UpDown.TextProperty}" ConverterParameter="{Binding StringFormat}"
                    Converter="{x:Type Conversion:UInt16ToStringConverter}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
            </e:Interaction.Behaviors>
        </local:UInt16UpDown>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.UInt32UpDownKey}">
        <local:UInt32UpDown CanUpDown="{Data:Bind Convert=Conversion:InverseBooleanConverter, Path=IsReadOnly}"
            Increment="{Binding Properties[Increment]}"
            IsReadOnly="{Binding IsReadOnly}"
            Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
            Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
            Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
            Maximum="{Binding Properties[Maximum]}"
            Minimum="{Binding Properties[Minimum]}"
            StringFormat="{Binding StringFormat}">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static local:UInt32UpDown.TextProperty}" ConverterParameter="{Binding StringFormat}"
                    Converter="{x:Type Conversion:UInt32ToStringConverter}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
            </e:Interaction.Behaviors>
        </local:UInt32UpDown>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.UInt64UpDownKey}">
        <local:UInt64UpDown CanUpDown="{Data:Bind Convert=Conversion:InverseBooleanConverter, Path=IsReadOnly}"
            Increment="{Binding Properties[Increment]}"
            IsReadOnly="{Binding IsReadOnly}"
            Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
            Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
            Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
            Maximum="{Binding Properties[Maximum]}"
            Minimum="{Binding Properties[Minimum]}"
            StringFormat="{Binding StringFormat}">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static local:UInt64UpDown.TextProperty}" ConverterParameter="{Binding StringFormat}"
                    Converter="{x:Type Conversion:UInt64ToStringConverter}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
            </e:Interaction.Behaviors>
        </local:UInt64UpDown>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.USingleUpDownKey}">
        <local:USingleUpDown CanUpDown="{Data:Bind Convert=Conversion:InverseBooleanConverter, Path=IsReadOnly}"
            Increment="{Binding Properties[Increment]}"
            IsReadOnly="{Binding IsReadOnly}"
            Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
            Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
            Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
            Maximum="{Binding Properties[Maximum]}"
            Minimum="{Binding Properties[Minimum]}"
            StringFormat="{Binding StringFormat}">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static local:USingleUpDown.TextProperty}" ConverterParameter="{Binding StringFormat}"
                    Converter="{x:Type Conversion:USingleToStringConverter}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
            </e:Interaction.Behaviors>
        </local:USingleUpDown>
    </DataTemplate>

    <!-- Collection -->

    <DataTemplate x:Key="{x:Static local:MemberGrid.CollectionToggleButtonTemplateKey}">
        <local:ImageToggleButton Source="{Binding Icon}">
            <local:ImageToggleButton.Resources>
                <Data:Reference x:Key="Member" 
                    Data="{Binding}"/>
                <Data:Reference x:Key="MemberGrid" 
                    Data="{Data:Ancestor local:MemberGrid}"/>
            </local:ImageToggleButton.Resources>
            <local:ImageToggleButton.Menu>
                <ContextMenu>
                    <ContextMenu.Resources>
                        <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Style.Triggers>
                                <Trigger Property="Tag" Value="{x:Null}">
                                    <Setter Property="Command" Value="{Binding Data.Command, Source={StaticResource Member}}"/>
                                    <Setter Property="CommandParameter" Value="{Binding}"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </ContextMenu.Resources>
                    <ContextMenu.ItemsSource>
                        <CompositeCollection>
                            <CollectionContainer Collection="{Binding Data.Value, Source={StaticResource Member}}"/>
                            <MenuItem Tag="*" Header="{Markup:Loc Prefix=(, Key=None, Suffix=), Lower=True}"
                                FontStyle="Italic" 
                                IsEnabled="False"
                                Visibility="{Data:CompareInt32Binding Data.Value.Count, Result=Visibility, Source={StaticResource Member}, Type=Equal}"/>
                            <Separator
                                Visibility="{Data:VisibilityBinding Data.IsReadOnly, Invert=True, Source={StaticResource Member}}"/>
                            <MenuItem Tag="*" Header="{Markup:Loc Clear}"
                                Command="{Binding Data.ClearCommand, Source={StaticResource MemberGrid}}"
                                CommandParameter="{Binding Data.Value, Source={StaticResource Member}}"
                                Visibility="{Data:VisibilityBinding Data.IsReadOnly, Invert=True, Source={StaticResource Member}}"/>
                        </CompositeCollection>
                    </ContextMenu.ItemsSource>
                    <ContextMenu.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Data:Bind Convert={x:Type Conversion:ToStringConverter}}"/>
                        </DataTemplate>
                    </ContextMenu.ItemTemplate>
                </ContextMenu>
            </local:ImageToggleButton.Menu>
        </local:ImageToggleButton>
    </DataTemplate>

    <!-- /// -->

    <DataTemplate x:Key="{x:Static local:MemberGrid.CollectionAddCommandTemplate}">
        <local:ImageButton Command="{Binding ItemAddCommand}"
            Source="{Markup:SmallImage Image=PlusRound}"/>
    </DataTemplate>
    
    <DataTemplate x:Key="{x:Static local:MemberGrid.CollectionAddTypeTemplate}">
        <local:ImageButton Command="{Binding InsertAboveCommand}"
            CommandParameter="{Binding ItemAddType}"
            Source="{Markup:SmallImage Image=PlusRound}"/>
    </DataTemplate>
    
    <DataTemplate x:Key="{x:Static local:MemberGrid.CollectionAddTypesTemplate}">
        <local:ImageButton ButtonVisibility="Visible" Command="{Binding InsertAboveCommand}" CommandParameter="{Binding ItemAddType}" Source="{Markup:SmallImage Image=PlusRound}">
            <local:ImageButton.Menu>
                <ContextMenu DataContext="{Data:Self PlacementTarget.DataContext}" 
                    ItemsSource="{Binding ItemAddTypes}"
                    Linq:XItemsControl.GroupsItself="True"
                    Linq:XItemsControl.GroupStyle="{StaticResource {x:Static Linq:XItemsControl.MenuGroupStyleKey}}">
                    <Linq:XItemsControl.GroupContainerStyle>
                        <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Command" Value="{Data:Ancestor DataContext.InsertAboveCommand, ContextMenu}"/>
                            <Setter Property="CommandParameter" Value="{Binding}"/>
                            <Setter Property="Header" Value="{Data:Bind Convert=Conversion:NameAttributeConverter}"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Data:Bind Convert=Conversion:GetTypeConverter}" Value="{x:Type Color}">
                                    <Setter Property="Header" Value="{Binding}"/>
                                    <Setter Property="HeaderTemplate">
                                        <Setter.Value>
                                            <DataTemplate>
                                                <TextBlock>#<Run Text="{Data:Bind Convert={x:Type Conversion:ColorToStringConverter}, Way=1}"/></TextBlock>
                                            </DataTemplate>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Icon" Value="{Binding}"/>
                                    <Setter Property="Linq:XMenuItem.IconTemplate">
                                        <Setter.Value>
                                            <DataTemplate>
                                                <Ellipse Stroke="Black" StrokeThickness="1" Fill="{Data:Bind Convert={x:Type Conversion:ColorToSolidColorBrushConverter}}" Height="16" Width="16"/>
                                            </DataTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Linq:XItemsControl.GroupContainerStyle>
                </ContextMenu>
            </local:ImageButton.Menu>
        </local:ImageButton>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.CollectionAddItemsTemplate}">
        <local:ImageButton Source="{Markup:SmallImage Image=PlusRound}">
            <local:ImageButton.Resources>
                <Data:Reference x:Key="Member" Data="{Binding}"/>
            </local:ImageButton.Resources>
            <local:ImageButton.Menu>
                <ContextMenu DataContext="{Binding Data, Source={StaticResource Member}}" 
                    Linq:XItemsControl.GroupsItself="True"
                    Linq:XItemsControl.GroupStyle="{StaticResource {x:Static Linq:XItemsControl.MenuGroupStyleKey}}"
                    ItemsSource="{Binding ItemAddItems}">
                    <Linq:XItemsControl.GroupContainerStyle>
                        <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Command" Value="{Data:Ancestor DataContext.InsertAboveCommand, ContextMenu}"/>
                            <Setter Property="CommandParameter" Value="{Binding}"/>
                            <Setter Property="Header" Value="{Binding Name}"/>
                        </Style>
                    </Linq:XItemsControl.GroupContainerStyle>
                </ContextMenu>
            </local:ImageButton.Menu>
        </local:ImageButton>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.CollectionTemplate}">
        <Grid Linq:XGrid.AutoRows="True" Linq:XGrid.Rows="Auto,*" Margin="0,2">
            <Grid.Resources>
                <Data:Reference x:Key="Member" 
                    Data="{Binding}"/>
                <Data:Reference x:Key="MemberGrid" 
                    Data="{Data:Ancestor local:MemberGrid}"/>
            </Grid.Resources>
            <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,Auto,Auto,Auto,Auto"
                Linq:XPanel.Spacing="0,0,5,0"
                Linq:XPanel.SpacingExcept="Last"
                Linq:XPanel.VerticalContentAlignment="Center"
                Margin="0,0,0,5">
                <ContentPresenter x:Name="Content" Content="{Binding}" ContentTemplate="{StaticResource {x:Static local:MemberGrid.CollectionAddTypesTemplate}}"
                    Linq:XElement.OverrideMargin="0,0,1,0"
                    ToolTip="{Markup:Loc Add}">
                    <ContentPresenter.Visibility>
                        <Data:MultiBind Convert="Conversion:BooleanToVisibilityMultiConverter">
                            <Data:Bind Convert="Conversion:InverseBooleanConverter" Path="IsReadOnly"/>
                            <Binding Path="StyleAttribute.CanAdd"/>
                        </Data:MultiBind>
                    </ContentPresenter.Visibility>
                </ContentPresenter>
                <local:ImageButton
                    Command="{Binding RemoveCommand}"
                    Source="{Markup:SmallImage Image=MinusRound}"
                    ToolTip="{Markup:Loc Remove}">
                    <local:ImageButton.Visibility>
                        <Data:MultiBind Convert="Conversion:BooleanToVisibilityMultiConverter">
                            <Data:Bind Convert="Conversion:InverseBooleanConverter" Path="IsReadOnly"/>
                            <Binding Path="StyleAttribute.CanRemove"/>
                        </Data:MultiBind>
                    </local:ImageButton.Visibility>
                </local:ImageButton>
                <local:ImageButton
                    Command="{Binding MoveUpCommand}"
                    Source="{Markup:SmallImage Image=TriangleUpRound}"
                    ToolTip="{Markup:Loc MoveUp}"
                    Visibility="{Data:VisibilityBinding StyleAttribute.CanMove}"/>
                <local:ImageButton
                    Command="{Binding MoveDownCommand}"
                    Source="{Markup:SmallImage Image=TriangleDownRound}"
                    ToolTip="{Markup:Loc MoveDown}"
                    Visibility="{Data:VisibilityBinding StyleAttribute.CanMove}"/>
                <local:ImageButton
                    Command="{Binding ClearCommand}"
                    Source="{Markup:SmallImage Image=XRound}"
                    ToolTip="{Markup:Loc Clear}"/>
            </Grid>
            <ListBox ItemsSource="{Binding Value}"
                BorderThickness="0"
                Linq:XItemsControl.ContainerIndexTracking="True"
                Padding="0"
                SelectedIndex="{Binding SelectedIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                SelectionMode="Single">
                <ListBox.ItemContainerStyle>
                    <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                        <Setter Property="Linq:XElement.ToolTipTemplate" Value="{DynamicResource {x:Static local:MemberGrid.ObjectToolTipKey}}"/>
                        <Setter Property="Linq:XToolTip.Header" Value="{Data:NameAttributeBinding}"/>
                        <Setter Property="Linq:XToolTip.HeaderIcon" Value="{Data:ImageAttributeBinding}"/>
                        <Setter Property="Linq:XToolTip.MinimumWidth" Value="{DynamicResource MemberToolTipMinWidth}"/>
                        <Setter Property="Margin" Value="0,1"/>
                        <Setter Property="Padding" Value="5"/>
                        <Setter Property="ToolTip" Value="{Binding}"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Data:PreviousData}" Value="{x:Null}">
                                <Setter Property="Margin" Value="0"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Data.IsReadOnly, Source={StaticResource Member}}" Value="False">
                                <Setter Property="ContextMenu">
                                    <Setter.Value>
                                        <ContextMenu DataContext="{Data:Self PlacementTarget.DataContext}">
                                            <MenuItem Header="{Markup:Loc Remove}"
                                                Command="{Binding Data.RemoveCommand, Source={StaticResource Member}}"
                                                CommandParameter="{Binding}"
                                                Icon="{Markup:SmallImage Image=Minus}"/>
                                            <Separator Linq:XSeparator.Header="{Markup:Loc Move}"/>
                                            <MenuItem Header="{Markup:Loc Up}"
                                                Command="{Binding Data.MoveUpCommand, Source={StaticResource Member}}"
                                                CommandParameter="{Binding}"
                                                Icon="{Markup:SmallImage Image=ArrowUp}"/>
                                            <MenuItem Header="{Markup:Loc Down}"
                                                Command="{Binding Data.MoveDownCommand, Source={StaticResource Member}}"
                                                CommandParameter="{Binding}"
                                                Icon="{Markup:SmallImage Image=ArrowDown}"/>
                                            <Separator Linq:XSeparator.Header="{Markup:Loc Insert}"/>
                                            <MenuItem Header="{Markup:Loc Above}"
                                                Command="{Binding Data.InsertAboveCommand, Source={StaticResource Member}}"
                                                CommandParameter="{Binding}"
                                                Icon="{Markup:SmallImage Image=InsertAbove}"/>
                                            <MenuItem Header="{Markup:Loc Below}"
                                                Command="{Binding Data.InsertBelowCommand, Source={StaticResource Member}}"
                                                CommandParameter="{Binding}"
                                                Icon="{Markup:SmallImage Image=InsertBelow}"/>
                                        </ContextMenu>
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ListBox.ItemContainerStyle>
                <ListBox.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel Width="{Data:Ancestor ActualWidth, ListBox}"/>
                    </ItemsPanelTemplate>
                </ListBox.ItemsPanel>
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,*">
                            <Grid.Resources>
                                <Data:ItemModelReference x:Key="Item" Index="{Data:Ancestor Path=(Linq:XItemsControl.ContainerIndex), FromType={x:Type ListBoxItem}}" Item="{Binding}" Member="{Binding Data, Source={StaticResource Member}}"/>
                            </Grid.Resources>
                            <local:BulletElement Bullet="{Binding Data.StyleAttribute.Bullet, Source={StaticResource Member}}" Value="{Data:Ancestor Path=(Linq:XItemsControl.ContainerIndex), Type={x:Type ListBoxItem}}"
                                Margin="0,0,5,0"/>
                            <local:MemberValuePresenter Content="{Binding Data, Source={StaticResource Item}}"/>
                        </Grid>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Data:EqualBinding ItemAddCommand}" Value="False">
                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource {x:Static local:MemberGrid.CollectionAddCommandTemplate}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Data:EqualBinding ItemAddItems}" Value="False">
                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource {x:Static local:MemberGrid.CollectionAddItemsTemplate}}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ItemAddCommand}" Value="{x:Null}"/>
                    <Condition Binding="{Binding ItemAddItems}" Value="{x:Null}"/>
                    <Condition Binding="{Binding ItemAddType}" Value="{x:Null}"/>
                    <Condition Binding="{Binding ItemAddTypes}" Value="{x:Null}"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Content" Property="ContentTemplate" Value="{Markup:EmptyTemplate}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ItemAddCommand}" Value="{x:Null}"/>
                    <Condition Binding="{Binding ItemAddItems}" Value="{x:Null}"/>
                    <Condition Binding="{Data:EqualBinding ItemAddType}" Value="False"/>
                    <Condition Binding="{Binding ItemAddTypes}" Value="{x:Null}"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource {x:Static local:MemberGrid.CollectionAddTypeTemplate}}"/>
            </MultiDataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- /// -->

    <ControlTemplate x:Key="MemberGroupItemTemplate" TargetType="{x:Type GroupItem}">
        <Expander x:Name="Expander"
            IsExpanded="True" 
            HorizontalAlignment="Stretch">
            <Expander.Header>
                <Grid Linq:XGrid.Columns="Auto,*">
                    <TextBlock FontSize="13">
                        <Run Text="{Binding Name, Mode=OneWay}" 
                            Foreground="{local:ThemeKey AccentLight}"/>
                        <Run Text="{Binding ItemCount, Mode=OneWay, StringFormat= ({0})}"
                                Foreground="{local:ThemeKey Text}"/>
                    </TextBlock>
                    <local:LineElement Grid.Column="1" Margin="5,0,0,0" Orientation="Horizontal"/>
                </Grid>
            </Expander.Header>
            <ItemsPresenter/>
        </Expander>
    </ControlTemplate>

    <!-- MemberTemplate -->

    <DataTemplate x:Key="{x:Static local:MemberGrid.HorizontalMemberTemplate}"
        DataType="Reflection1:MemberModel">
        <ContentPresenter x:Name="Content" Content="{Binding}">
            <ContentPresenter.ContentTemplate>
                <DataTemplate DataType="Reflection1:MemberModel">
                    <Grid Linq:XGrid.AutoColumns="True" Linq:XPanel.VerticalContentAlignment="Top">
                        <Grid.Resources>
                            <Data:Reference x:Key="MemberGrid" Data="{Data:Ancestor local:MemberGrid}"/>
                        </Grid.Resources>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="NameColumn" Width="{Data:Bind Data.NameColumnWidth, Convert=Conversion:DataGridLengthConverter, Source={StaticResource MemberGrid}}"/>
                            <ColumnDefinition x:Name="ValueColumn" Width="{Data:Bind Data.ValueColumnWidth, Convert=Conversion:DataGridLengthConverter, Source={StaticResource MemberGrid}}"/>
                        </Grid.ColumnDefinitions>
                        <local:MemberNamePresenter x:Name="Name" Content="{Binding}" Margin="0,0,5,0"/>
                        <local:MemberValuePresenter Content="{Binding}"/>
                    </Grid>
                </DataTemplate>
            </ContentPresenter.ContentTemplate>
        </ContentPresenter>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding HideName}" Value="True">
                <Setter TargetName="Content" Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate DataType="Reflection1:MemberModel">
                            <local:MemberValuePresenter Content="{Binding}"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.VerticalMemberTemplate}" 
        DataType="Reflection1:MemberModel">
        <ContentPresenter x:Name="Content" Content="{Binding}">
            <ContentPresenter.ContentTemplate>
                <DataTemplate DataType="Reflection1:MemberModel">
                    <local:MemberValuePresenter Content="{Binding}"/>
                </DataTemplate>
            </ContentPresenter.ContentTemplate>
        </ContentPresenter>
        <DataTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding HideName}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Content" Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate DataType="Reflection1:MemberModel">
                            <Expander IsExpanded="True">
                                <Expander.Header>
                                    <local:MemberNamePresenter Content="{Binding}"/>
                                </Expander.Header>
                                <local:MemberValuePresenter Content="{Binding}" Margin="{StaticResource ObjectMargin}"/>
                            </Expander>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.MemberTemplate}" 
        DataType="Reflection1:MemberModel">
        <ContentPresenter x:Name="Content" Content="{Binding}"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Orientation}" Value="Horizontal">
                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource {x:Static local:MemberGrid.HorizontalMemberTemplate}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Orientation}" Value="Vertical">
                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource {x:Static local:MemberGrid.VerticalMemberTemplate}}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- Method -->

    <DataTemplate x:Key="{x:Static local:MemberGrid.MethodTemplateKey}">
        <ContentPresenter x:Name="Content" Content="{Binding}">
            <ContentPresenter.ContentTemplate>
                <DataTemplate>
                    <Button x:Name="Button"
                        Command="{Binding ExecuteAllCommand}" 
                        Content="{Data:LocalBinding Content}"
                        Linq:XButton.Image="{Binding Icon}"/>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:ButtonStyle.Cancel}">
                            <Setter TargetName="Button" Property="IsCancel" Value="True"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:ButtonStyle.Default}">
                            <Setter TargetName="Button" Property="IsDefault" Value="True"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </ContentPresenter.ContentTemplate>
        </ContentPresenter>
        <DataTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:EqualBinding Icon}" Value="False"/>
                    <Condition Binding="{Binding Style}" Value="{x:Null}"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Content" Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <local:ImageButton x:Name="ImageButton" Command="{Binding ExecuteAllCommand}" Source="{Binding Icon}"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- Object -->

    <DataTemplate x:Key="{x:Static local:MemberGrid.ObjectTemplate}">
        <Grid x:Name="Grid" Linq:XGrid.AutoRows="True" Linq:XGrid.Rows="*,Auto">
            <ContentPresenter x:Name="Members" Content="{Binding}">
                <ContentPresenter.ContentTemplate>
                    <DataTemplate>
                        <GroupBox x:Name="GroupBox" BorderBrush="#12000000">
                            <Grid Linq:XGrid.AutoRows="True" Linq:XGrid.Rows="Auto,Auto,Auto,*,Auto,Auto">
                                <!-- View -->
                                <Grid Margin="0,0,0,5" Visibility="{Data:EqualBinding Members.CurrentView, {x:Static Reflection3:MemberView.All}, Invert=True, Result=Visibility}">
                                    <!-- View > Single-->
                                    <ContentPresenter Content="{Binding Members}" ContentTemplate="{StaticResource {x:Static local:MemberGrid.ViewSingleTemplate}}"
                                        Visibility="{Data:EqualBinding Members.CurrentView, {x:Static Reflection3:MemberView.Single}, Result=Visibility}"/>
                                    <!-- View > Tab -->
                                    <ContentPresenter Content="{Binding Members}" ContentTemplate="{StaticResource {x:Static local:MemberGrid.ViewTabTemplate}}"
                                        Visibility="{Data:EqualBinding Members.CurrentView, {x:Static Reflection3:MemberView.Tab}, Result=Visibility}"/>
                                </Grid>

                                <!-- (Above) -->
                                <local:BottomBorder Margin="0,0,0,5" Padding="0,0,0,5"
                                    Visibility="{Data:CompareInt32Binding Members.Above.Source.Count, Result=Visibility, Type=Greater}">
                                    <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,*,Auto">
                                        <ContentPresenter Content="{Binding Members.AboveLeft.View}"
                                            ContentTemplate="{StaticResource {x:Static local:MemberGrid.ToolBarTemplate}}"/>
                                        <ContentPresenter Content="{Binding Members.Above.View}"
                                            ContentTemplate="{StaticResource {x:Static local:MemberGrid.ToolBarTemplate}}"/>
                                        <ContentPresenter Content="{Binding Members.AboveRight.View}"
                                            ContentTemplate="{StaticResource {x:Static local:MemberGrid.ToolBarTemplate}}"/>
                                    </Grid>
                                </local:BottomBorder>

                                <!-- (Before) -->
                                <local:BottomBorder Margin="0,0,0,5" Padding="0,0,0,5"
                                    Visibility="{Data:CompareInt32Binding Members.Before.Source.Count, Result=Visibility, Type=Greater}">
                                    <ContentPresenter Content="{Binding Members.Before.View}" 
                                        ContentTemplate="{StaticResource {x:Static local:MemberGrid.PinTemplate}}"/>
                                </local:BottomBorder>

                                <!-- Content -->
                                <ItemsControl ItemsSource="{Binding Members.View}"
                                    ItemTemplate="{StaticResource {x:Static local:MemberGrid.MemberTemplate}}"
                                    Linq:XItemsControl.GroupsItself="True"
                                    Visibility="{Data:VisibilityBinding Members.Count}">
                                    <ItemsControl.GroupStyle>
                                        <GroupStyle>
                                            <GroupStyle.ContainerStyle>
                                                <Style TargetType="GroupItem">
                                                    <Setter Property="Template" Value="{StaticResource MemberGroupItemTemplate}"/>
                                                </Style>
                                            </GroupStyle.ContainerStyle>
                                            <GroupStyle.Panel>
                                                <ItemsPanelTemplate>
                                                    <StackPanel/>
                                                </ItemsPanelTemplate>
                                            </GroupStyle.Panel>
                                        </GroupStyle>
                                    </ItemsControl.GroupStyle>
                                    <ItemsControl.ItemContainerStyle>
                                        <Style TargetType="ContentPresenter">
                                            <Setter Property="Margin" Value="0,2,0,0"/>
                                            <Setter Property="Visibility" Value="{local:MemberVisibilityBinding}"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Data:PreviousData}" Value="{x:Null}">
                                                    <Setter Property="Margin" Value="0"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ItemsControl.ItemContainerStyle>
                                    <ItemsControl.Style>
                                        <Style TargetType="ItemsControl">
                                            <Setter Property="OverridesDefaultStyle" Value="True"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="ItemsControl">
                                                        <ItemsPresenter/>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ItemsControl.Style>
                                </ItemsControl>

                                <!-- (After) -->
                                <local:TopBorder Margin="0,5,0,0" Padding="0,5,0,0"
                                    Visibility="{Data:CompareInt32Binding Members.After.Source.Count, Result=Visibility, Type=Greater}">
                                    <ContentPresenter Content="{Binding Members.After.View}" 
                                        ContentTemplate="{StaticResource {x:Static local:MemberGrid.PinTemplate}}"/>
                                </local:TopBorder>

                                <!-- (Below) -->
                                <local:TopBorder Margin="0,5,0,0" Padding="0,5,0,0"
                                    Visibility="{Data:CompareInt32Binding Members.Below.Source.Count, Result=Visibility, Type=Greater}">
                                    <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,*,Auto">
                                        <ContentPresenter Content="{Binding Members.BelowLeft.View}"
                                            ContentTemplate="{StaticResource {x:Static local:MemberGrid.ToolBarTemplate}}"/>
                                        <ContentPresenter Content="{Binding Members.Below.View}"
                                            ContentTemplate="{StaticResource {x:Static local:MemberGrid.ToolBarTemplate}}"/>
                                        <ContentPresenter Content="{Binding Members.BelowRight.View}"
                                            ContentTemplate="{StaticResource {x:Static local:MemberGrid.ToolBarTemplate}}"/>
                                    </Grid>
                                </local:TopBorder>
                            </Grid>
                        </GroupBox>
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding HideName}" Value="True">
                                <Setter TargetName="GroupBox" Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="GroupBox">
                                            <ContentPresenter ContentSource="Content"/>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </ContentPresenter.ContentTemplate>
            </ContentPresenter>
            <ContentPresenter x:Name="Items" Content="{Binding}" ContentTemplate="{Markup:EmptyTemplate}"/>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Members}" Value="{x:Null}">
                <Setter TargetName="Grid" Property="Linq:XGrid.Rows" Value="Auto,*"/>
                <Setter TargetName="Members" Property="ContentTemplate" Value="{Markup:EmptyTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type Specialized:INotifyCollectionChanged}">
                <Setter TargetName="Items" Property="ContentTemplate" Value="{StaticResource {x:Static local:MemberGrid.CollectionTemplate}}"/>
            </DataTrigger>
            <MultiDataTrigger >
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:EqualBinding Members}" Value="False"/>
                    <Condition Binding="{Binding TemplateType}" Value="{x:Type Specialized:INotifyCollectionChanged}"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Items" Property="Margin" Value="0,5,0,0"/>
            </MultiDataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.ObjectButtonTemplate}">
        <ContentPresenter x:Name="ContentPresenter" Content="{Binding}">
            <ContentPresenter.ContentTemplate>
                <DataTemplate>
                    <local:ImageButton
                        Command="{Data:Ancestor EditCommand, {x:Type local:MemberGrid}}"
                        CommandParameter="{Binding}"
                        HorizontalAlignment="Stretch"
                        Source="{Binding Icon}"
                        VerticalAlignment="Center"/>
                </DataTemplate>
            </ContentPresenter.ContentTemplate>
        </ContentPresenter>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Icon}" Value="{x:Null}">
                <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Button x:Name="Button" 
                                Content="{Binding Content}"
                                Command="{Data:Ancestor EditCommand, {x:Type local:MemberGrid}}"
                                CommandParameter="{Binding}"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Center"/>
                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{Binding Content}" Value="{x:Null}">
                                    <Setter TargetName="Button" Property="Content" Value="{Markup:Loc Edit}"/>
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- Matrix -->

    <DataTemplate x:Key="{x:Static local:MemberGrid.MatrixTemplateKey}">
        <StackPanel>
            <Slider
                Margin="0,0,0,5"
                Maximum="{Data:Ancestor ActualWidth, StackPanel}"
                Minimum="32"
                Value="{Data:Bind Zoom, ElementName=Matrix, Trigger=PropertyChanged, Way=2}"/>
            <Button Content="Invert"
                Command="{Binding InvertCommand, ElementName=Matrix}"
                Margin="0,0,0,5"/>
            <local:MatrixControl x:Name="Matrix"
                HorizontalAlignment="Left"
                Zoom="128"/>
        </StackPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type Numerics:DoubleMatrix}">
                <Setter TargetName="Matrix" Property="Matrix" Value="{Data:Bind Value, Trigger=PropertyChanged, Way=2}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type SharedCore:Matrix}">
                <Setter TargetName="Matrix" Property="Matrix" Value="{Data:Bind Value, ConvertFrom={x:Type SharedCore:Matrix}, ConvertTo={x:Type Numerics:DoubleMatrix}, Trigger=PropertyChanged, Way=2}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- Range -->

    <DataTemplate x:Key="{x:Static local:MemberGrid.RangeSliderTemplateKey}">
        <DataTemplate.Resources>
            <Style x:Key="GradientSliderDecreaseButtonStyle" TargetType="{x:Type RepeatButton}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Background">
                    <Setter.Value>
                        <Data:MultiBind Convert="{x:Type Conversion:GradientMultiConverter}" ConverterParameter="0">
                            <Data:Ancestor Path="DataContext.RangeGradient" Type="Slider"/>
                            <Data:Ancestor Path="Value" Type="Slider"/>
                            <Data:Ancestor Path="Minimum" Type="Slider"/>
                            <Data:Ancestor Path="Maximum" Type="Slider"/>
                        </Data:MultiBind>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Height" Value="6"/>
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Border 
                                Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Height="{TemplateBinding Height}"
                                Width="{TemplateBinding Width}"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="GradientSliderIncreaseButtonStyle" TargetType="{x:Type RepeatButton}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Background" Value="#22000000" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Focusable" Value="False" />
                <Setter Property="Height" Value="6"/>
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Border 
                                Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Width="{TemplateBinding Width}"
                                Height="{TemplateBinding Height}" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="GradientSliderThumbStyle" TargetType="{x:Type Thumb}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Background">
                    <Setter.Value>
                        <Data:MultiBind Convert="{x:Type Conversion:GradientMultiConverter}" ConverterParameter="1">
                            <Data:Ancestor Path="DataContext.RangeGradient" Type="Slider"/>
                            <Data:Ancestor Path="Value" Type="Slider"/>
                            <Data:Ancestor Path="Minimum" Type="Slider"/>
                            <Data:Ancestor Path="Maximum" Type="Slider"/>
                        </Data:MultiBind>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Height" Value="16"/>
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="Width" Value="10"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Border 
                                Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                ClipToBounds="True" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="GradientSliderStyle" TargetType="{x:Type Slider}">
                <Setter Property="Focusable" Value="False" />
                <Setter Property="IsSnapToTickEnabled" Value="True" />
                <Setter Property="MinWidth" Value="48" />
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Slider}">
                            <Track x:Name="PART_Track" 
                                Grid.Row="1" 
                                Height="{TemplateBinding Height}" 
                                HorizontalAlignment="{TemplateBinding HorizontalAlignment}" 
                                VerticalAlignment="{TemplateBinding VerticalAlignment}" 
                                Width="{TemplateBinding Width}">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton x:Name="PART_DecreaseRepeatButton" 
                                        Command="Slider.DecreaseLarge"
                                        Style="{StaticResource GradientSliderDecreaseButtonStyle}"/>
                                </Track.DecreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Style="{StaticResource GradientSliderThumbStyle}"/>
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton x:Name="PART_IncreaseRepeatButton"  
                                        Command="Slider.IncreaseLarge"
                                        Style="{StaticResource GradientSliderIncreaseButtonStyle}"/>
                                </Track.IncreaseRepeatButton>
                            </Track>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Cursor" Value="Arrow" />
                        <Setter Property="Opacity" Value="0.6" />
                    </Trigger>
                </Style.Triggers>
            </Style>
        </DataTemplate.Resources>
        <Slider x:Name="Slider"
            IsEnabled="False"
            Margin="0,5"
            Maximum="{Data:Bind Convert=Conversion:ObjectToDoubleConverter, Path=Properties[Maximum]}"
            Minimum="{Data:Bind Convert=Conversion:ObjectToDoubleConverter, Path=Properties[Minimum]}"
            TickFrequency="{Data:Bind Convert=Conversion:ObjectToDoubleConverter, Path=Properties[Increment]}"
            VerticalAlignment="Center">
            <e:Interaction.Behaviors>
                <Behavior:ManualBindingBehavior Property="{x:Static Slider.ValueProperty}" 
                    ConverterSelectorKey="{Binding TemplateType}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}">
                    <Behavior:ManualBindingBehavior.ConverterSelector>
                        <Conversion:DefaultConverterSelector>
                            <Conversion:ConverterContainer DataKey="{x:Type System1:Byte}" 
                                Converter="{x:Type Conversion:ByteToDoubleConverter}"/>
                            <Conversion:ConverterContainer DataKey="{x:Type System1:DateTime}" 
                                Converter="{x:Type Conversion:DateTimeToDoubleConverter}"/>
                            <Conversion:ConverterContainer DataKey="{x:Type System1:Decimal}" 
                                Converter="{x:Type Conversion:DecimalToDoubleConverter}"/>
                            <Conversion:ConverterContainer DataKey="{x:Type System1:Double}" 
                                Converter="{x:Null}"/>
                            <Conversion:ConverterContainer DataKey="{x:Type System1:Int16}" 
                                Converter="{x:Type Conversion:Int16ToDoubleConverter}"/>
                            <Conversion:ConverterContainer DataKey="{x:Type System1:Int32}" 
                                Converter="{x:Type Conversion:Int32ToDoubleConverter}"/>
                            <Conversion:ConverterContainer DataKey="{x:Type System1:Int64}" 
                                Converter="{x:Type Conversion:Int64ToDoubleConverter}"/>
                            <Conversion:ConverterContainer DataKey="{x:Type System1:Single}" 
                                Converter="{x:Type Conversion:SingleToDoubleConverter}"/>
                            <Conversion:ConverterContainer DataKey="{x:Type System1:TimeSpan}" 
                                Converter="{x:Type Conversion:TimeSpanToDoubleConverter}"/>
                            <Conversion:ConverterContainer DataKey="{x:Type System1:UInt16}" 
                                Converter="{x:Type Conversion:UInt16ToDoubleConverter}"/>
                            <Conversion:ConverterContainer DataKey="{x:Type System1:UInt32}" 
                                Converter="{x:Type Conversion:UInt32ToDoubleConverter}"/>
                            <Conversion:ConverterContainer DataKey="{x:Type System1:UInt64}" 
                                Converter="{x:Type Conversion:UInt64ToDoubleConverter}"/>
                            <Conversion:ConverterContainer DataKey="{x:Type SharedCore:UDouble}" 
                                Converter="{x:Type Conversion:UDoubleToDoubleConverter}"/>
                            <Conversion:ConverterContainer DataKey="{x:Type SharedCore:USingle}" 
                                Converter="{x:Type Conversion:USingleToDoubleConverter}"/>
                        </Conversion:DefaultConverterSelector>
                    </Behavior:ManualBindingBehavior.ConverterSelector>
                </Behavior:ManualBindingBehavior>
            </e:Interaction.Behaviors>
        </Slider>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Data:EqualBinding RangeGradient}" Value="False">
                <Setter TargetName="Slider" Property="Style" Value="{StaticResource GradientSliderStyle}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsReadOnly}" Value="False">
                <Setter TargetName="Slider" Property="IsEnabled" Value="True"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.RangeUpDownTemplateKey}">
        <ContentPresenter x:Name="Content" Content="{Binding}"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type System1:Byte}">
                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource {x:Static local:MemberGrid.ByteUpDownKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type System1:DateTime}">
                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource {x:Static local:MemberGrid.DateTimeUpDownKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type System1:Decimal}">
                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource {x:Static local:MemberGrid.DecimalUpDownKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type System1:Double}">
                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource {x:Static local:MemberGrid.DoubleUpDownKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type System1:Int16}">
                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource {x:Static local:MemberGrid.Int16UpDownKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type System1:Int32}">
                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource {x:Static local:MemberGrid.Int32UpDownKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type System1:Int64}">
                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource {x:Static local:MemberGrid.Int64UpDownKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type System1:Single}">
                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource {x:Static local:MemberGrid.SingleUpDownKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type System1:TimeSpan}">
                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource {x:Static local:MemberGrid.TimeSpanUpDownKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type System1:UInt16}">
                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource {x:Static local:MemberGrid.UInt16UpDownKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type System1:UInt32}">
                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource {x:Static local:MemberGrid.UInt32UpDownKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type System1:UInt64}">
                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource {x:Static local:MemberGrid.UInt64UpDownKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type SharedCore:UDouble}">
                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource {x:Static local:MemberGrid.UDoubleUpDownKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type SharedCore:USingle}">
                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource {x:Static local:MemberGrid.USingleUpDownKey}}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.RangeTemplateKey}">
        <ContentPresenter x:Name="Content" Content="{Binding}"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Style}" Value="{x:Null}">
                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource {x:Static local:MemberGrid.RangeUpDownTemplateKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Properties[RangeStyle]}" Value="Default">
                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource {x:Static local:MemberGrid.RangeUpDownTemplateKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Properties[RangeStyle]}" Value="Slider">
                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource {x:Static local:MemberGrid.RangeSliderTemplateKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Properties[RangeStyle]}" Value="UpDown">
                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource {x:Static local:MemberGrid.RangeUpDownTemplateKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Properties[RangeStyle]}" Value="Both">
                <Setter TargetName="Content" Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="60*,40*">
                                <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource {x:Static local:MemberGrid.RangeSliderTemplateKey}}"
                                    Margin="0,0,5,0"/>
                                <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource {x:Static local:MemberGrid.RangeUpDownTemplateKey}}"/>
                            </Grid>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- TEMPLATES -->

    <local:MemberTemplateSelector x:Key="MemberTemplateSelector">
        <!-- ... Imagin.Core -->
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type Core:Margin}">
            <local:ThicknessControl
                HorizontalAlignment="Stretch"
                IsEnabled="{Data:Bind IsReadOnly, Convert={x:Type Conversion:InverseBooleanConverter}}">
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static local:ThicknessControl.ThicknessProperty}" 
                        Converter="{x:Type Conversion:MarginToThicknessConverter}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
            </local:ThicknessControl>
        </local:KeyTemplate>

        <!-- ... Imagin.Core (Shared) -->
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type SharedCore:CardinalDirection}">
            <local:DirectionControl HorizontalAlignment="Left">
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static local:DirectionControl.DirectionProperty}" 
                        Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
            </local:DirectionControl>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type SharedCore:UDouble}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:MemberGrid.RangeTemplateKey}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type SharedCore:USingle}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:MemberGrid.RangeTemplateKey}}"/>
        </local:KeyTemplate>

        <!-- ... Imagin.Core.Configuration -->
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type Configuration:ApplicationTheme}">
            <ComboBox>
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static ComboBox.SelectedItemProperty}" 
                        Mode="TwoWay" Path="Theme" Source="{Data:Options}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
                <ComboBox.ItemsSource>
                    <CompositeCollection>
                        <local:ComboBoxSeparator Content="{Markup:Loc Default}"/>
                        <CollectionContainer Collection="{Markup:Enumerate Core:DefaultThemes, String=True}"/>
                        <local:ComboBoxSeparator Content="{Markup:Loc Custom}" Visibility="{Data:CompareInt32Binding CustomThemes.Count, GlobalSource=Resources, Result=Visibility, Type=Greater}"/>
                        <CollectionContainer Collection="{Data:Bind CustomThemes, GlobalSource=Resources}"/>
                    </CompositeCollection>
                </ComboBox.ItemsSource>
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Data:Bind Convert={x:Type Conversion:FileNameConverter}, ConverterParameter=0}"/>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>
        </local:KeyTemplate>

        <!-- ... Imagin.Core.Numerics -->
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type Numerics:ByteVector4}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:MemberGrid.ColorTemplateKey}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type SharedCore:Matrix}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource {x:Static local:MemberGrid.MatrixTemplateKey}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type Numerics:DoubleMatrix}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource {x:Static local:MemberGrid.MatrixTemplateKey}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type Numerics:Int32LineCollection}">
            <StackPanel Margin="5">
                <Slider
                    Margin="0,0,0,5"
                    Maximum="{Data:Ancestor ActualWidth, StackPanel}"
                    Minimum="64"
                    Value="{Data:Bind Width, ElementName=PatternControl, Trigger=PropertyChanged, Way=2}"/>
                <local:PatternControl x:Name="PatternControl"
                    BorderThickness="0"
                    CanvasLength="180"
                    DotLength="32"
                    HorizontalAlignment="Left"
                    InnerDotLength="24"
                    IsEnabled="{Data:Bind Convert=Conversion:InverseBooleanConverter, Path=IsReadOnly}">
                    <e:Interaction.Behaviors>
                        <Behavior:ManualBindingBehavior Property="{x:Static local:PatternControl.PatternProperty}" 
                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                    </e:Interaction.Behaviors>
                </local:PatternControl>
            </StackPanel>
        </local:KeyTemplate>

        <!-- ... Imagin.Core.Media -->
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type Media:Gradient}">
            <Button Command="{Data:Ancestor EditCommand, local:MemberGrid}" CommandParameter="{Binding}" 
                HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"
                IsEnabled="{Data:Bind IsReadOnly, Convert={x:Type Conversion:InverseBooleanConverter}}"
                Padding="1">
                <local:GradientBox DialogEvent="None"
                    HorizontalAlignment="Stretch"
                    Width="Auto">
                    <e:Interaction.Behaviors>
                        <Behavior:ManualBindingBehavior Property="{x:Static local:GradientBox.ValueProperty}" 
                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                    </e:Interaction.Behaviors>
                </local:GradientBox>
            </Button>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type Media:GradientPreview}">
            <Border>
                <Border.Style>
                    <Style TargetType="Border">
                        <Setter Property="Background" Value="{x:Static Media:CheckerBrush.Default}"/>
                        <Setter Property="BorderBrush" Value="Black"/>
                        <Setter Property="BorderThickness" Value="1"/>
                        <Setter Property="Height" Value="42"/>
                    </Style>
                </Border.Style>
                <Rectangle DataContext="{Binding Value.Steps}" Fill="{Media:GradientStepBinding}"/>
            </Border>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type Media:PointShape}">
            <StackPanel Margin="5">
                <Slider
                    Margin="0,0,0,5"
                    Maximum="{Data:Ancestor ActualWidth, StackPanel}"
                    Minimum="64"
                    Value="{Data:Bind Zoom, ElementName=PointControl, Trigger=PropertyChanged, Way=2}"/>
                <local:PointControl x:Name="PointControl"
                    HorizontalAlignment="Left"
                    Points="{Data:Bind Value.Points, Trigger=PropertyChanged, Way=2}"
                    Zoom="128"/>
            </StackPanel>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type Media:VectorShape}">
        </local:KeyTemplate>

        <!-- ... Imagin.Core.Models -->
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type Models:PanelCollection}">
            <ItemsControl ItemsSource="{Binding Value}" Margin="0,5,0,0">
                <ItemsControl.ItemTemplate>
                    <DataTemplate DataType="{x:Type Models:Panel}">
                        <CheckBox x:Name="CheckBox"
                            IsChecked="{Binding IsVisible, Mode=TwoWay}"
                            Margin="0,0,0,5"/>
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding TitleLocalized}" Value="True">
                                <Setter TargetName="CheckBox" Property="Content" Value="{Data:LocalBinding Title}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding TitleLocalized}" Value="False">
                                <Setter TargetName="CheckBox" Property="Content" Value="{Binding Title}"/>
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type Models:GroupItemForm}">
            <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,*">
                <ComboBox
                    ItemsSource="{Binding Value.Groups}"
                    SelectedIndex="{Binding Value.SelectedGroupIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                    <ComboBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Name}"/>
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                </ComboBox>
                <ComboBox ItemsSource="{Binding Value.SelectedGroup}"
                    Margin="1,0,0,0"
                    SelectedIndex="{Binding Value.SelectedIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                    <ComboBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Name}"/>
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                </ComboBox>
            </Grid>
        </local:KeyTemplate>

        <!-- ... Imagin.Core.Text -->
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type Text:Bullets}">
            <ComboBox
                ItemsSource="{Data:Bind Value, Convert=Conversion:EnumConverter}"
                Linq:XComboBox.Placeholder="{local:MemberPlaceholder}"
                Style="{DynamicResource {x:Static local:MemberGrid.ComboBoxStyleKey}}">
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static ComboBox.SelectedItemProperty}" 
                        Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
                <Linq:XComboBox.SelectedItemTemplate>
                    <DataTemplate>
                        <local:BulletElement Bullet="{Binding}" MaxHeight="20" Value="1"/>
                    </DataTemplate>
                </Linq:XComboBox.SelectedItemTemplate>
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <local:BulletElement Bullet="{Binding}" MaxHeight="20" Value="1"/>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>
        </local:KeyTemplate>

        <!-- ... Sytem -->
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type System1:Array}">
            <ContentPresenter x:Name="ContentPresenter" Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:MemberGrid.ObjectTemplate}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type System1:Boolean}">
            <ContentPresenter x:Name="Content" Content="{Binding}"/>
            <local:KeyTemplate.Triggers>
                <DataTrigger Binding="{Binding Style}" Value="{x:Null}">
                    <Setter TargetName="Content" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <CheckBox Content="{Binding Content}"
                                    HorizontalAlignment="Left" 
                                    IsEnabled="{Data:Bind Convert=Conversion:InverseBooleanConverter, Path=IsReadOnly}">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static CheckBox.IsCheckedProperty}" 
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                </CheckBox>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:BooleanStyle.Button}">
                    <Setter TargetName="Content" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <local:ImageToggleButton Content="{Binding Content}"
                                    CheckedSource="{Binding CheckedImage}"
                                    HorizontalAlignment="Left"
                                    Source="{Binding Icon}"
                                    IsEnabled="{Data:Bind IsReadOnly, Convert={x:Type Conversion:InverseBooleanConverter}, Mode=OneWay}">
                                    <e:Interaction.Behaviors>
                                        <Behavior:DynamicResourceBehavior Property="{x:Static local:ImageToggleButton.ImageForegroundProperty}" 
                                            Key="{Binding IconColor}"/>
                                        <Behavior:ManualBindingBehavior Property="{x:Static local:ImageToggleButton.IsCheckedProperty}" 
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                </local:ImageToggleButton>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:BooleanStyle.ToggleButton}">
                    <Setter TargetName="Content" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <local:SwitchButton
                                    IsEnabled="{Data:Bind IsReadOnly, Convert={x:Type Conversion:InverseBooleanConverter}, Mode=OneWay}">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static local:SwitchButton.IsCheckedProperty}" 
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                </local:SwitchButton>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </local:KeyTemplate.Triggers>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type System1:Byte}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:MemberGrid.RangeTemplateKey}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type System1:DateTime}">
            <ContentPresenter x:Name="Content" Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:MemberGrid.RangeTemplateKey}}"/>
            <local:KeyTemplate.Triggers>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:DateTimeStyle.Default}">
                    <Setter TargetName="Content" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <TextBlock Text="{Data:Bind Value, Convert=Conversion:ToStringConverter}"/>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:DateTimeStyle.Relative}">
                    <Setter TargetName="Content" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <TextBox 
                                    Linq:XTextBox.CanLabel="True"
                                    Linq:XTextBox.EditButtonVisibility="Visible"
                                    Linq:XTextBox.EditMouseEvent="MouseDown"
                                    Linq:XTextBox.IsEditable="{Binding Properties[IsEditingText], Mode=TwoWay}"
                                    Linq:XTextBox.Label="{Data:Bind Value, Convert={x:Type Conversion:RelativeTimeConverter}, ConverterParameter=1}"
                                    Text="{Binding Value, Mode=TwoWay, StringFormat='M/d/yyyy h:mm tt', UpdateSourceTrigger=LostFocus}"
                                    ToolTip="{Data:Self Label}"/>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:DateTimeStyle.Remaining}">
                    <Setter TargetName="Content" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <TextBox 
                                    Linq:XTextBox.CanLabel="True"
                                    Linq:XTextBox.EditButtonVisibility="Visible"
                                    Linq:XTextBox.EditMouseEvent="MouseDown"
                                    Linq:XTextBox.IsEditable="{Binding Properties[IsEditingText], Mode=TwoWay}"
                                    Linq:XTextBox.Label="{Data:Bind Value, Convert={x:Type Conversion:ShortTimeConverter}, ConverterParameter=1}"
                                    Text="{Binding Value, Mode=TwoWay, StringFormat='M/d/yyyy h:mm tt', UpdateSourceTrigger=LostFocus}"
                                    ToolTip="{Data:Self Label}"/>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </local:KeyTemplate.Triggers>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type System1:Decimal}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:MemberGrid.RangeTemplateKey}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type System1:Double}">
            <ContentPresenter x:Name="ContentPresenter" Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:MemberGrid.RangeTemplateKey}}"/>
            <local:KeyTemplate.Triggers>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:NumberStyle.Angle}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <local:AngleControl HorizontalAlignment="Left">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static local:AngleControl.DegreesProperty}"
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                </local:AngleControl>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:NumberStyle.Progress}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <ProgressBar Maximum="1" Minimum ="0">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static ProgressBar.ValueProperty}"
                                            Mode="OneWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                </ProgressBar>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:NumberStyle.ProgressRound}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <local:ProgressRing HorizontalAlignment="Left">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static local:ProgressRing.ValueProperty}"
                                            Mode="OneWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                </local:ProgressRing>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:NumberStyle.Unit}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <local:UnitControl
                                    IsReadOnly="{Binding IsReadOnly}"
                                    Resolution="72"
                                    StringFormat="{Binding StringFormat}"
                                    Unit="{Binding StyleProperties[Unit]}">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static local:UnitControl.ValueProperty}"
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                </local:UnitControl>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </local:KeyTemplate.Triggers>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type System1:Enum}">
            <ContentPresenter x:Name="ContentPresenter" Content="{Binding}"/>
            <local:KeyTemplate.Triggers>
                <DataTrigger Binding="{Binding Style}" Value="{x:Null}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <ComboBox
                                    ItemsSource="{Data:Bind ValueType, Convert=Conversion:EnumConverter}"
                                    ItemTemplate="{DynamicResource {x:Static local:MemberGrid.EnumItemTemplateKey}}"
                                    Linq:XComboBox.Placeholder="{local:MemberPlaceholder}"
                                    Style="{DynamicResource {x:Static local:MemberGrid.ComboBoxStyleKey}}">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static ComboBox.SelectedItemProperty}" 
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                </ComboBox>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:EnumStyle.Flags}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate DataType="Reflection1:MemberModel">
                                <local:FlagGroup Type="{Data:Bind Value, Convert=Conversion:GetTypeConverter}" TypeVisibility="Visible">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static local:FlagGroup.ValueProperty}" 
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                    <local:FlagGroup.Resources>
                                        <Data:Reference x:Key="Member" Data="{Binding}"/>
                                    </local:FlagGroup.Resources>
                                    <local:FlagGroup.ItemContainerStyle>
                                        <Style TargetType="FrameworkElement">
                                            <Setter Property="Linq:XElement.ToolTipTemplate" Value="{DynamicResource {x:Static local:MemberGrid.ObjectToolTipKey}}"/>
                                            <Setter Property="Linq:XToolTip.Header" Value="{Data:NameAttributeBinding Value}"/>
                                            <Setter Property="Linq:XToolTip.HeaderIcon" Value="{Data:ImageAttributeBinding Value}"/>
                                            <Setter Property="Linq:XToolTip.MinimumWidth" Value="{DynamicResource MemberToolTipMinWidth}"/>
                                            <Setter Property="ToolTip" Value="{Binding Value}"/>
                                        </Style>
                                    </local:FlagGroup.ItemContainerStyle>
                                    <local:FlagGroup.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <StackPanel Orientation="{Binding Data.Orientation, Source={StaticResource Member}}"/>
                                        </ItemsPanelTemplate>
                                    </local:FlagGroup.ItemsPanel>
                                    <local:FlagGroup.ItemTemplate>
                                        <DataTemplate>
                                            <ContentPresenter x:Name="Content" Content="{Binding}">
                                                <ContentPresenter.ContentTemplate>
                                                    <DataTemplate>
                                                        <local:ImageToggleButton IsChecked="{Data:TwoWay IsChecked}" Source="{Data:ImageAttributeBinding Value}"/>
                                                    </DataTemplate>
                                                </ContentPresenter.ContentTemplate>
                                            </ContentPresenter>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Data:ImageAttributeBinding Value}" Value="{x:Null}">
                                                    <Setter TargetName="Content" Property="ContentTemplate">
                                                        <Setter.Value>
                                                            <DataTemplate>
                                                                <CheckBox IsChecked="{Data:TwoWay IsChecked}">
                                                                    <StackPanel Orientation="Horizontal">
                                                                        <Ellipse Fill="{Data:Bind Value, Convert=Conversion:ColorAttributeConverter}"
                                                                            Height="16" Width="16"
                                                                            Margin="0,0,5,0" 
                                                                            Visibility="{Data:VisibilityBinding Fill, From=Self}"/>
                                                                        <TextBlock Text="{Data:NameAttributeBinding Value}"/>
                                                                    </StackPanel>
                                                                </CheckBox>
                                                            </DataTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Data:PreviousData}" Value="{x:Null}">
                                                    <Setter TargetName="Content" Property="Margin" Value="0"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Data.Orientation, Source={StaticResource Member}}" Value="Horizontal">
                                                    <Setter TargetName="Content" Property="Margin" Value="5,0,0,0"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Data.Orientation, Source={StaticResource Member}}" Value="Vertical">
                                                    <Setter TargetName="Content" Property="Margin" Value="0,5,0,0"/>
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </local:FlagGroup.ItemTemplate>
                                </local:FlagGroup>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </local:KeyTemplate.Triggers>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type System1:Guid}">
            <TextBox x:Name="TextBox"
                Linq:XTextBoxBase.Regex="{x:Static Text:Expressions.Guid}"
                Style="{DynamicResource {x:Static local:MemberGrid.TextBoxStyleKey}}">
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static TextBox.TextProperty}" 
                        Converter="{x:Type Conversion:GuidToStringConverter}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
            </TextBox>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type System1:Int16}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:MemberGrid.RangeTemplateKey}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type System1:Int32}">
            <ContentPresenter x:Name="ContentPresenter" Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:MemberGrid.RangeTemplateKey}}"/>
            <local:KeyTemplate.Triggers>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:Int32Style.Index}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <ComboBox ItemsSource="{Binding ItemSource}"
                                    Linq:XComboBox.Placeholder="{local:MemberPlaceholder}"
                                    Style="{DynamicResource {x:Static local:MemberGrid.ComboBoxStyleKey}}">
                                    <ComboBox.Resources>
                                        <Data:Reference x:Key="Member" Data="{Binding}"/>
                                    </ComboBox.Resources>
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static ComboBox.SelectedIndexProperty}" 
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}"/>
                                        <Behavior:ManualBindingBehavior Property="{x:Static ComboBox.SelectedItemProperty}" 
                                            Mode="TwoWay" Path="SelectedItem" Source="{Binding}" UpdateSourceTrigger="PropertyChanged" />
                                    </e:Interaction.Behaviors>
                                    <ComboBox.ItemTemplate>
                                        <DataTemplate>
                                            <TextBlock>
                                                <e:Interaction.Behaviors>
                                                    <Behavior:ManualBindingBehavior Property="{x:Static TextBlock.TextProperty}" 
                                                        Mode="OneWay" Path="{Binding Data.ItemPath, Source={StaticResource Member}}" Source="{Binding}" UpdateSourceTrigger="PropertyChanged" />
                                                </e:Interaction.Behaviors>
                                            </TextBlock>
                                        </DataTemplate>
                                    </ComboBox.ItemTemplate>
                                </ComboBox>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:NumberStyle.Unit}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <local:UnitControl
                                    IsReadOnly="{Binding IsReadOnly}"
                                    Resolution="72"
                                    StringFormat="{Binding StringFormat}"
                                    Unit="{Binding StyleProperties[Unit]}">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static local:UnitControl.ValueProperty}"
                                            Converter="{x:Type Conversion:Int32ToDoubleConverter}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                </local:UnitControl>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </local:KeyTemplate.Triggers>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type System1:Int64}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:MemberGrid.RangeTemplateKey}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type System1:Object}">
            <ContentPresenter x:Name="ContentPresenter" Content="{Binding}" ContentTemplate="{Markup:EmptyTemplate}"/>
            <local:KeyTemplate.Triggers>
                <DataTrigger Binding="{Binding Style}" Value="{x:Null}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:MemberGrid.ObjectTemplate}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:ObjectStyle.Button}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:MemberGrid.ObjectButtonTemplate}}"/>
                </DataTrigger>
            </local:KeyTemplate.Triggers>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type System1:Single}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:MemberGrid.RangeTemplateKey}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type System1:String}">
            <local:KeyTemplate.Resources>
                <DataTemplate x:Key="PathTemplate">
                    <local:PathBox x:Name="PathBox"
                        CanBrowse="{Data:Bind IsReadOnly, Convert={x:Type Conversion:InverseBooleanConverter}, Mode=OneWay}"
                        CanValidate="True"
                        IconVisibility="Visible"
                        IsReadOnly="{Binding IsReadOnly}"
                        Linq:XTextBox.ClearButtonVisibility="Visible"
                        Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
                        ValidateHandler="{Binding ValidateHandler}">
                        <e:Interaction.Behaviors>
                            <Behavior:ManualBindingBehavior Property="{x:Static local:PathBox.TextProperty}" 
                                Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                        </e:Interaction.Behaviors>
                    </local:PathBox>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:StringStyle.FilePath}">
                            <Setter TargetName="PathBox" Property="BrowseMode" Value="OpenFile"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:StringStyle.FolderPath}">
                            <Setter TargetName="PathBox" Property="BrowseMode" Value="OpenFolder"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:StringStyle.Path}">
                            <Setter TargetName="PathBox" Property="BrowseMode" Value="Open"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </local:KeyTemplate.Resources>
            <ContentPresenter x:Name="ContentPresenter" Content="{Binding}">
                <ContentPresenter.ContentTemplate>
                    <DataTemplate>
                        <TextBox x:Name="TextBox"
                            Linq:XTextBox.ClearButtonVisibility="Collapsed"
                            Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
                            Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
                            Linq:XTextBoxBase.Suggestions="{Binding Suggestions}"
                            Linq:XTextBoxBase.SuggestionCommand="{Binding SuggestionCommand}"
                            Style="{DynamicResource {x:Static local:MemberGrid.TextBoxStyleKey}}">
                            <Linq:XTextBox.EnterCommand>
                                <Data:MultiBind Convert="Conversion:PropertyValueMultiConverter">
                                    <Binding Path="Source.FirstInstance"/>
                                    <Binding Path="StyleAttribute.EnterCommand"/>
                                </Data:MultiBind>
                            </Linq:XTextBox.EnterCommand>
                            <e:Interaction.Behaviors>
                                <Behavior:ManualBindingBehavior Property="{x:Static TextBox.TextProperty}" 
                                    Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                            </e:Interaction.Behaviors>
                        </TextBox>
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:StringStyle.Search}">
                                <Setter TargetName="TextBox" Property="Linq:XTextBox.EnterButtonSource" Value="{Binding Icon}"/>
                                <Setter TargetName="TextBox" Property="Linq:XTextBox.EnterButtonVisibility" Value="Visible"/>
                            </DataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding TextAttribute.CanClear}" Value="True"/>
                                    <Condition Binding="{Binding IsReadOnly}" Value="False"/>
                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="TextBox" Property="Linq:XTextBox.ClearButtonVisibility" Value="Visible"/>
                            </MultiDataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </ContentPresenter.ContentTemplate>
            </ContentPresenter>
            <local:KeyTemplate.Triggers>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:StringStyle.FilePath}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{StaticResource PathTemplate}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:StringStyle.FolderPath}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{StaticResource PathTemplate}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:StringStyle.MultiLine}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <TextBox x:Name="TextBox"
                                    AcceptsReturn="True"
                                    Height="Auto"
                                    Padding="5,7"
                                    Style="{DynamicResource {x:Static local:MemberGrid.TextBoxStyleKey}}"
                                    TextBlock.LineStackingStrategy="BlockLineHeight"
                                    TextBlock.LineHeight="15"
                                    TextWrapping="Wrap"
                                    VerticalContentAlignment="Top">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static TextBox.TextProperty}" 
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                </TextBox>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:StringStyle.Password}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <PasswordBox Style="{DynamicResource {x:Static local:MemberGrid.PasswordBoxStyleKey}}">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static Linq:XPasswordBox.PasswordProperty}" 
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                </PasswordBox>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:StringStyle.Path}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{StaticResource PathTemplate}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:StringStyle.Resource}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <local:ImageElement Source="{Binding Value}"/>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:StringStyle.Thumbnail}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <local:Thumbnail Path="{Binding Value}"
                                    Height="16" Width="16"/>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:StringStyle.Tokens}">
                    <Setter TargetName="ContentPresenter" Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <local:TokenBox
                                    IsReadOnly="{Binding IsReadOnly}"
                                    Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
                                    TokenDelimiter="{Binding StyleAttribute.Delimiter}">
                                    <e:Interaction.Behaviors>
                                        <Behavior:ManualBindingBehavior Property="{x:Static local:TokenBox.SourceProperty}" 
                                            Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                                    </e:Interaction.Behaviors>
                                </local:TokenBox>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </local:KeyTemplate.Triggers>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type System1:TimeSpan}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:MemberGrid.RangeTemplateKey}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type System1:TimeZoneInfo}">
            <local:TimeZoneBox
                IsEnabled="{Data:Bind Convert=Conversion:InverseBooleanConverter, Path=IsReadOnly}"
                Linq:XComboBox.Placeholder="{local:MemberPlaceholder}">
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static local:TimeZoneBox.SelectedItemProperty}" 
                        Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
            </local:TimeZoneBox>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type System1:Type}">
            <TextBox IsReadOnly="True" Text="{Binding Value.FullName}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type System1:UInt16}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:MemberGrid.RangeTemplateKey}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type System1:UInt32}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:MemberGrid.RangeTemplateKey}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type System1:UInt64}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:MemberGrid.RangeTemplateKey}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type System1:Version}">
            <local:VersionBox x:Name="VersionBox"
                HorizontalAlignment="Stretch"
                IsReadOnly="{Binding IsReadOnly}"
                Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}">
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static local:VersionBox.TextProperty}" 
                        Converter="{x:Type Conversion:VersionToStringConverter}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
            </local:VersionBox>
        </local:KeyTemplate>

        <!-- ... System -->
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type System2:Uri}">
            <local:UriBox
                IsReadOnly="{Binding IsReadOnly}"
                Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}">
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static local:UriBox.TextProperty}" 
                        Converter="{x:Type Conversion:UriToStringConverter}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
            </local:UriBox>
        </local:KeyTemplate>

        <!-- ... System.Collections -->
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type Collections:IEnumerable}">
            <ContentPresenter x:Name="Content" Content="{Binding}"/>
            <local:KeyTemplate.Triggers>
                <DataTrigger Binding="{Binding Style}" Value="{x:Null}">
                    <Setter TargetName="Content" Property="ContentTemplate" Value="{DynamicResource {x:Static local:MemberGrid.ObjectTemplate}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:ObjectStyle.Button}">
                    <Setter TargetName="Content" Property="ContentTemplate" Value="{DynamicResource {x:Static local:MemberGrid.ObjectButtonTemplate}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:CollectionStyle.ToggleButton}">
                    <Setter TargetName="Content" Property="ContentTemplate" Value="{DynamicResource {x:Static local:MemberGrid.CollectionToggleButtonTemplateKey}}"/>
                </DataTrigger>
            </local:KeyTemplate.Triggers>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type Collections:IList}">
            <ContentPresenter x:Name="Content" Content="{Binding}"/>
            <local:KeyTemplate.Triggers>
                <DataTrigger Binding="{Binding Style}" Value="{x:Null}">
                    <Setter TargetName="Content" Property="ContentTemplate" Value="{DynamicResource {x:Static local:MemberGrid.ObjectTemplate}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:ObjectStyle.Button}">
                    <Setter TargetName="Content" Property="ContentTemplate" Value="{DynamicResource {x:Static local:MemberGrid.ObjectButtonTemplate}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:CollectionStyle.ToggleButton}">
                    <Setter TargetName="Content" Property="ContentTemplate" Value="{DynamicResource {x:Static local:MemberGrid.CollectionToggleButtonTemplateKey}}"/>
                </DataTrigger>
            </local:KeyTemplate.Triggers>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type Specialized:INotifyCollectionChanged}">
            <ContentPresenter x:Name="Content" Content="{Binding}"/>
            <local:KeyTemplate.Triggers>
                <DataTrigger Binding="{Binding Style}" Value="{x:Null}">
                    <Setter TargetName="Content" Property="ContentTemplate" Value="{DynamicResource {x:Static local:MemberGrid.ObjectTemplate}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:ObjectStyle.Button}">
                    <Setter TargetName="Content" Property="ContentTemplate" Value="{DynamicResource {x:Static local:MemberGrid.ObjectButtonTemplate}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Style}" Value="{x:Static SharedCore:CollectionStyle.ToggleButton}">
                    <Setter TargetName="Content" Property="ContentTemplate" Value="{DynamicResource {x:Static local:MemberGrid.CollectionToggleButtonTemplateKey}}"/>
                </DataTrigger>
            </local:KeyTemplate.Triggers>
        </local:KeyTemplate>

        <!-- ... System.Drawing -->
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type Drawing:Color}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:MemberGrid.ColorTemplateKey}}"/>
        </local:KeyTemplate>

        <!-- ... System.Net -->
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type Net:NetworkCredential}">
            <StackPanel>
                <TextBox x:Name="TextBox"
                    Linq:XTextBoxBase.Placeholder="{Markup:Loc Username}"
                    Margin="0,0,0,5"
                    Style="{DynamicResource {x:Static local:MemberGrid.TextBoxStyleKey}}">
                    <e:Interaction.Behaviors>
                        <Behavior:ManualBindingBehavior Property="{x:Static TextBox.TextProperty}" 
                            Mode="TwoWay" Path="Value.UserName" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                    </e:Interaction.Behaviors>
                </TextBox>
                <PasswordBox x:Name="PasswordBox"
                    Linq:XPasswordBox.ToggleButtonVisibility="Visible"
                    Style="{DynamicResource {x:Static local:MemberGrid.PasswordBoxStyleKey}}">
                    <e:Interaction.Behaviors>
                        <Behavior:ManualBindingBehavior Property="{x:Static Linq:XPasswordBox.PasswordProperty}" 
                            Mode="TwoWay" Path="Value.Password" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                    </e:Interaction.Behaviors>
                </PasswordBox>
            </StackPanel>
        </local:KeyTemplate>

        <!-- ... System.Reflection -->
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type Reflection2:Assembly}">
            <TextBox IsReadOnly="True" Text="{Binding Value.Name}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type Reflection2:EventInfo}">
            <ListBox/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type Reflection2:MethodInfo}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource {x:Static local:MemberGrid.MethodTemplateKey}}"/>
        </local:KeyTemplate>

        <!-- ... System.Windows -->
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type Color}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:MemberGrid.ColorTemplateKey}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type FontFamily}">
            <local:FontFamilyBox
                IsEnabled="{Data:Bind Convert=Conversion:InverseBooleanConverter, Path=IsReadOnly}"
                Linq:XComboBox.Placeholder="{local:MemberPlaceholder}">
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static local:FontFamilyBox.SelectedItemProperty}" 
                        Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
            </local:FontFamilyBox>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type FontStyle}">
            <local:FontStyleBox
                IsEnabled="{Data:Bind Convert=Conversion:InverseBooleanConverter, Path=IsReadOnly}"
                Linq:XComboBox.Placeholder="{local:MemberPlaceholder}">
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static local:FontStyleBox.SelectedItemProperty}" 
                        Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
            </local:FontStyleBox>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type FontWeight}">
            <local:FontWeightBox
                IsEnabled="{Data:Bind Convert=Conversion:InverseBooleanConverter, Path=IsReadOnly}"
                Linq:XComboBox.Placeholder="{local:MemberPlaceholder}">
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static local:FontWeightBox.SelectedItemProperty}" 
                        Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
            </local:FontWeightBox>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type GridLength}">
            <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="*,Auto">
                <local:DoubleUpDown CanUpDown="{Data:Bind Convert=Conversion:InverseBooleanConverter, Path=IsReadOnly}"
                    Increment="{Binding Properties[Increment]}"
                    IsReadOnly="{Binding IsReadOnly}"
                    Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
                    Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
                    Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
                    Maximum="{Binding Properties[Maximum]}"
                    Minimum="{Binding Properties[Minimum]}"
                    StringFormat="{Binding StringFormat}">
                    <e:Interaction.Behaviors>
                        <Behavior:ManualBindingBehavior x:Name="Behavior" Property="{x:Static local:DoubleUpDown.TextProperty}" ConverterParameter="{Binding StringFormat}"
                            Converter="{x:Type Conversion:DoubleToStringConverter}" Mode="TwoWay" Path="Value" Source="{Binding TemplateModel}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                    </e:Interaction.Behaviors>
                </local:DoubleUpDown>
                <ComboBox ItemsSource="{Markup:Enumerate {x:Type GridUnitType}}"
                    ItemTemplate="{DynamicResource {x:Static local:MemberGrid.EnumItemTemplateKey}}"
                    Margin="5,0,0,0"
                    Style="{DynamicResource {x:Static local:MemberGrid.ComboBoxStyleKey}}">
                    <e:Interaction.Behaviors>
                        <Behavior:ManualBindingBehavior Property="{x:Static ComboBox.SelectedItemProperty}" 
                            Mode="TwoWay" Path="TemplateModel.Type" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                    </e:Interaction.Behaviors>
                </ComboBox>
            </Grid>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type LinearGradientBrush}">
            <local:GradientBox 
                HorizontalAlignment="Stretch"
                IsEnabled="{Data:Bind IsReadOnly, Convert={x:Type Conversion:InverseBooleanConverter}}"
                Width="Auto">
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static local:GradientBox.ValueProperty}" 
                        Converter="{x:Type Conversion:LinearGradientBrushConverter}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
            </local:GradientBox>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type ListCollectionView}">
            <local:ImageToggleButton Source="{Binding Icon}">
                <local:ImageToggleButton.Resources>
                    <Data:Reference x:Key="Member" Data="{Binding}"/>

                    <Style x:Key="ItemStyle" TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                        <Setter Property="Command" Value="{Binding Data.ItemCommand, Source={StaticResource Member}}"/>
                        <Setter Property="CommandParameter" Value="{Binding}"/>
                        <Setter Property="Header" Value="{Data:NameAttributeBinding}"/>
                        <Setter Property="Icon" Value="{Data:ImageAttributeBinding Type=Image}"/>
                    </Style>
                </local:ImageToggleButton.Resources>
                <local:ImageToggleButton.Menu>
                    <ContextMenu ItemsSource="{Binding Data.Value, Source={StaticResource Member}}"
                        ItemContainerStyle="{StaticResource ItemStyle}"
                        Linq:XItemsControl.GroupContainerStyle="{StaticResource ItemStyle}"
                        Linq:XItemsControl.GroupsItself="True"
                        Linq:XItemsControl.GroupStyle="{StaticResource {x:Static Linq:XItemsControl.MenuGroupStyleKey}}"/>
                </local:ImageToggleButton.Menu>
            </local:ImageToggleButton>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type PointCollection}">
            <StackPanel Margin="5">
                <Slider
                    Margin="0,0,0,5"
                    Maximum="{Data:Ancestor ActualWidth, StackPanel}"
                    Minimum="64"
                    Value="{Binding Zoom, ElementName=PointControl, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                <local:PointControl x:Name="PointControl"
                    HorizontalAlignment="Left"
                    Points="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    Zoom="128"/>
            </StackPanel>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type RadialGradientBrush}">
            <local:GradientBox 
                HorizontalAlignment="Stretch"
                IsEnabled="{Data:Bind IsReadOnly, Convert={x:Type Conversion:InverseBooleanConverter}}"
                Width="Auto">
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static local:GradientBox.ValueProperty}" 
                        Converter="{x:Type Conversion:RadialGradientBrushConverter}" Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
            </local:GradientBox>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type SolidColorBrush}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:MemberGrid.ColorTemplateKey}}"/>
        </local:KeyTemplate>
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type Thickness}">
            <local:ThicknessControl
                HorizontalAlignment="Stretch"
                IsEnabled="{Data:Bind IsReadOnly, Convert={x:Type Conversion:InverseBooleanConverter}}">
                <e:Interaction.Behaviors>
                    <Behavior:ManualBindingBehavior Property="{x:Static local:ThicknessControl.ThicknessProperty}" 
                        Mode="TwoWay" Path="Value" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                </e:Interaction.Behaviors>
            </local:ThicknessControl>
        </local:KeyTemplate>

        <!-- ... System.Windows.Controls -->
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type DataGridLength}">
            <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="*,Auto">
                <local:DoubleUpDown CanUpDown="{Data:Bind Convert=Conversion:InverseBooleanConverter, Path=IsReadOnly}"
                    Increment="{Binding Properties[Increment]}"
                    IsReadOnly="{Binding IsReadOnly}"
                    Linq:XTextBoxBase.Left="{StaticResource LeftTextTemplate}"
                    Linq:XTextBoxBase.Right="{StaticResource RightTextTemplate}"
                    Linq:XTextBoxBase.Placeholder="{local:MemberPlaceholder}"
                    Maximum="{Binding Properties[Maximum]}"
                    Minimum="{Binding Properties[Minimum]}"
                    StringFormat="{Binding StringFormat}">
                    <e:Interaction.Behaviors>
                        <Behavior:ManualBindingBehavior x:Name="Behavior" Property="{x:Static local:DoubleUpDown.TextProperty}" ConverterParameter="{Binding StringFormat}"
                            Converter="{x:Type Conversion:DoubleToStringConverter}" Mode="TwoWay" Path="Value" Source="{Binding TemplateModel}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                    </e:Interaction.Behaviors>
                </local:DoubleUpDown>
                <ComboBox ItemsSource="{Markup:Enumerate {x:Type DataGridLengthUnitType}}"
                    ItemTemplate="{DynamicResource {x:Static local:MemberGrid.EnumItemTemplateKey}}"
                    Margin="5,0,0,0"
                    Style="{DynamicResource {x:Static local:MemberGrid.ComboBoxStyleKey}}">
                    <e:Interaction.Behaviors>
                        <Behavior:ManualBindingBehavior Property="{x:Static ComboBox.SelectedItemProperty}" 
                            Mode="TwoWay" Path="TemplateModel.Type" Source="{Binding}" UpdateSourceTrigger="{Binding UpdateSourceTrigger}" />
                    </e:Interaction.Behaviors>
                </ComboBox>
            </Grid>
        </local:KeyTemplate>

        <!-- ... System.Windows.Input -->
        <local:KeyTemplate DataType="Reflection1:MemberModel" DataKey="{x:Type Input:ICommand}">
            <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource {x:Static local:MemberGrid.MethodTemplateKey}}"/>
        </local:KeyTemplate>
    </local:MemberTemplateSelector>

    <!-- Member > Indeterminate -->

    <DataTemplate x:Key="{x:Static local:MemberGrid.MemberIndeterminateTemplateKey}">
        <TextBlock FontStyle="Italic" Text="(multiple values)"/>
    </DataTemplate>
    
    <!-- Member > MarkUp -->

    <DataTemplate x:Key="{x:Static local:MemberGrid.MemberMarkUpCenterTemplateKey}">
        <RichTextBox Linq:XRichTextBox.MarkUp="{Binding}"
            BorderThickness="0"
            IsDocumentEnabled="True" 
            IsReadOnly="True" 
            Padding="0" 
            TextBlock.FontSize="16"
            TextBlock.TextAlignment="Center"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.MemberMarkUpLeftTemplateKey}">
        <RichTextBox Linq:XRichTextBox.MarkUp="{Binding}"
            BorderThickness="0"
            IsDocumentEnabled="True" 
            IsReadOnly="True" 
            Padding="0" 
            TextBlock.FontSize="16"
            TextBlock.TextAlignment="Left"/>
    </DataTemplate>

    <!-- Member > Null -->

    <DataTemplate x:Key="{x:Static local:MemberGrid.MemberNullTemplateKey}">
        <TextBlock Style="{Data:Ancestor MemberNullTextStyle, {x:Type local:MemberGrid}}"/>
    </DataTemplate>

    <!-- Member > Text -->

    <DataTemplate x:Key="{x:Static local:MemberGrid.MemberTextTemplateKey}">
        <ContentPresenter x:Name="Content" Content="{Binding}" ContentTemplate="{Markup:EmptyTemplate}"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding TextAttribute.Format}" Value="Raw">
                <Setter TargetName="Content" Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <TextBox x:Name="TextBox" IsReadOnly="True">
                                <e:Interaction.Behaviors>
                                    <Behavior:ManualBindingBehavior Property="{x:Static TextBox.TextProperty}" StringFormat="{Binding TextAttribute.StringFormat}"
                                        Converter="{Binding TextAttribute.Converter}" ConverterParameter="{Binding TextAttribute.ConverterParameter}" Mode="OneWay" 
                                        Path="{Binding TextAttribute.Path}" Source="{Binding Value}"/>
                                </e:Interaction.Behaviors>
                            </TextBox>
                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{Binding TextAttribute.Select}" Value="False">
                                    <Setter TargetName="TextBox" Property="BorderThickness" Value="0"/>
                                    <Setter TargetName="TextBox" Property="Padding" Value="0"/>
                                    <Setter TargetName="TextBox" Property="IsHitTestVisible" Value="False"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding TextAttribute.Trimming}" Value="None">
                                    <Setter TargetName="TextBox" Property="Linq:XTextBoxBase.TextTrimming" Value="None"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding TextAttribute.Trimming}" Value="Character">
                                    <Setter TargetName="TextBox" Property="Linq:XTextBoxBase.TextTrimming" Value="CharacterEllipsis"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding TextAttribute.Trimming}" Value="Word">
                                    <Setter TargetName="TextBox" Property="Linq:XTextBoxBase.TextTrimming" Value="WordEllipsis"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding TextAttribute.Wrapping}" Value="None">
                                    <Setter TargetName="TextBox" Property="AcceptsReturn" Value="False"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding TextAttribute.Wrapping}" Value="Wrap">
                                    <Setter TargetName="TextBox" Property="AcceptsReturn" Value="True"/>
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding TextAttribute.Format}" Value="MarkDown">
                <Setter TargetName="Content" Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding TextAttribute.Format}" Value="MarkUp">
                <Setter TargetName="Content" Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <RichTextBox x:Name="RichTextBox"
                                IsDocumentEnabled="True" 
                                IsReadOnly="True" 
                                TextBlock.FontSize="16"
                                TextBlock.TextAlignment="Left">
                                <e:Interaction.Behaviors>
                                    <Behavior:ManualBindingBehavior Property="{x:Static Linq:XRichTextBox.MarkUpProperty}" StringFormat="{Binding TextAttribute.StringFormat}"
                                        Converter="{Binding TextAttribute.Converter}" ConverterParameter="{Binding TextAttribute.ConverterParameter}" Mode="OneWay" 
                                        Path="{Binding TextAttribute.Path}" Source="{Binding Value}"/>
                                </e:Interaction.Behaviors>
                            </RichTextBox>
                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{Binding TextAttribute.Select}" Value="False">
                                    <Setter TargetName="RichTextBox" Property="BorderThickness" Value="0"/>
                                    <Setter TargetName="RichTextBox" Property="Padding" Value="0"/>
                                    <Setter TargetName="RichTextBox" Property="IsHitTestVisible" Value="False"/>
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- ToolTip -->

    <DataTemplate x:Key="{x:Static local:MemberGrid.MemberToolTipKey}">
        <StackPanel>
            <ContentPresenter x:Name="Description" Content="{Data:MemberDescriptionBinding}" ContentTemplate="{StaticResource {x:Static local:MemberGrid.MemberMarkUpCenterTemplateKey}}"/>
            <local:TopBorder Margin="0,10,0,0" Padding="10">
                <StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
                    <ItemsControl ItemsSource="{Binding Route}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Horizontal"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Linq:XPanel.VerticalContentAlignment="Center" Orientation="Horizontal" HorizontalAlignment="Center" Margin="5,0,0,0">
                                    <local:ImageElement x:Name="Dot" Foreground="{local:ThemeKey Key=Text}" Margin="0,0,5,0" Source="{Markup:SmallImage Image=TriangleRight}"/>
                                    <local:ImageElement Margin="0,0,5,0" Source="{Data:ImageAttributeBinding Type=Image}" Visibility="{Data:VisibilityBinding Source, From=Self}"/>
                                    <TextBlock Text="{Data:NameAttributeBinding}"/>
                                </StackPanel>
                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Data:PreviousData}" Value="{x:Null}">
                                        <Setter TargetName="Dot" Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>

                    <local:ImageElement Foreground="{local:ThemeKey Key=Text}" Margin="5,0,0,0" Source="{Markup:SmallImage Image=TriangleRight}"
                        Visibility="{Data:VisibilityBinding Tab}"/>
                    <local:AccentLabel Content="{Binding Tab}"
                        Margin="5,0,0,0"
                        Visibility="{Data:VisibilityBinding Tab}"/>

                    <local:ImageElement Foreground="{local:ThemeKey Key=Text}" Margin="5,0,0,0" Source="{Markup:SmallImage Image=TriangleRight}"
                        Visibility="{Data:VisibilityBinding Category}"/>
                    <TextBlock Foreground="{local:ThemeKey Key=Accent}" Margin="5,0,0,0" Text="{Binding Category}"
                        Visibility="{Data:VisibilityBinding Category}"/>
                </StackPanel>
            </local:TopBorder>
        </StackPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Data:MemberDescriptionBinding}" Value="{x:Null}">
                <Setter TargetName="Description" Property="Content" Value="{Markup:Loc NoDescription}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.MemberToolTipHeaderKey}">
        <StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
            <local:MemberImagePresenter Content="{Binding}" Margin="0,0,5,0"/>
            <TextBlock Text="{Data:MemberNameBinding}"/>
        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.ObjectToolTipKey}">
        <StackPanel>
            <ContentPresenter x:Name="Description" Content="{Data:DescriptionAttributeBinding}" ContentTemplate="{StaticResource {x:Static local:MemberGrid.MemberMarkUpCenterTemplateKey}}"/>

            <local:TopBorder DataContext="{Data:Bind Tag, From=Self}" Tag="{Data:Bind Convert=Conversion:BaseTypeConverter}" Margin="0,10,0,0" Padding="0,10,0,0" Visibility="{Data:VisibilityBinding Tag, From=Self}">
                <StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
                    <local:ImageElement Margin="0,0,5,0" Source="{Data:ImageAttributeBinding Type=Image}" Visibility="{Data:VisibilityBinding Source, From=Self}"/>
                    <TextBlock Text="{Data:NameAttributeBinding}"/>
                </StackPanel>
            </local:TopBorder>
        </StackPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Data:DescriptionAttributeBinding}" Value="{x:Null}">
                <Setter TargetName="Description" Property="Content" Value="{Markup:Loc NoDescription}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static local:MemberGrid.TabToolTipKey}" DataType="Reflection1:MemberTab">
        <ContentPresenter x:Name="Description" Content="{Binding Description}" ContentTemplate="{StaticResource {x:Static local:MemberGrid.MemberMarkUpCenterTemplateKey}}"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Description}" Value="">
                <Setter TargetName="Description" Property="Content" Value="{Markup:Loc NoDescription}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Description}" Value="{x:Null}">
                <Setter TargetName="Description" Property="Content" Value="{Markup:Loc NoDescription}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    
    <!-- MemberImagePresenter -->

    <Style x:Key="{x:Type local:MemberImagePresenter}" TargetType="{x:Type local:MemberImagePresenter}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate DataType="Reflection1:MemberModel">
                    <local:ImageElement x:Name="Image"/>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding MemberType}" Value="Event">
                            <Setter TargetName="Image" Property="Source" Value="{Markup:SmallImage Image=Event}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding MemberType}" Value="Field">
                            <Setter TargetName="Image" Property="Source" Value="{Markup:SmallImage Image=Field}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding MemberType}" Value="Method">
                            <Setter TargetName="Image" Property="Source" Value="{Markup:SmallImage Image=Method}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding MemberType}" Value="Property">
                            <Setter TargetName="Image" Property="Source" Value="{Markup:SmallImage Image=Property}" />
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- MemberNamePresenter -->

    <Style x:Key="{x:Type local:MemberNamePresenter}" TargetType="{x:Type local:MemberNamePresenter}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate DataType="Reflection1:MemberModel">
                    <TextBlock x:Name="TextBlock"
                        Linq:XTextBlock.SplitText="{Data:MemberNameBinding}"
                        Linq:XTextBlock.SplitTextMode="StartsWith"
                        TextTrimming="CharacterEllipsis"
                        VerticalAlignment="Center">
                        <Linq:XTextBlock.SplitTextStyle>
                            <Style TargetType="Run">
                                <Setter Property="Background" Value="{local:ThemeKey Accent}"/>
                                <Setter Property="Foreground" Value="{local:ThemeKey AccentForeground}"/>
                            </Style>
                        </Linq:XTextBlock.SplitTextStyle>
                    </TextBlock>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Data:Ancestor SearchName, local:MemberGrid}" Value="Category">
                            <Setter TargetName="TextBlock" Property="Linq:XTextBlock.SplitTextKey" Value="{x:Null}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Data:Ancestor SearchName, local:MemberGrid}" Value="Name">
                            <Setter TargetName="TextBlock" Property="Linq:XTextBlock.SplitTextKey" Value="{Data:Ancestor Search, local:MemberGrid}" />
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XElement.ToolTipTemplate" Value="{DynamicResource {x:Static local:MemberGrid.MemberToolTipKey}}"/>
        <Setter Property="Linq:XToolTip.Header" Value="{Binding}"/>
        <Setter Property="Linq:XToolTip.HeaderTemplate" Value="{StaticResource {x:Static local:MemberGrid.MemberToolTipHeaderKey}}"/>
        <Setter Property="Linq:XToolTip.HeaderIcon" Value="{x:Null}"/>
        <Setter Property="Linq:XToolTip.MinimumWidth" Value="{DynamicResource MemberToolTipMinWidth}"/>
        <Setter Property="ToolTip" Value="{Data:Self DataContext}"/>
    </Style>

    <!-- MemberOptionPresenter -->

    <Style x:Key="{x:Type local:MemberOptionPresenter}" TargetType="{x:Type local:MemberOptionPresenter}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate DataType="Reflection1:MemberModel">
                    <local:ImageButton ToolTip="{Markup:Loc Options}"
                        ButtonVisibility="Visible"
                        VerticalAlignment="Center">
                        <local:ImageButton.Resources>
                            <Data:Reference x:Key="Member" 
                                Data="{Binding}"/>
                            <Data:Reference x:Key="MemberGrid"
                                Data="{Data:Ancestor local:MemberGrid}"/>
                        </local:ImageButton.Resources>
                        <local:ImageButton.Menu>
                            <ContextMenu DataContext="{Data:Self PlacementTarget.DataContext}"
                                Linq:XContextMenu.Header="{Binding}" 
                                Linq:XContextMenu.HeaderIcon="{x:Null}">
                                <Linq:XContextMenu.HeaderTemplate>
                                    <DataTemplate>
                                        <StackPanel Linq:XPanel.Spacing="0,0,5,0" Orientation="Horizontal">
                                            <local:MemberImagePresenter Content="{Binding}"/>
                                            <local:MemberNamePresenter Content="{Binding}"/>
                                        </StackPanel>
                                    </DataTemplate>
                                </Linq:XContextMenu.HeaderTemplate>
                                <ContextMenu.Resources>
                                    <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Data:IsBinding Reflection2:MethodInfo}" Value="True">
                                                <Setter Property="Command" Value="{Binding Data.InvokeMethodCommand, Source={StaticResource Member}}"/>
                                                <Setter Property="CommandParameter" Value="{Binding}"/>
                                                <Setter Property="Header" Value="{Binding Name}"/>
                                                <Setter Property="Icon" Value="{Markup:SmallImage Image=Method}"/>
                                                <Setter Property="InputGestureText" Value="{Data:Bind Convert=Conversion:MethodReturnTypeConverter, ConverterParameter=1}"/>
                                                <Setter Property="Linq:XToolTip.Header" Value="{Data:NameAttributeBinding}"/>
                                                <Setter Property="Linq:XToolTip.HeaderIcon" Value="{Data:ImageAttributeBinding}"/>
                                                <Setter Property="Linq:XElement.ToolTipTemplate" Value="{DynamicResource {x:Static local:MemberGrid.ObjectToolTipKey}}"/>
                                                <Setter Property="ToolTip" Value="{Binding}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Data:IsBinding SharedCore:Namable}" Value="True">
                                                <Setter Property="Header" Value="{Binding Name}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Data:IsBinding System1:Type}" Value="True">
                                                <Setter Property="Header" Value="{Data:Bind Convert=Conversion:NameAttributeConverter}"/>
                                            </DataTrigger>

                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Data:Bind Data.Style, Source={StaticResource Member}}" Value="{x:Static SharedCore:StringStyle.Path}"/>
                                                    <Condition Binding="{Data:Self Tag}" Value="{x:Null}"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Header" Value="{Data:Bind Convert=Conversion:FileNameConverter}"/>
                                                <Setter Property="Icon" Value="{Binding}"/>
                                                <Setter Property="Linq:XMenuItem.IconTemplate">
                                                    <Setter.Value>
                                                        <DataTemplate>
                                                            <local:Thumbnail Path="{Binding}"/>
                                                        </DataTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </MultiDataTrigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Data:Bind TemplateType}" Value="{x:Type Color}"/>
                                                    <Condition Binding="{Data:Self Tag}" Value="{x:Null}"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Header" Value="{Binding}"/>
                                                <Setter Property="HeaderTemplate">
                                                    <Setter.Value>
                                                        <DataTemplate>
                                                            <TextBlock>#<Run Text="{Data:Bind Convert={x:Type Conversion:ColorToStringConverter}, Way=1}"/></TextBlock>
                                                        </DataTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="Icon" Value="{Binding}"/>
                                                <Setter Property="Linq:XMenuItem.IconTemplate">
                                                    <Setter.Value>
                                                        <DataTemplate>
                                                            <Ellipse Stroke="Black" StrokeThickness="1" Fill="{Data:Bind Convert={x:Type Conversion:ColorToSolidColorBrushConverter}}" Height="16" Width="16"/>
                                                        </DataTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </MultiDataTrigger>
                                            
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Data:IsBinding Reflection2:MethodInfo}" Value="False"/>
                                                    <Condition Binding="{Data:Self Tag}" Value="{x:Null}"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Command" Value="{Binding Data.NewCommand, Source={StaticResource MemberGrid}}"/>
                                                <Setter Property="CommandParameter">
                                                    <Setter.Value>
                                                        <Data:Reference2 First="{Binding Data, Source={StaticResource Member}}" Second="{Binding}"/>
                                                    </Setter.Value>
                                                </Setter>
                                            </MultiDataTrigger>

                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Data:IsBinding Reflection2:MethodInfo}" Value="True"/>
                                                    <Condition Binding="{Binding ReturnType.Name}" Value="Void"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="InputGestureText" Value="{Data:Bind Convert=Conversion:FirstMethodParameterTypeConverter, ConverterParameter=1}"/>
                                            </MultiDataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ContextMenu.Resources>
                                <ContextMenu.ItemsSource>
                                    <CompositeCollection>
                                        <CollectionContainer Collection="{Binding Data.Methods, Source={StaticResource Member}}"/>
                                        <Separator Visibility="{Data:VisibilityBinding Methods}"/>

                                        <Separator Linq:XSeparator.Header="{Markup:Loc Copy}"/>
                                        <MenuItem Tag="0" Header="{Markup:Loc This, Lower=True}"
                                            Command="{Binding Data.CopyCommand, Source={StaticResource Member}}"
                                            FontStyle="Italic"
                                            Icon="{Markup:SmallImage Image=Method}"
                                            InputGestureText="{Data:Bind ValueType, Convert=Conversion:RealTypeNameConverter, ConverterParameter=1}"/>
                                        <CollectionContainer Collection="{Binding Data.CopyMethods, Source={StaticResource Member}}"/>

                                        <Separator Linq:XSeparator.Header="{Markup:Loc Paste}"/>
                                        <MenuItem Tag="0" Header="{Markup:Loc This, Lower=True}"
                                            Command="{Binding Data.PasteCommand, Source={StaticResource Member}}"
                                            FontStyle="Italic"
                                            Icon="{Markup:SmallImage Image=Method}"
                                            InputGestureText="{Data:Bind ValueType, Convert=Conversion:RealTypeNameConverter, ConverterParameter=1}"/>
                                        <CollectionContainer Collection="{Binding Data.PasteMethods, Source={StaticResource Member}}"/>
                                        
                                        <Separator Linq:XSeparator.Header="{Markup:Loc Replace}" Visibility="{Data:VisibilityBinding AssignableTypes}"/>
                                        <CollectionContainer Collection="{Binding Data.AssignableTypes, Source={StaticResource Member}}"/>
                                                
                                        <Separator Linq:XSeparator.Header="{Markup:Loc Replace}" Visibility="{Data:VisibilityBinding AssignableValues}"/>
                                        <CollectionContainer Collection="{Binding Data.AssignableValues, Source={StaticResource Member}}"/>

                                        <Separator/>
                                        <MenuItem Tag="0" Header="{Markup:Loc Default}"
                                            Command="{Binding DefaultCommand}"
                                            CommandParameter="{Binding}"
                                            Icon="{Markup:SmallImage Image=SmallPeriod}"/>
                                        <MenuItem Tag="0" Header="{Markup:Loc Reset}"
                                            Command="{Binding ResetCommand}"
                                            CommandParameter="{Binding}"
                                            Icon="{Markup:SmallImage Image=Reset}"/>
                                        <MenuItem Tag="0" Header="{Markup:Loc Revert}"
                                            Command="{Binding RevertCommand}"
                                            CommandParameter="{Binding}"
                                            Icon="{Markup:SmallImage Image=Revert}"/>
                                        <MenuItem Tag="0" Header="{Markup:Loc Unset}"
                                            Command="{Binding UnsetCommand}"
                                            CommandParameter="{Binding}"
                                            Icon="{Markup:SmallImage Image=X}"
                                            Visibility="{Data:VisibilityBinding IsEnabled, From=Self}"/>
                                    </CompositeCollection>
                                </ContextMenu.ItemsSource>
                            </ContextMenu>
                        </local:ImageButton.Menu>
                    </local:ImageButton>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding ShowOptions}" Value="False">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TemplateType}" Value="{x:Type Input:ICommand}">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <!--
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsLockable}" Value="True"/>
                    <Condition Binding="{Binding Source.Instance.IsLocked}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
            -->
        </Style.Triggers>
    </Style>

    <!-- MemberValuePresenter -->

    <DataTemplate x:Key="{x:Static local:MemberGrid.MemberValueTemplateKey}" DataType="Reflection1:MemberModel">
        <ContentPresenter Content="{Binding}">
            <ContentPresenter.Resources>
                <Data:Reference x:Key="Presenter" Data="{Data:Ancestor {x:Type local:MemberValuePresenter}}"/>
            </ContentPresenter.Resources>
            <ContentPresenter.ContentTemplate>
                <DataTemplate>
                    <Grid Linq:XGrid.Columns="Auto,*" Linq:XGrid.Rows="Auto,*">
                        <ContentPresenter x:Name="Caption" Content="{Binding}" ContentTemplate="{StaticResource {x:Static local:MemberGrid.CaptionTemplateKey}}" 
                            Visibility="{Data:VisibilityBinding Caption}"/>
                        <Grid x:Name="Grid" Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="*,Auto">
                            <Grid.Resources>
                                <Data:Reference x:Key="Member" 
                                    Data="{Binding}"/>
                                <Data:Reference x:Key="MemberGrid"
                                    Data="{Data:Ancestor local:MemberGrid}"/>
                            </Grid.Resources>
                            <ContentPresenter x:Name="ContentPresenter" Content="{Binding TemplateType}">
                                <ContentPresenter.ContentTemplate>
                                    <DataTemplate>
                                        <ContentPresenter x:Name="ContentPresenter" Content="{Binding Data, Source={StaticResource Member}}" 
                                            ContentTemplateSelector="{StaticResource MemberTemplateSelector}"/>
                                        <DataTemplate.Triggers>
                                            <!-- IsIndeterminate = true & IsTemplateIndeterminable = false -->
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Data.IsIndeterminate, Source={StaticResource Member}}" Value="True"/>
                                                    <Condition Binding="{Binding Data.IsTemplateIndeterminable, Source={StaticResource Member}}" Value="False"/>
                                                    <Condition Binding="{Data:EqualBinding Data.TemplateType, {x:Type Reflection2:EventInfo}, Source={StaticResource Member}}" Value="False"/>
                                                    <Condition Binding="{Data:EqualBinding Data.TemplateType, {x:Type Reflection2:MethodInfo}, Source={StaticResource Member}}" Value="False"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:MemberGrid.MemberIndeterminateTemplateKey}}"/>
                                                <Setter TargetName="ContentPresenter" Property="ContentTemplateSelector" Value="{x:Null}"/>
                                            </MultiDataTrigger>
                                            <!-- IsIndeterminate = false & Value = null -->
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Data.Value, Source={StaticResource Member}}" Value="{x:Null}"/>
                                                    <Condition Binding="{Binding Data.IsIndeterminate, Source={StaticResource Member}}" Value="False"/>
                                                    <Condition Binding="{Data:EqualBinding Data.TemplateType, {x:Type Reflection2:EventInfo}, Source={StaticResource Member}}" Value="False"/>
                                                    <Condition Binding="{Data:EqualBinding Data.TemplateType, {x:Type Reflection2:MethodInfo}, Source={StaticResource Member}}" Value="False"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:MemberGrid.MemberNullTemplateKey}}"/>
                                                <Setter TargetName="ContentPresenter" Property="ContentTemplateSelector" Value="{x:Null}"/>
                                            </MultiDataTrigger>
                                            <!-- IsIndeterminate = false & HasAttribute<StringStyleAttribute> & Style = ReadOnly & !EventInfo & !MethodInfo -->
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Data:Bind Data, Convert=Conversion:HasAttributeConverter, ConverterParameter={x:Type SharedCore:StringStyleAttribute}, Source={StaticResource Member}}" Value="True"/>
                                                    <Condition Binding="{Binding Data.StyleAttribute.Style}" Value="{x:Static SharedCore:StringStyle.ReadOnly}"/>
                                                    <Condition Binding="{Binding Data.IsIndeterminate, Source={StaticResource Member}}" Value="False"/>
                                                    <Condition Binding="{Data:EqualBinding Data.TemplateType, {x:Type Reflection2:EventInfo}, Source={StaticResource Member}}" Value="False"/>
                                                    <Condition Binding="{Data:EqualBinding Data.TemplateType, {x:Type Reflection2:MethodInfo}, Source={StaticResource Member}}" Value="False"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static local:MemberGrid.MemberTextTemplateKey}}"/>
                                                <Setter TargetName="ContentPresenter" Property="ContentTemplateSelector" Value="{x:Null}"/>
                                            </MultiDataTrigger>
                                        </DataTemplate.Triggers>
                                    </DataTemplate>
                                </ContentPresenter.ContentTemplate>
                            </ContentPresenter>
                            <local:MemberOptionPresenter x:Name="Options" Content="{Binding}"/>
                        </Grid>
                        <Popup>
                        </Popup>
                    </Grid>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding Data.Orientation, Source={StaticResource Presenter}}" Value="Horizontal">
                            <Setter TargetName="Caption" Property="Grid.Column" Value="0"/>
                            <Setter TargetName="Caption" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="Caption" Property="Grid.ColumnSpan" Value="1"/>
                            <Setter TargetName="Caption" Property="Grid.RowSpan" Value="2"/>
                            <Setter TargetName="Caption" Property="Margin" Value="0,0,5,0"/>

                            <Setter TargetName="Grid" Property="Grid.Column" Value="1"/>
                            <Setter TargetName="Grid" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="Grid" Property="Grid.ColumnSpan" Value="1"/>
                            <Setter TargetName="Grid" Property="Grid.RowSpan" Value="2"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Data.Orientation, Source={StaticResource Presenter}}" Value="Vertical">
                            <Setter TargetName="Caption" Property="Grid.Column" Value="0"/>
                            <Setter TargetName="Caption" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="Caption" Property="Grid.ColumnSpan" Value="2"/>
                            <Setter TargetName="Caption" Property="Grid.RowSpan" Value="1"/>
                            <Setter TargetName="Caption" Property="Margin" Value="0,0,0,5"/>

                            <Setter TargetName="Grid" Property="Grid.Column" Value="0"/>
                            <Setter TargetName="Grid" Property="Grid.Row" Value="1"/>
                            <Setter TargetName="Grid" Property="Grid.ColumnSpan" Value="2"/>
                            <Setter TargetName="Grid" Property="Grid.RowSpan" Value="1"/>
                        </DataTrigger>
                        <Trigger SourceName="Options" Property="Visibility" Value="Visible">
                            <Setter TargetName="Options" Property="Margin" Value="1,0,0,0"/>
                        </Trigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </ContentPresenter.ContentTemplate>
        </ContentPresenter>
    </DataTemplate>

    <Style x:Key="{x:Type local:MemberValuePresenter}" TargetType="{x:Type local:MemberValuePresenter}">
        <Setter Property="ContentTemplate" Value="{StaticResource {x:Static local:MemberGrid.MemberValueTemplateKey}}"/>
        <Setter Property="IsEnabled" Value="True"/>
        <Setter Property="Linq:XElement.ToolTipTemplate" Value="{DynamicResource {x:Static local:MemberGrid.MemberToolTipKey}}"/>
        <Setter Property="Linq:XToolTip.Header" Value="{Binding}"/>
        <Setter Property="Linq:XToolTip.HeaderTemplate" Value="{StaticResource {x:Static local:MemberGrid.MemberToolTipHeaderKey}}"/>
        <Setter Property="Linq:XToolTip.HeaderIcon" Value="{x:Null}"/>
        <Setter Property="Linq:XToolTip.MinimumWidth" Value="{DynamicResource MemberToolTipMinWidth}"/>
        <Setter Property="ToolTip" Value="{Data:Self DataContext}"/>
        <Style.Triggers>
            <!--
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsLockable}" Value="True"/>
                    <Condition Binding="{Binding Source.Instance.IsLocked}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="IsEnabled" Value="True"/>
            </MultiDataTrigger>
            -->
            <!-- /// -->
            <DataTrigger Binding="{Binding IsLockable}" Value="False">
                <Setter Property="IsEnabled" Value="True"/>
            </DataTrigger>
            <DataTrigger Binding="{Data:Ancestor Orientation, local:MemberGrid}" Value="Horizontal">
                <Setter Property="MaxWidth" Value="{Data:Bind Convert=Conversion:ObjectToDoubleConverter, Path=MaximumWidth}"/>
                <Setter Property="MinWidth" Value="{Data:Bind Convert=Conversion:ObjectToDoubleConverter, Path=MinimumWidth}"/>
                <Setter Property="Width" Value="{Data:Bind Convert=Conversion:ObjectToDoubleConverter, Path=Width}"/>
            </DataTrigger>
            <DataTrigger Binding="{Data:Ancestor Orientation, local:MemberGrid}" Value="Vertical">
                <Setter Property="MaxHeight" Value="{Data:Bind Convert=Conversion:ObjectToDoubleConverter, Path=MaximumHeight}"/>
                <Setter Property="MinHeight" Value="{Data:Bind Convert=Conversion:ObjectToDoubleConverter, Path=MinimumHeight}"/>
                <Setter Property="Height" Value="{Data:Bind Convert=Conversion:ObjectToDoubleConverter, Path=Height}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- MemberGrid > Source options -->

    <DataTemplate x:Key="{x:Static local:MemberGrid.SourceOptionsTemplateKey}">
        <local:ImageToggleButton Source="{Markup:SmallImage Image=TriangleDown}"
            ToolTip="{Markup:Loc Methods}">
            <local:ImageToggleButton.Resources>
                <Data:Reference x:Key="Source" Data="{Binding}"/>
            </local:ImageToggleButton.Resources>
            <local:ImageToggleButton.Menu>
                <ContextMenu DataContext="{Binding Data, Source={StaticResource Source}}" Linq:XContextMenu.Header="{Data:NameAttributeBinding FirstInstance}" Linq:XContextMenu.HeaderIcon="{Data:ImageAttributeBinding FirstInstance, Type=Image}">
                    <ContextMenu.Resources>
                        <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Command" Value="{Binding Data.InvokeMethodCommand, Source={StaticResource Source}}"/>
                            <Setter Property="CommandParameter" Value="{Binding}"/>
                            <Setter Property="Header" Value="{Data:NameAttributeBinding}"/>
                            <Setter Property="Icon" Value="{Data:ImageAttributeBinding}"/>
                            <Setter Property="Linq:XToolTip.Header" Value="{Data:NameAttributeBinding}"/>
                            <Setter Property="Linq:XToolTip.HeaderIcon" Value="{Data:ImageAttributeBinding}"/>
                            <Setter Property="Linq:XElement.ToolTipTemplate" Value="{DynamicResource {x:Static local:MemberGrid.ObjectToolTipKey}}"/>
                            <Setter Property="InputGestureText" Value="{Data:Bind Convert=Conversion:MethodReturnTypeConverter, ConverterParameter=1}"/>
                            <Setter Property="ToolTip" Value="{Binding}"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Data:ImageAttributeBinding}" Value="{x:Null}">
                                    <Setter Property="Icon" Value="{Markup:SmallImage Image=Method}"/>
                                    <Setter Property="Linq:XToolTip.HeaderIcon" Value="{Markup:SmallImage Image=Method}"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ReturnType.Name}" Value="Void">
                                    <Setter Property="InputGestureText" Value="{Data:Bind Convert=Conversion:FirstMethodParameterTypeConverter, ConverterParameter=1}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ContextMenu.Resources>
                    <ContextMenu.ItemsSource>
                        <CompositeCollection>
                            <CollectionContainer Collection="{Binding Data.Methods, Source={StaticResource Source}}"/>
                            <Separator Linq:XSeparator.Header="{Markup:Loc Copy}" Visibility="{Data:CompareInt32Binding Data.CopyMethods.Count, Result=Visibility, Source={StaticResource Source}, Type=Greater}"/>
                            <CollectionContainer Collection="{Binding Data.CopyMethods, Source={StaticResource Source}}"/>
                            <Separator Linq:XSeparator.Header="{Markup:Loc Paste}" Visibility="{Data:CompareInt32Binding Data.PasteMethods.Count, Result=Visibility, Source={StaticResource Source}, Type=Greater}"/>
                            <CollectionContainer Collection="{Binding Data.PasteMethods, Source={StaticResource Source}}"/>
                        </CompositeCollection>
                    </ContextMenu.ItemsSource>
                </ContextMenu>
            </local:ImageToggleButton.Menu>
        </local:ImageToggleButton>
    </DataTemplate>

    <!-- MemberGrid > Options -->

    <DataTemplate x:Key="{x:Static local:MemberGrid.OptionsTemplateKey}">
        <local:ImageToggleButton Source="{Markup:SmallImage Image=Filter}"
            ToolTip="{Markup:Loc Options}">
            <local:ImageToggleButton.Resources>
                <Data:Reference x:Key="MemberGrid" Data="{Data:Ancestor local:MemberGrid}"/>
            </local:ImageToggleButton.Resources>
            <local:ImageToggleButton.Menu>
                <ContextMenu DataContext="{Binding Data, Source={StaticResource MemberGrid}}">
                    <ContextMenu.ItemsSource>
                        <CompositeCollection>
                            <MenuItem Header="{Binding Data.GroupName, Source={StaticResource MemberGrid}}" 
                                Icon="{Markup:SmallImage Group.png}">
                                <MenuItem.HeaderTemplate>
                                    <DataTemplate>
                                        <StackPanel Orientation="Horizontal">
                                            <TextBlock Margin="0,0,5,0" Text="{Markup:Loc Group}"/>
                                            <local:AccentLabel Content="{Binding}" FontStyle="Italic" HorizontalAlignment="Left"/>
                                        </StackPanel>
                                    </DataTemplate>
                                </MenuItem.HeaderTemplate>
                                <MenuItem.ItemsSource>
                                    <CompositeCollection>
                                        <MenuItem Header="{Markup:Loc Collapse}"
                                            Command="{Binding Data.CollapseGroupsCommand, Source={StaticResource MemberGrid}}"/>
                                        <MenuItem Header="{Markup:Loc Expand}"
                                            Command="{Binding Data.ExpandGroupsCommand, Source={StaticResource MemberGrid}}"/>
                                        <Separator/>
                                        <CollectionContainer Collection="{Markup:Enumerate local:MemberGroupName}"/>
                                        <Separator/>
                                        <CollectionContainer Collection="{Markup:Enumerate ComponentModel:ListSortDirection}"/>
                                    </CompositeCollection>
                                </MenuItem.ItemsSource>
                                <MenuItem.Resources>
                                    <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                        <Setter Property="CommandParameter" Value="{Binding}"/>
                                        <Setter Property="Header" Value="{Data:LocalBinding}"/>
                                        <Setter Property="StaysOpenOnClick" Value="True"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Data:Bind Convert=Conversion:GetTypeConverter}" Value="{x:Type local:MemberGroupName}">
                                                <Setter Property="Command" Value="{Binding Data.GroupCommand, Source={StaticResource MemberGrid}}"/>
                                                <Setter Property="IsChecked">
                                                    <Setter.Value>
                                                        <Data:MultiBind Convert="{x:Type Conversion:ValueEqualsParameterMultiConverter}" Mode="OneWay">
                                                            <Binding Path="Data.GroupName" Source="{StaticResource MemberGrid}"/>
                                                            <Binding Path="."/>
                                                        </Data:MultiBind>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Data:Bind Convert=Conversion:GetTypeConverter}" Value="{x:Type ComponentModel:ListSortDirection}">
                                                <Setter Property="IsChecked">
                                                    <Setter.Value>
                                                        <Data:MultiBind Convert="{x:Type Conversion:ValueEqualsParameterMultiConverter}" Mode="OneWay">
                                                            <Binding Path="Data.GroupDirection" Source="{StaticResource MemberGrid}"/>
                                                            <Binding Path="."/>
                                                        </Data:MultiBind>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </MenuItem.Resources>
                            </MenuItem>
                            <MenuItem Header="{Binding Data.SortName, Source={StaticResource MemberGrid}}"
                                Icon="{Markup:SmallImage Sort.png}">
                                <MenuItem.HeaderTemplate>
                                    <DataTemplate>
                                        <StackPanel Orientation="Horizontal">
                                            <TextBlock Margin="0,0,5,0" Text="{Markup:Loc Sort}"/>
                                            <local:AccentLabel Content="{Binding}" FontStyle="Italic" HorizontalAlignment="Left"/>
                                        </StackPanel>
                                    </DataTemplate>
                                </MenuItem.HeaderTemplate>
                                <MenuItem.ItemsSource>
                                    <CompositeCollection>
                                        <CollectionContainer Collection="{Markup:Enumerate local:MemberSortName}"/>
                                        <Separator/>
                                        <CollectionContainer Collection="{Markup:Enumerate ComponentModel:ListSortDirection}"/>
                                    </CompositeCollection>
                                </MenuItem.ItemsSource>
                                <MenuItem.Resources>
                                    <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                        <Setter Property="CommandParameter" Value="{Binding}"/>
                                        <Setter Property="Header" Value="{Data:LocalBinding}"/>
                                        <Setter Property="StaysOpenOnClick" Value="True"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Data:Bind Convert=Conversion:GetTypeConverter}" Value="{x:Type local:MemberSortName}">
                                                <Setter Property="Command" Value="{Binding Data.SortCommand, Source={StaticResource MemberGrid}}"/>
                                                <Setter Property="IsChecked">
                                                    <Setter.Value>
                                                        <Data:MultiBind Convert="{x:Type Conversion:ValueEqualsParameterMultiConverter}" Mode="OneWay">
                                                            <Binding Path="Data.SortName" Source="{StaticResource MemberGrid}"/>
                                                            <Binding Path="."/>
                                                        </Data:MultiBind>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Data:Bind Convert=Conversion:GetTypeConverter}" Value="{x:Type ComponentModel:ListSortDirection}">
                                                <Setter Property="IsChecked">
                                                    <Setter.Value>
                                                        <Data:MultiBind Convert="{x:Type Conversion:ValueEqualsParameterMultiConverter}" Mode="OneWay">
                                                            <Binding Path="Data.SortDirection" Source="{StaticResource MemberGrid}"/>
                                                            <Binding Path="."/>
                                                        </Data:MultiBind>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </MenuItem.Resources>
                            </MenuItem>
                            <Separator Linq:XSeparator.Header="View"/>
                            <MenuItem Header="{Markup:Loc Description}"
                                Icon="{Markup:SmallImage Image=Info}"
                                IsCheckable="True"
                                IsChecked="{Data:Bind DescriptionVisibility, Convert=Conversion:BooleanToVisibilityConverter, Trigger=PropertyChanged, Way=2}"/>
                        </CompositeCollection>
                    </ContextMenu.ItemsSource>
                </ContextMenu>
            </local:ImageToggleButton.Menu>
        </local:ImageToggleButton>
    </DataTemplate>

    <!-- MemberGrid > Description -->

    <DataTemplate x:Key="{x:Static local:MemberGrid.DescriptionPatternKey}">
        <local:PatternElement Foreground="{local:ThemeKey Key=Text}"/>
    </DataTemplate>

    <Style x:Key="{x:Static local:MemberGrid.DescriptionStyleKey}" TargetType="Border">
        <Setter Property="Background" Value="{local:ThemeKey MemberGridDescriptionBackground}"/>
        <Setter Property="BorderBrush" Value="{local:ThemeKey MemberGridDescriptionBorder}"/>
        <Setter Property="BorderThickness" Value="0,1,0,0"/>
        <Setter Property="MinHeight" Value="36"/>
        <Setter Property="TextElement.Foreground" Value="{local:ThemeKey Text}"/>
        <Setter Property="Padding" Value="10"/>
    </Style>

    <Style x:Key="{x:Static local:MemberGrid.GridSplitterStyleKey}" TargetType="GridSplitter">
        <Setter Property="Background" Value="{local:ThemeKey GridSplitterBackground}"/>
        <Setter Property="Height" Value="4"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="ResizeBehavior" Value="PreviousAndNext" />
        <Setter Property="ResizeDirection" Value="Rows" />
        <Setter Property="Width" Value="Auto"/>
    </Style>

    <!-- MemberGrid > Templates -->

    <ControlTemplate x:Key="{x:Static local:MemberGrid.HorizontalTemplate}" TargetType="{x:Type local:MemberGrid}">
        <Border
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="{TemplateBinding Border.CornerRadius}"
            Padding="{TemplateBinding Padding}">
            <Grid>
                <Grid.Resources>
                    <Data:Reference x:Key="MemberGrid" Data="{Data:TemplatedParent}"/>
                </Grid.Resources>
                <!-- Content -->
                <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,Auto,Auto,Auto,*,Auto,Auto,Auto"
                    Linq:XPanel.VerticalContentAlignment="Center"
                    Visibility="{Data:VisibilityBinding IsLoading, From=TemplatedParent, Invert=True}">
                    <!-- Route -->
                    <local:ChildElement Margin="0,0,5,0">
                        <local:ChildElement.Visibility>
                            <Data:MultiBind Convert="{x:Type Conversion:BooleanToVisibilityMultiConverter}" Mode="OneWay">
                                <Data:TemplatedParent Path="SearchVisibility" Convert="Conversion:InverseVisibilityConverter"/>
                                <Data:TemplatedParent Path="SourceAttribute.ShowRoute"/>
                            </Data:MultiBind>
                        </local:ChildElement.Visibility>
                        <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,Auto"
                            Visibility="{Data:CompareInt32Binding Route.Count, From=TemplatedParent, Result=Visibility, Type=Greater, Value=1}">
                            <ContentPresenter Content="{Data:TemplatedParent BackCommand}"
                                ContentTemplate="{TemplateBinding BackButtonTemplate}"
                                Margin="0,-1,5,0"
                                Visibility="{Data:VisibilityBinding CanNavigateBack, From=TemplatedParent}"/>
                            <ContentPresenter Content="{Data:TemplatedParent Route}"
                                ContentStringFormat="{TemplateBinding RouteStringFormat}"
                                ContentTemplate="{TemplateBinding RouteTemplate}"
                                ContentTemplateSelector="{TemplateBinding RouteTemplateSelector}"/>
                        </Grid>
                    </local:ChildElement>

                    <!-- View -->
                    <Grid Margin="0,0,5,0"
                        Visibility="{Data:EqualBinding Members.CurrentView, {x:Static Reflection3:MemberView.All}, From=TemplatedParent, Invert=True, Result=Visibility}">
                        <!-- View > Single-->
                        <ContentPresenter Content="{TemplateBinding Members}" ContentTemplate="{StaticResource {x:Static local:MemberGrid.ViewSingleTemplate}}"
                            Visibility="{Data:EqualBinding Members.CurrentView, {x:Static Reflection3:MemberView.Single}, From=TemplatedParent, Result=Visibility}"/>
                        <!-- View > Tab -->
                        <ContentPresenter Content="{TemplateBinding Members}" ContentTemplate="{StaticResource {x:Static local:MemberGrid.ViewTabTemplate}}"
                            Visibility="{Data:EqualBinding Members.CurrentView, {x:Static Reflection3:MemberView.Tab}, From=TemplatedParent, Result=Visibility}"/>
                    </Grid>

                    <!-- (Above) -->
                    <ContentPresenter Content="{Data:TemplatedParent Members.Above.View}"
                        ContentTemplate="{StaticResource {x:Static local:MemberGrid.ToolBarTemplate}}"
                        Margin="0,0,5,0"
                        Visibility="{Data:CompareInt32Binding Members.Above.Source.Count, From=TemplatedParent, Result=Visibility, Type=Greater}"/>

                    <!-- (Before) -->
                    <ContentPresenter Content="{Data:TemplatedParent Members.Before.View}"
                        ContentTemplate="{StaticResource {x:Static local:MemberGrid.PinTemplate}}"
                        Margin="0,0,5,0"
                        Visibility="{Data:CompareInt32Binding Members.Before.Source.Count, From=TemplatedParent, Result=Visibility, Type=Greater}"/>

                    <!-- Content -->
                    <Grid>
                        <!-- Members -->
                        <ContentPresenter Content="{Data:TemplatedParent Members.View}" ContentTemplate="{StaticResource {x:Static local:MemberGrid.ToolBarTemplate}}"/>
                        <!-- Empty -->
                        <local:ChildElement Visibility="{Data:VisibilityBinding Members.Count, From=TemplatedParent, Invert=True}">
                            <local:EmptyPresenter/>
                        </local:ChildElement>
                    </Grid>

                    <!-- (After) -->
                    <ContentPresenter Content="{Data:TemplatedParent Members.After.View}"
                        ContentTemplate="{StaticResource {x:Static local:MemberGrid.PinTemplate}}"
                        Margin="5,0,0,0"
                        Visibility="{Data:CompareInt32Binding Members.After.Source.Count, From=TemplatedParent, Result=Visibility, Type=Greater}"/>

                    <!-- (Below) -->
                    <ContentPresenter Content="{Data:TemplatedParent Members.Below.View}"
                        ContentTemplate="{StaticResource {x:Static local:MemberGrid.ToolBarTemplate}}"
                        Margin="5,0,0,0"
                        Visibility="{Data:CompareInt32Binding Members.Below.Source.Count, From=TemplatedParent, Result=Visibility, Type=Greater}"/>

                    <!-- Buttons > Custom -->
                    <ItemsControl ItemsSource="{TemplateBinding HeaderButtons}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Horizontal"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <ContentPresenter Content="{Binding}"/>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>

                    <!--
                    <!- Source filter ->
                    <ContentPresenter Content="{Markup:True}" ContentTemplate="{StaticResource {x:Static local:MemberGrid.OptionsTemplateKey}}" Margin="1,0">
                        <ContentPresenter.Visibility>
                            <Data:MultiBind Convert="{x:Type Conversion:BooleanToVisibilityMultiConverter}" Mode="OneWay">
                                <Data:TemplatedParent Path="FilterVisibility"/>
                                <Data:TemplatedParent Path="SourceAttribute.ShowFilter"/>
                            </Data:MultiBind>
                        </ContentPresenter.Visibility>
                    </ContentPresenter>

                    <!- Source options ->
                    <ContentPresenter Content="{Data:TemplatedParent Members.Source}" ContentTemplate="{StaticResource {x:Static local:MemberGrid.SourceOptionsTemplateKey}}" Margin="1,0">
                        <ContentPresenter.Visibility>
                            <Data:MultiBind Convert="{x:Type Conversion:BooleanToVisibilityMultiConverter}" Mode="OneWay">
                                <Data:TemplatedParent Path="SourceAttribute.ShowOptions"/>
                            </Data:MultiBind>
                        </ContentPresenter.Visibility>
                    </ContentPresenter>
                    -->
                </Grid>

                <!-- Loader -->
                <ContentPresenter ContentTemplate="{TemplateBinding LoaderTemplate}"
                    HorizontalAlignment="Center" VerticalAlignment="Center"
                    Visibility="{Data:VisibilityBinding IsLoading, From=TemplatedParent}"/>
            </Grid>
        </Border>
    </ControlTemplate>

    <ControlTemplate x:Key="{x:Static local:MemberGrid.VerticalTemplate}" TargetType="{x:Type local:MemberGrid}">
        <Border
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="{TemplateBinding Border.CornerRadius}">
            <Border.Resources>
                <Data:Reference x:Key="MemberGrid" Data="{Data:TemplatedParent}"/>
            </Border.Resources>
            <Grid Linq:XGrid.Rows="Auto,*">
                <!-- Header -->
                <local:BottomBorder Grid.Row="0" IsEnabled="{Data:Bind Convert=Conversion:InverseBooleanConverter, Path=IsLoading, From=TemplatedParent}">
                    <local:BottomBorder.Visibility>
                        <Data:MultiBind Convert="{x:Type Conversion:BooleanToVisibilityMultiConverter}" Mode="OneWay">
                            <Data:TemplatedParent Path="HeaderVisibility"/>
                            <Data:TemplatedParent Path="SourceAttribute.ShowHeader"/>
                        </Data:MultiBind>
                    </local:BottomBorder.Visibility>
                    <Grid Linq:XGrid.Columns="Auto,*,Auto,Auto,Auto" Linq:XPanel.VerticalContentAlignment="Center"
                        Height="28" Margin="0,2">
                        <!-- Search button -->
                        <local:ImageToggleButton Grid.Column="0"
                            IsChecked="{Data:VisibilityBinding SearchVisibility, Mode=TwoWay, From=TemplatedParent}"
                            Margin="5,0"
                            Source="{Markup:SmallImage Search.png}"
                            ToolTip="{Markup:Loc Search}">
                            <local:ImageToggleButton.Visibility>
                                <Data:MultiBind Convert="{x:Type Conversion:BooleanToVisibilityMultiConverter}" Mode="OneWay">
                                    <Data:TemplatedParent Path="SourceAttribute.ShowSearch"/>
                                </Data:MultiBind>
                            </local:ImageToggleButton.Visibility>
                        </local:ImageToggleButton>

                        <!-- Route -->
                        <local:ChildElement Grid.Column="1">
                            <local:ChildElement.Visibility>
                                <Data:MultiBind Convert="{x:Type Conversion:BooleanToVisibilityMultiConverter}" Mode="OneWay">
                                    <Data:TemplatedParent Path="SearchVisibility" Convert="Conversion:InverseVisibilityConverter"/>
                                    <Data:TemplatedParent Path="SourceAttribute.ShowRoute"/>
                                </Data:MultiBind>
                            </local:ChildElement.Visibility>
                            <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,*" 
                                Visibility="{Data:CompareInt32Binding Route.Count, From=TemplatedParent, Result=Visibility, Type=Greater}">
                                <ContentPresenter Content="{Data:TemplatedParent BackCommand}"
                                    ContentTemplate="{TemplateBinding BackButtonTemplate}"
                                    Margin="0,-1,0,0"
                                    Visibility="{Data:VisibilityBinding CanNavigateBack, From=TemplatedParent}"/>
                                <ContentPresenter Content="{Data:TemplatedParent Route}"
                                    ContentStringFormat="{TemplateBinding RouteStringFormat}"
                                    ContentTemplate="{TemplateBinding RouteTemplate}"
                                    ContentTemplateSelector="{TemplateBinding RouteTemplateSelector}"
                                    Margin="2,0,0,0"/>
                            </Grid>
                        </local:ChildElement>

                        <!-- Search -->
                        <Grid Grid.Column="1" Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,*"
                            Linq:XPanel.VerticalContentAlignment="Center"
                            Margin="1,0">
                            <Grid.Visibility>
                                <Data:MultiBind Convert="{x:Type Conversion:BooleanToVisibilityMultiConverter}" Mode="OneWay">
                                    <Data:TemplatedParent Path="SearchVisibility"/>
                                    <Data:TemplatedParent Path="SourceAttribute.ShowSearch"/>
                                </Data:MultiBind>
                            </Grid.Visibility>
                            <ComboBox
                                ItemsSource="{Markup:Enumerate local:MemberSearchName}"
                                Margin="0,0,2.5,0"
                                SelectedItem="{Data:TemplatedParent SearchName, Mode=TwoWay}"
                                ToolTip="{Markup:Loc Search}">
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Data:LocalBinding}"/>
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                            </ComboBox>
                            <TextBox
                                Background="Transparent"
                                BorderThickness="0"
                                Linq:XTextBox.ClearButtonVisibility="Visible"
                                Linq:XTextBoxBase.Placeholder="{Markup:Loc Search}"
                                Padding="0"
                                Text="{Data:TemplatedParent Search, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                ToolTip="{Markup:Loc Search}"/>
                        </Grid>

                        <!-- Buttons > Custom -->
                        <ItemsControl Grid.Column="2" ItemsSource="{TemplateBinding HeaderButtons}">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <ContentPresenter Content="{Binding}"/>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>

                        <!-- Source filter -->
                        <ContentPresenter Grid.Column="3" Content="{Markup:True}" ContentTemplate="{StaticResource {x:Static local:MemberGrid.OptionsTemplateKey}}" Margin="1,0">
                            <ContentPresenter.Visibility>
                                <Data:MultiBind Convert="{x:Type Conversion:BooleanToVisibilityMultiConverter}" Mode="OneWay">
                                    <Data:TemplatedParent Path="FilterVisibility"/>
                                    <Data:TemplatedParent Path="SourceAttribute.ShowFilter"/>
                                </Data:MultiBind>
                            </ContentPresenter.Visibility>
                        </ContentPresenter>

                        <!-- Source options -->
                        <ContentPresenter Grid.Column="4" Content="{Data:TemplatedParent Members.Source}" ContentTemplate="{StaticResource {x:Static local:MemberGrid.SourceOptionsTemplateKey}}" Margin="1,0">
                            <ContentPresenter.Visibility>
                                <Data:MultiBind Convert="{x:Type Conversion:BooleanToVisibilityMultiConverter}" Mode="OneWay">
                                    <Data:TemplatedParent Path="SourceAttribute.ShowOptions"/>
                                </Data:MultiBind>
                            </ContentPresenter.Visibility>
                        </ContentPresenter>
                    </Grid>
                </local:BottomBorder>

                <!-- Content -->
                <Grid Grid.Row="1" Linq:XGrid.AutoRows="True" Visibility="{Data:VisibilityBinding IsLoading, From=TemplatedParent, Invert=True}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="{Data:TemplatedParent DescriptionHeight, Mode=TwoWay}"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <!-- View -->
                    <local:BottomBorder x:Name="View">
                        <Grid>
                            <!-- View > Single -->
                            <ContentPresenter x:Name="ViewSingle" Content="{TemplateBinding Members}" ContentTemplate="{StaticResource {x:Static local:MemberGrid.ViewSingleTemplate}}"
                                Margin="5"/>
                            <!-- View > Tab -->
                            <ContentPresenter x:Name="ViewTab" Content="{TemplateBinding Members}" ContentTemplate="{StaticResource {x:Static local:MemberGrid.ViewTabTemplate}}"
                                Margin="0,5,5,0"/>
                        </Grid>
                    </local:BottomBorder>

                    <!-- (Above) -->
                    <local:BottomBorder Visibility="{Data:CompareInt32Binding Members.Above.Source.Count, From=TemplatedParent, Result=Visibility, Type=Greater}"
                        Padding="5">
                        <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,*,Auto">
                            <ContentPresenter Content="{Data:TemplatedParent Members.AboveLeft.View}"
                                ContentTemplate="{StaticResource {x:Static local:MemberGrid.ToolBarTemplate}}"/>
                            <ContentPresenter Content="{Data:TemplatedParent Members.Above.View}"
                                ContentTemplate="{StaticResource {x:Static local:MemberGrid.ToolBarTemplate}}"/>
                            <ContentPresenter Content="{Data:TemplatedParent Members.AboveRight.View}"
                                ContentTemplate="{StaticResource {x:Static local:MemberGrid.ToolBarTemplate}}"/>
                        </Grid>
                    </local:BottomBorder>

                    <!-- (Before)  -->
                    <local:BottomBorder Padding="5,2"
                        Visibility="{Data:CompareInt32Binding Members.Before.Source.Count, From=TemplatedParent, Result=Visibility, Type=Greater}">
                        <ContentPresenter Content="{Data:TemplatedParent Members.Before.View}"
                            ContentTemplate="{StaticResource {x:Static local:MemberGrid.PinTemplate}}"/>
                    </local:BottomBorder>

                    <!-- Content  -->
                    <Grid>
                        <local:EmptyPresenter/>
                        <ScrollViewer Linq:XElement.Name="{x:Static local:MemberGrid.ScrollViewerKey}"
                            Focusable="False"
                            Linq:XScrollViewer.Overlap="True">
                            <ItemsPresenter 
                                Margin="{TemplateBinding Padding}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Grid>

                    <!-- Description -->
                    <GridSplitter Style="{StaticResource {x:Static local:MemberGrid.GridSplitterStyleKey}}">
                        <GridSplitter.Visibility>
                            <Data:MultiBind Convert="{x:Type Conversion:BooleanToVisibilityMultiConverter}" Mode="OneWay">
                                <Data:TemplatedParent Path="CanResizeDescription"/>
                                <Data:TemplatedParent Path="DescriptionVisibility"/>
                                <Data:TemplatedParent Path="ActiveMember" Convert="{x:Type Conversion:IsNullConverter}" ConverterParameter="1"/>
                            </Data:MultiBind>
                        </GridSplitter.Visibility>
                    </GridSplitter>
                    <Border Style="{StaticResource {x:Static local:MemberGrid.DescriptionStyleKey}}">
                        <Border.Visibility>
                            <Data:MultiBind Convert="{x:Type Conversion:BooleanToVisibilityMultiConverter}" Mode="OneWay">
                                <Data:TemplatedParent Path="DescriptionVisibility"/>
                                <Data:TemplatedParent Path="ActiveMember" Convert="{x:Type Conversion:IsNullConverter}" ConverterParameter="1"/>
                            </Data:MultiBind>
                        </Border.Visibility>
                        <ContentPresenter
                            Content="{Data:TemplatedParent ActiveMember}"
                            ContentTemplate="{Data:TemplatedParent DescriptionTemplate}"
                            ContentTemplateSelector="{Data:TemplatedParent DescriptionTemplateSelector}"/>
                    </Border>

                    <!-- (After)  -->
                    <local:TopBorder Padding="5,2"
                        Visibility="{Data:CompareInt32Binding Members.After.Source.Count, From=TemplatedParent, Result=Visibility, Type=Greater}">
                        <ContentPresenter Content="{Data:TemplatedParent Members.After.View}"
                            ContentTemplate="{StaticResource {x:Static local:MemberGrid.PinTemplate}}"/>
                    </local:TopBorder>

                    <!-- (Below) -->
                    <local:TopBorder Visibility="{Data:CompareInt32Binding Members.Below.Source.Count, From=TemplatedParent, Result=Visibility, Type=Greater}"
                        Padding="5">
                        <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,*,Auto">
                            <ContentPresenter Content="{Data:TemplatedParent Members.BelowLeft.View}"
                                ContentTemplate="{StaticResource {x:Static local:MemberGrid.ToolBarTemplate}}"/>
                            <ContentPresenter Content="{Data:TemplatedParent Members.Below.View}"
                                ContentTemplate="{StaticResource {x:Static local:MemberGrid.ToolBarTemplate}}"/>
                            <ContentPresenter Content="{Data:TemplatedParent Members.BelowRight.View}"
                                ContentTemplate="{StaticResource {x:Static local:MemberGrid.ToolBarTemplate}}"/>
                        </Grid>
                    </local:TopBorder>
                </Grid>

                <!-- Loader -->
                <ContentPresenter Grid.Row="1"
                    ContentTemplate="{TemplateBinding LoaderTemplate}"
                    Visibility="{Data:TemplatedParent IsLoading, Convert={x:Type Conversion:BooleanToVisibilityConverter}}"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Data:Self Members.CurrentView}" Value="All">
                <Setter TargetName="View" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="ViewSingle" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="ViewTab" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Data:Self Members.CurrentView}" Value="Single">
                <Setter TargetName="View" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ViewSingle" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ViewTab" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Data:Self Members.CurrentView}" Value="Tab">
                <Setter TargetName="View" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ViewSingle" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="ViewTab" Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- MemberGrid > Route -->

    <DataTemplate x:Key="{x:Static local:MemberGrid.RouteTemplateKey}">
        <ToolBar ItemsSource="{Binding}" 
            BorderThickness="0"
            Padding="0">
            <ToolBar.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </ToolBar.ItemsPanel>
            <ToolBar.ItemTemplate>
                <DataTemplate DataType="{x:Type Reflection1:MemberRouteElement}">
                    <Grid Linq:XGrid.Columns="Auto,Auto" Linq:XGrid.AutoColumns="True">
                        <local:ImageElement x:Name="Separator" Margin="0,0,2,0" Source="{Markup:SmallImage Image=SmallPeriod}"/>
                        <local:ImageButton x:Name="Button"
                            ButtonVisibility="Collapsed"
                            Command="{Data:Ancestor EditCommand, {x:Type local:MemberGrid}}"
                            CommandParameter="{Binding}"
                            Linq:XElement.ToolTipTemplate="{DynamicResource {x:Static local:MemberGrid.ObjectToolTipKey}}"
                            Linq:XToolTip.Header="{Data:NameAttributeBinding Value}"
                            Linq:XToolTip.HeaderIcon="{Data:ImageAttributeBinding Value}"
                            Linq:XToolTip.MinimumWidth="{DynamicResource MemberToolTipMinWidth}"
                            Margin="0,0,2,0"
                            ToolTip="{Binding Value}">
                            <local:ImageButton.Menu>
                                <ContextMenu/>
                            </local:ImageButton.Menu>
                            <StackPanel Orientation="Horizontal">
                                <ContentPresenter x:Name="ContentPresenter0" Content="{Binding}">
                                    <ContentPresenter.ContentTemplate>
                                        <DataTemplate>
                                            <local:ImageElement Source="{Data:ImageAttributeBinding Value, Type=Image}"
                                                Margin="0,0,5,0"/>
                                        </DataTemplate>
                                    </ContentPresenter.ContentTemplate>
                                </ContentPresenter>
                                <ContentPresenter x:Name="ContentPresenter1" Content="{Binding}"/>
                            </StackPanel>
                        </local:ImageButton>
                    </Grid>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Data:PreviousData}" Value="{x:Null}">
                            <Setter TargetName="Separator" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Data:ImageAttributeBinding Value, Type=Image}" Value="{x:Null}">
                            <Setter TargetName="ContentPresenter0" Property="ContentTemplate" Value="{Markup:EmptyTemplate}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Data:Bind Convert=Conversion:GetTypeConverter}" Value="{x:Type Reflection1:MemberRouteChild}">
                            <Setter TargetName="ContentPresenter1" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate DataType="Reflection1:MemberRouteChild">
                                        <TextBlock Text="{Data:MemberNameBinding Member}"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Data:Bind Convert=Conversion:GetTypeConverter}" Value="{x:Type Reflection1:MemberRouteItem}">
                            <Setter TargetName="ContentPresenter1" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate DataType="Reflection1:MemberRouteItem">
                                        <TextBlock Text="{Data:NameAttributeBinding Value}"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Data:Bind Convert=Conversion:GetTypeConverter}" Value="{x:Type Reflection1:MemberRouteSource}">
                            <Setter TargetName="ContentPresenter1" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate DataType="Reflection1:MemberRouteSource">
                                        <ContentPresenter x:Name="Content" Content="{Binding}"/>
                                        <DataTemplate.Triggers>
                                            <DataTrigger Binding="{Data:IsBinding Value, {x:Static Linq:XObject.ArrayType}}" Value="True">
                                                <Setter TargetName="Content" Property="ContentTemplate">
                                                    <Setter.Value>
                                                        <DataTemplate>
                                                            <TextBlock>
                                                                <Run Text="{Data:NameAttributeBinding Value}"/> (<Run Text="{Data:Bind Value.Length, Way=1}"/>)
                                                            </TextBlock>
                                                        </DataTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Data:IsBinding Value, {x:Static Linq:XObject.ArrayType}}" Value="False">
                                                <Setter TargetName="Content" Property="ContentTemplate">
                                                    <Setter.Value>
                                                        <DataTemplate>
                                                            <TextBlock Text="{Data:NameAttributeBinding Value}"/>
                                                        </DataTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </DataTemplate.Triggers>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </ToolBar.ItemTemplate>
        </ToolBar>
    </DataTemplate>

    <!-- MemberGrid -->

    <Style x:Key="{x:Type local:MemberGrid}" TargetType="{x:Type local:MemberGrid}" BasedOn="{StaticResource {x:Type DataGrid}}">
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BackButtonTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type ICommand}">
                    <local:ImageButton
                        Command="{Binding}"
                        Source="{Markup:SmallImage ArrowLeftRound.png}"
                        ToolTip="{Markup:Loc Back}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="{local:ThemeKey Border}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="CanResizeDescription" Value="True"/>
        <Setter Property="CanUserAddRows" Value="False"/>
        <Setter Property="CanUserDeleteRows" Value="False"/>
        <Setter Property="CanUserReorderColumns" Value="False"/>
        <Setter Property="CanUserResizeColumns" Value="True"/>
        <Setter Property="CanUserResizeRows" Value="False"/>
        <Setter Property="CellStyle">
            <Setter.Value>
                <Style TargetType="DataGridCell" BasedOn="{StaticResource {x:Type DataGridCell}}">
                    <Setter Property="Padding" Value="2"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="DefaultCategoryName" Value="{Markup:Loc General}"/>
        <Setter Property="DescriptionTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid Linq:XGrid.AutoRows="True" Linq:XGrid.Rows="Auto,Auto">
                        <local:BottomBorder Margin="0,0,0,5" Padding="0,0,0,5">
                            <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="*,Auto,*">
                                <ContentPresenter Content="{Markup:True}" ContentTemplate="{DynamicResource {x:Static local:MemberGrid.DescriptionPatternKey}}"/>
                                <StackPanel Margin="5,0" Orientation="Horizontal">
                                    <local:ImageElement Source="{Data:MemberImageBinding Type=Image}" 
                                        Margin="0,0,5,0" 
                                        Visibility="{Data:VisibilityBinding Source, From=Self}"/>
                                    <TextBlock Text="{Data:MemberNameBinding}"
                                        TextTrimming="CharacterEllipsis"
                                        ToolTip="{Data:Self Text}"/>
                                </StackPanel>
                                <ContentPresenter Content="{Markup:True}" ContentTemplate="{DynamicResource {x:Static local:MemberGrid.DescriptionPatternKey}}"/>
                            </Grid>
                        </local:BottomBorder>
                        <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static local:MemberGrid.MemberToolTipKey}}"/>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="DescriptionVisibility" Value="Collapsed"/>
        <Setter Property="EnableColumnVirtualization" Value="True"/>
        <Setter Property="EnableRowVirtualization" Value="True"/>
        <Setter Property="Foreground" Value="{local:ThemeKey Text}"/>
        <Setter Property="HeaderVisibility" Value="Visible"/>
        <Setter Property="HeadersVisibility" Value="None"/>
        <!-- /// -->
        <Setter Property="MemberNullText" Value="{Markup:Loc Prefix=(, Key=Null, Suffix=), Lower=True}"/>
        <Setter Property="MemberNullTextStyle">
            <Setter.Value>
                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
                    <Setter Property="FontStyle" Value="Italic"/>
                    <Setter Property="HorizontalAlignment" Value="Left"/>
                    <Setter Property="Margin" Value="0,5"/>
                    <Setter Property="Text" Value="{Data:Ancestor MemberNullText, {x:Type local:MemberGrid}}"/>
                    <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
                </Style>
            </Setter.Value>
        </Setter>
        <!-- /// -->
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type DataGridRow}">
                    <Setter Property="BorderThickness" Value="0" />
                    <Setter Property="Foreground" Value="{local:ThemeKey DataGridRowForeground}" />
                    <Setter Property="Linq:XElement.FadeIn" Value="True" />
                    <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey DataGridRowForeground}" />
                    <Setter Property="OverridesDefaultStyle" Value="True" />
                    <Setter Property="SnapsToDevicePixels" Value="True" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type DataGridRow}">
                                <Border
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                    <Grid>
                                        <Control x:Name="Selection" Style="{StaticResource {x:Static Linq:XElement.FocusVisualStyleKey}}"/>
                                        <SelectiveScrollingGrid Margin="1">
                                            <SelectiveScrollingGrid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="*" />
                                            </SelectiveScrollingGrid.ColumnDefinitions>
                                            <SelectiveScrollingGrid.RowDefinitions>
                                                <RowDefinition Height="*" />
                                                <RowDefinition Height="Auto" />
                                            </SelectiveScrollingGrid.RowDefinitions>
                                            <DataGridCellsPresenter Grid.Column="1"
                                                ItemsPanel="{TemplateBinding ItemsPanel}"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                            <DataGridDetailsPresenter 
                                                Grid.Column="1"
                                                Grid.Row="1"
                                                SelectiveScrollingGrid.SelectiveScrollingOrientation="{Data:Ancestor AreRowDetailsFrozen, {x:Type DataGrid}, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, Converter={x:Static DataGrid.RowDetailsScrollingConverter}}"
                                                Visibility="{TemplateBinding DetailsVisibility}" />
                                            <DataGridRowHeader Grid.RowSpan="2"
                                                SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical"
                                                Visibility="{Data:Ancestor HeadersVisibility, {x:Type DataGrid}, ConverterParameter={x:Static DataGridHeadersVisibility.Row}, Converter={x:Static DataGrid.HeadersVisibilityConverter}}" />
                                        </SelectiveScrollingGrid>
                                    </Grid>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="Linq:XDataGridRow.SelectionVisibility" Value="Collapsed">
                                        <Setter TargetName="Selection" Property="Visibility" Value="Collapsed"/>
                                    </Trigger>
                                    <Trigger Property="Linq:XDataGridRow.SelectionVisibility" Value="Visible">
                                        <Setter TargetName="Selection" Property="Visibility" Value="Visible"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
                    <Setter Property="ValidationErrorTemplate" Value="{StaticResource {x:Static Linq:XDataGridRow.ValidationErrorTemplateKey}}"/>
                    <Setter Property="Visibility" Value="{local:MemberVisibilityBinding}"/>
                    <Style.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="Selector.IsSelectionActive" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{local:ThemeKey DataGridRowForeground}" />
                            <Setter Property="Linq:XDataGridRow.SelectionVisibility" Value="Visible" />
                            <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey DataGridRowForeground}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="Selector.IsSelectionActive" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{local:ThemeKey DataGridRowForeground}" />
                            <Setter Property="Linq:XDataGridRow.SelectionVisibility" Value="Visible" />
                            <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey DataGridRowForeground}" />
                        </MultiTrigger>
                        <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                            <Setter Property="Background" Value="{local:ThemeKey DataGridRowEvenBackground}"/>
                        </Trigger>
                        <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                            <Setter Property="Background" Value="{local:ThemeKey DataGridRowOddBackground}"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XElement.FadeIn" Value="True" />
        <Setter Property="Linq:XElement.FadeOut" Value="True" />
        <Setter Property="Linq:XItemsControl.CanDragSelect" Value="False"/>
        <Setter Property="Linq:XItemsControl.GroupsItself" Value="True"/>
        <Setter Property="Linq:XItemsControl.GroupStyle">
            <Setter.Value>
                <GroupStyle>
                    <GroupStyle.ContainerStyle>
                        <Style TargetType="GroupItem">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type GroupItem}">
                                        <Expander IsExpanded="True"
                                            HorizontalAlignment="Stretch"
                                            Linq:XExpander.HeaderPadding="5,0,0,0">
                                            <Expander.Header>
                                                <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,Auto,*">
                                                    <ContentPresenter Content="{Binding Name}">
                                                        <ContentPresenter.ContentTemplate>
                                                            <DataTemplate>
                                                                <TextBlock x:Name="TextBlock" FontSize="13" 
                                                                    Foreground="{local:ThemeKey AccentLight}"
                                                                    Linq:XTextBlock.SplitText="{Binding}"
                                                                    Linq:XTextBlock.SplitTextMode="StartsWith">
                                                                    <Linq:XTextBlock.SplitTextStyle>
                                                                        <Style TargetType="Run">
                                                                            <Setter Property="Background" Value="{local:ThemeKey Accent}"/>
                                                                            <Setter Property="Foreground" Value="{local:ThemeKey AccentForeground}"/>
                                                                        </Style>
                                                                    </Linq:XTextBlock.SplitTextStyle>
                                                                </TextBlock>
                                                                <DataTemplate.Triggers>
                                                                    <DataTrigger Binding="{Data:Ancestor SearchName, local:MemberGrid}" Value="Category">
                                                                        <Setter TargetName="TextBlock" Property="Linq:XTextBlock.SplitTextKey" Value="{Data:Ancestor Search, local:MemberGrid}" />
                                                                    </DataTrigger>
                                                                    <DataTrigger Binding="{Data:Ancestor SearchName, local:MemberGrid}" Value="Name">
                                                                        <Setter TargetName="TextBlock" Property="Linq:XTextBlock.SplitTextKey" Value="{x:Null}" />
                                                                    </DataTrigger>
                                                                </DataTemplate.Triggers>
                                                            </DataTemplate>
                                                        </ContentPresenter.ContentTemplate>
                                                    </ContentPresenter>
                                                    <TextBlock FontSize="13" Text="{Binding ItemCount, Mode=OneWay, StringFormat= ({0})}"
                                                        Foreground="{local:ThemeKey Text}"
                                                        Margin="1.5,0,0,0"/>
                                                    <local:LineElement
                                                        Margin="5,0,0,0"
                                                        Orientation="Horizontal"/>
                                                </Grid>
                                            </Expander.Header>
                                            <ItemsPresenter/>
                                        </Expander>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </GroupStyle.ContainerStyle>
                    <GroupStyle.Panel>
                        <ItemsPanelTemplate>
                            <DataGridRowsPresenter/>
                        </ItemsPanelTemplate>
                    </GroupStyle.Panel>
                </GroupStyle>
            </Setter.Value>
        </Setter>
        <Setter Property="LoaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:ProgressCircle
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="NameColumnWidth" Value="3*"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="RouteTemplate" Value="{StaticResource {x:Static local:MemberGrid.RouteTemplateKey}}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="SelectionMode" Value="Single"/>
        <Setter Property="ValueColumnHeader" Value="{Markup:Loc Value}"/>
        <Setter Property="ValueColumnWidth" Value="7*"/>
        <Setter Property="ValueTemplate" Value="{StaticResource {x:Static local:MemberGrid.MemberTemplate}}"/>
        <Setter Property="VirtualizingPanel.IsContainerVirtualizable" Value="True"/>
        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True"/>
        <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:EqualBinding Members.ActualSelectedTab, From=Self}" Value="False"/>
                    <Condition Binding="{Data:Bind Members.ActualSelectedTab.Layout, From=Self}" Value="Stretch"/>
                    <Condition Binding="{Data:Bind Orientation, From=Self}" Value="Vertical"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="CellStyle">
                    <Setter.Value>
                        <Style TargetType="DataGridCell" BasedOn="{StaticResource {x:Type DataGridCell}}">
                            <Setter Property="Padding" Value="0"/>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <UniformGrid Rows="{Data:Ancestor Members.Count, local:MemberGrid}"/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Linq:XItemsControl.EmptyTemplate" Value="{StaticResource {x:Static Linq:XItemsControl.EmptyHorizontalTemplateKey}}"/>
                <Setter Property="LoaderTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <local:ProgressCircle Height="20" Width="20"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template" Value="{StaticResource {x:Static local:MemberGrid.HorizontalTemplate}}"/>
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Template" Value="{StaticResource {x:Static local:MemberGrid.VerticalTemplate}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>