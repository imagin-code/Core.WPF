<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Markup="clr-namespace:Imagin.Core.Markup"
    xmlns:Media="clr-namespace:Imagin.Core.Media">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=Control}"/>
        <ResourceDictionary Source="{local:StyleKey Key=FrameworkElement}"/>
        <ResourceDictionary Source="{local:StyleKey Key=ItemsControl}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Separator}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Slider}"/>
    </ResourceDictionary.MergedDictionaries>
    
    <Style x:Key="{x:Type Menu}" TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{local:ThemeKey Key=Menu.Background}" />
        <Setter Property="Foreground" Value="{local:ThemeKey Key=Menu.Foreground}" />
    </Style>

    <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type ItemsControl}}">
        <Setter Property="Background" Value="{local:ThemeKey ActualKey=MenuItemBackground}"/>
        <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=MenuItemBorder}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontFamily" Value="{x:Static SystemFonts.MenuFontFamily}"/>
        <Setter Property="FontSize" Value="{x:Static SystemFonts.MenuFontSize}"/>
        <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=MenuItemForeground}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Linq:XItemsControl.EmptyTemplateVisibility" Value="Visible"/>
        <Setter Property="Linq:XMenuItem.InputGestureTextTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Opacity="0.5" Text="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=MenuItemForeground}" />
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Padding" Value="9,5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="PART_Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        SnapsToDevicePixels="True">
                        <Grid x:Name="PART_Grid">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" x:Name="Col0"/>
                                <ColumnDefinition Width="*"    x:Name="Col1"
                                    SharedSizeGroup="MenuItemHeaderColumnGroup"/>
                                <ColumnDefinition Width="Auto" x:Name="Col2"
                                    SharedSizeGroup="MenuItemGestureColumnGroup"/>
                                <ColumnDefinition Width="Auto" x:Name="Col3" />
                            </Grid.ColumnDefinitions>
                            
                            <Grid x:Name="PART_IconGrid"
                                SnapsToDevicePixels="True"
                                Visibility="{Data:TemplatedParent Path=(Linq:XMenuItem.IconVisibility)}">
                                <local:FillElement x:Name="PART_IconBackground" Fill="#0A000000"/>
                                <local:ImageElement x:Name="PART_IconDot"
                                    HorizontalAlignment="Center"
                                    Source="{Markup:InternalImage Dot.png}"
                                    SourceSize="14,14"
                                    VerticalAlignment="Center"
                                    Visibility="Collapsed"/>
                                <ContentPresenter x:Name="PART_IconTemplate"
                                    Content="{TemplateBinding Icon}"
                                    ContentTemplate="{Data:TemplatedParent Path=(Linq:XMenuItem.IconTemplate)}"
                                    ContentTemplateSelector="{Data:TemplatedParent Path=(Linq:XMenuItem.IconTemplateSelector)}"
                                    SnapsToDevicePixels="True"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                            <ContentPresenter x:Name="PART_Header" Grid.Column="1" 
                                ContentSource="Header"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                TextBlock.Foreground="{TemplateBinding Foreground}"
                                Margin="{TemplateBinding Padding}" 
                                RecognizesAccessKey="True"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentPresenter x:Name="PART_InputGesture" Grid.Column="2"
                                Content="{TemplateBinding InputGestureText}"
                                ContentTemplate="{Data:TemplatedParent Path=(Linq:XMenuItem.InputGestureTextTemplate)}"
                                Margin="3,0"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Grid x:Name="PART_Arrow" Grid.Column="3" 
                                Margin="3,0,5,0"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <local:RotateElement
                                    Rotate="{Data:TemplatedParent IsSubmenuOpen}"
                                    Rotation="90,0">
                                    <Path Data="{x:Static Media:Geometry.TriangleRight}"
                                        Fill="{TemplateBinding Foreground}"
                                        HorizontalAlignment="Right"
                                        VerticalAlignment="Center"/>
                                </local:RotateElement>
                            </Grid>
                            
                            <Popup x:Name="PART_Submenu" 
                                AllowsTransparency="True"
                                Focusable="False" 
                                HorizontalOffset="-1" 
                                IsOpen="{Data:TemplatedParent IsSubmenuOpen}"
                                Placement="Right"
                                PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" >
                                <local:PopupBorder x:Name="PART_SubmenuBorder" 
                                    SnapsToDevicePixels="True">
                                    <ScrollViewer x:Name="SubMenu"
                                        Grid.IsSharedSizeScope="True">
                                        <Grid>
                                            <local:EmptyPresenter/>
                                            <StackPanel 
                                                IsItemsHost="True"
                                                KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                        </Grid>
                                    </ScrollViewer>
                                </local:PopupBorder>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True"/>
                                <Condition Property="IsHighlighted" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_IconGrid" Property="Background" Value="{local:ThemeKey ActualKey=MenuItemCheckedMouseOverBulletBackground}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Icon" Value="{x:Null}" />
                                <Condition Property="IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_IconDot" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                        <!-- ... -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="PART_IconGrid" Property="Background" Value="{local:ThemeKey ActualKey=MenuItemCheckedBulletBackground}" />
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                            <Setter TargetName="PART_Submenu" Property="PopupAnimation" Value="None" />
                        </Trigger>
                        <!-- ... -->
                        <Trigger Property="Linq:XMenuItem.IconTemplate" Value="{x:Null}">
                            <Setter TargetName="PART_IconTemplate" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <local:ImageElement 
                                            HorizontalAlignment="Center"  
                                            Source="{Binding}"
                                            VerticalAlignment="Center"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="Linq:XMenuItem.IconVisibility" Value="Collapsed">
                            <Setter TargetName="Col0" Property="MinWidth" Value="0" />
                            <Setter TargetName="Col0" Property="SharedSizeGroup" Value="{x:Null}" />
                        </Trigger>
                        <Trigger Property="Linq:XMenuItem.IconVisibility" Value="Visible">
                            <Setter TargetName="Col0" Property="MinWidth" Value="50" />
                            <Setter TargetName="Col0" Property="SharedSizeGroup" Value="MenuItemIconColumnGroup" />
                        </Trigger>
                        <!-- ... -->
                        <!--<Trigger Property="InputGestureText" Value="{x:Null}">
                            <Setter TargetName="PART_InputGesture" Property="Visibility" Value="Collapsed" />
                        </Trigger>-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HorizontalContentAlignment" Value="Stretch"/>
                                <Condition Property="InputGestureText" Value=""/>
                                <Condition Property="Role" Value="SubmenuItem"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Col1" Property="SharedSizeGroup" Value="{x:Null}" />
                            <Setter TargetName="Col2" Property="Width" Value="0" />
                            <Setter TargetName="Col3" Property="Width" Value="0" />
                            <Setter Property="Padding" Value="5"/>
                        </MultiTrigger>
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter TargetName="PART_Arrow" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter TargetName="Col0" 
                                Property="MinWidth" Value="0" />
                            <Setter TargetName="Col3" 
                                Property="Width" Value="Auto" />
                            <Setter TargetName="PART_Arrow" 
                                Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_IconBackground"
                                Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_IconTemplate" 
                                Property="Margin" Value="2,0,0,0" />
                            <Setter TargetName="PART_IconTemplate" 
                                Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_InputGesture" 
                                Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_Submenu" 
                                Property="Placement" Value="Bottom" />
                            <Setter TargetName="PART_SubmenuBorder" 
                                Property="BorderThickness" Value="1" />
                        </Trigger>
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter TargetName="Col0"
                                Property="MinWidth" Value="0" />
                            <Setter TargetName="Col3"
                                Property="Width" Value="Auto" />
                            <Setter TargetName="PART_Arrow"
                                Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_IconBackground"
                                Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_IconTemplate" 
                                Property="Margin" Value="2,0,0,0" />
                            <Setter TargetName="PART_IconTemplate"
                                Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_InputGesture" 
                                Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Style.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Linq:XMenuItem.IconTemplate" Value="{Markup:EmptyTemplate}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{x:Static Linq:XElement.DisabledOpacity}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="DockPanel.Dock" Value="Top" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="DockPanel.Dock" Value="Top" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Margin" Value="0,0,5,0" />
                <Setter Property="Padding" Value="10,2" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Margin" Value="0,0,5,0" />
                <Setter Property="Padding" Value="10,4" />
            </Trigger>
            <!-- ... -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="Role" Value="TopLevelHeader" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=MenuItemTopLevelHeaderMouseOverBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=MenuItemTopLevelHeaderMouseOverBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=MenuItemTopLevelHeaderMouseOverForeground}" />
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=MenuItemTopLevelHeaderMouseOverForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="Role" Value="TopLevelItem" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=MenuItemTopLevelHeaderMouseOverBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=MenuItemTopLevelHeaderMouseOverBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=MenuItemTopLevelHeaderMouseOverForeground}" />
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=MenuItemTopLevelHeaderMouseOverForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSubmenuOpen" Value="True" />
                    <Condition Property="Role" Value="TopLevelHeader" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=MenuItemTopLevelHeaderPressedBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=MenuItemTopLevelHeaderPressedBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=MenuItemTopLevelHeaderPressedForeground}" />
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=MenuItemTopLevelHeaderPressedForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="Role" Value="TopLevelItem" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=MenuItemTopLevelHeaderPressedBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=MenuItemTopLevelHeaderPressedBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=MenuItemTopLevelHeaderPressedForeground}" />
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=MenuItemTopLevelHeaderPressedForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="Role" Value="SubmenuHeader" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=MenuItemSubmenuHeaderPressedBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=MenuItemSubmenuHeaderPressedBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=MenuItemSubmenuHeaderPressedForeground}" />
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=MenuItemSubmenuHeaderPressedForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="Role" Value="SubmenuHeader" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=MenuItemSubmenuHeaderMouseOverBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=MenuItemSubmenuHeaderMouseOverBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=MenuItemSubmenuHeaderMouseOverForeground}" />
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=MenuItemSubmenuHeaderMouseOverForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="False" />
                    <Condition Property="Role" Value="SubmenuHeader" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=MenuItemSubmenuHeaderBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=MenuItemSubmenuHeaderBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=MenuItemSubmenuHeaderForeground}" />
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=MenuItemSubmenuHeaderForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="Role" Value="SubmenuItem" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=MenuItemSubmenuItemPressedBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=MenuItemSubmenuItemPressedBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=MenuItemSubmenuItemPressedForeground}" />
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=MenuItemSubmenuItemPressedForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="Role" Value="SubmenuItem" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=MenuItemSubmenuItemMouseOverBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=MenuItemSubmenuItemMouseOverBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=MenuItemSubmenuItemMouseOverForeground}" />
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=MenuItemSubmenuItemMouseOverForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="False" />
                    <Condition Property="Role" Value="SubmenuItem" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=MenuItemSubmenuItemBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=MenuItemSubmenuItemBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=MenuItemSubmenuItemForeground}" />
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=MenuItemSubmenuItemForeground}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}" BasedOn="{StaticResource {x:Type Separator}}">
        <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=MenuItemForeground}" />
        <Setter Property="IsEnabled" Value="True" />
        <Setter Property="IsHitTestVisible" Value="True" />
        <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=MenuItemForeground}" />
        <Setter Property="Padding" Value="10,3" />
    </Style>

    <!-- ... -->

    <Style x:Key="{x:Type local:EnumMenuItem}" TargetType="{x:Type local:EnumMenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}"/>

    <Style x:Key="{x:Type local:FlagMenuItem}" TargetType="{x:Type local:FlagMenuItem}" BasedOn="{StaticResource {x:Type local:EnumMenuItem}}"/>

    <Style x:Key="{x:Type local:SliderMenuItem}" TargetType="{x:Type local:SliderMenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
        <Setter Property="SliderStyle">
            <Setter.Value>
                <Style TargetType="{x:Type Slider}" BasedOn="{StaticResource {x:Type Slider}}"/>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>