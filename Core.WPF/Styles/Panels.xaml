<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:l="http://wpflocalizeextension.codeplex.com"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Analytics="clr-namespace:Imagin.Core.Analytics;assembly=Imagin.Core"
    xmlns:Core="clr-namespace:Imagin.Core;assembly=Imagin.Core"
    xmlns:Conversion="clr-namespace:Imagin.Core.Conversion"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Effects="clr-namespace:Imagin.Core.Effects"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Markup="clr-namespace:Imagin.Core.Markup"
    xmlns:Media="clr-namespace:Imagin.Core.Media"
    xmlns:Models="clr-namespace:Imagin.Core.Models"
    xmlns:Numerics="clr-namespace:Imagin.Core.Numerics;assembly=Imagin.Core"
    xmlns:Validation="clr-namespace:Imagin.Core.Validation">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=Color}"/>
        <ResourceDictionary Source="{local:StyleKey Key=DataGrid}"/>
        <ResourceDictionary Source="{local:StyleKey Key=TreeView}"/>
    </ResourceDictionary.MergedDictionaries>

    <!-- Color -->
    
    <DataTemplate DataType="{x:Type local:ColorAnalysisPanel}">
        <DataGrid
            AutoGenerateColumns="True"
            BorderThickness="0"
            CanUserAddRows="False"
            CanUserDeleteRows="True"
            CanUserReorderColumns="True"
            CanUserResizeColumns="True"
            CanUserResizeRows="False"
            CanUserSortColumns="True"
            Linq:XDataGrid.DisplayRowNumber="True"
            Linq:XDataGrid.DisplayRowNumberBullet="NumberParenthesis"
            Linq:XDataGrid.DisplayRowNumberOffset="1"
            ScrollViewer.VerticalScrollBarVisibility="Auto"
            VirtualizingPanel.IsVirtualizing="False"
            VirtualizingPanel.VirtualizationMode="Standard"
            ItemsSource="{Binding Results}"/>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type local:ColorChromacityPanel}">
        <local:MemberGrid Source="{Binding}"
            BorderThickness="0"
            GroupName="None"
            HeaderVisibility="Collapsed"/>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type local:ColorDifferencePanel}">
        <local:MemberGrid Source="{Binding}"
            BorderThickness="0"
            GroupName="Category"
            HeaderVisibility="Collapsed"/>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type local:ColorHarmonyPanel}">
        <local:ViewControl Panel="{Binding}" Source="{Binding Colors}"
            DetailName="Hue, Saturation, Brightness">
            <local:ViewControl.DetailTemplate>
                <DataTemplate>
                    <TextBlock>
                        H = <Run Text="{Data:Bind Convert=Conversion:HueConverter, Way=1}"/>, S = <Run Text="{Data:Bind Convert=Conversion:SaturationConverter, Way=1}"/>, B = <Run Text="{Data:Bind Convert=Conversion:BrightnessConverter, Way=1}"/>
                    </TextBlock>
                </DataTemplate>
            </local:ViewControl.DetailTemplate>
            <local:ViewControl.ItemTemplate>
                <DataTemplate>
                    <Border BorderBrush="Black" BorderThickness="1" SnapsToDevicePixels="True">
                        <Button Background="{Data:Bind Convert={x:Type Conversion:ColorToSolidColorBrushConverter}}" 
                            BorderBrush="White" BorderThickness="1"
                            Command="{Data:PanelBinding PickCommand, local:ColorHarmonyPanel}"
                            CommandParameter="{Binding}"
                            Linq:XToolTip.Header="{Binding}"
                            Linq:XToolTip.HeaderTemplate="{StaticResource {x:Static Linq:XColor.ToolTipHeaderTemplateKey}}"
                            Linq:XElement.ToolTipTemplate="{StaticResource {x:Static Linq:XColor.ToolTipTemplateKey}}"
                            Padding="0"
                            SnapsToDevicePixels="True"
                            ToolTip="{Binding}"/>
                    </Border>
                </DataTemplate>
            </local:ViewControl.ItemTemplate>
        </local:ViewControl>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:ColorIlluminantsPanel}">
        <local:GroupControl Panel="{Binding}"
            DetailName="{Binding View}">
            <local:GroupControl.ItemTemplate>
                <DataTemplate>
                    <Viewbox>
                        <Grid>
                            <local:ProgressRing 
                                Foreground="Transparent"
                                Maximum="12000" 
                                Minimum="2000" 
                                Radius="36"
                                Value="{Data:Bind Mode=OneWay, Convert={x:Type Conversion:ChromacityToKelvinConverter}}">
                                <Linq:XProgressBar.ContentTemplate>
                                    <DataTemplate>
                                        <TextBlock Foreground="{local:ThemeKey Text}"><Run Text="{Data:Bind Convert={x:Type Conversion:DoubleToStringConverter}, ConverterParameter=N0, Mode=OneWay}"/> K</TextBlock>
                                    </DataTemplate>
                                </Linq:XProgressBar.ContentTemplate>
                            </local:ProgressRing>
                            <Border Background="White" Height="72" Width="72">
                                <Border.Effect>
                                    <Effects:GradientOverlayEffect Angle="270" Minimum="2000" Maximum="12000" Value="{Data:Bind Convert={x:Type Conversion:ChromacityToKelvinConverter}}" Thickness="0.17" Type="Angle">
                                        <Effects:GradientOverlayEffect.Gradient>
                                            <Media:Gradient>
                                                <Media:GradientStep ActualColor="#ff1c00" Offset="0"/>
                                                <Media:GradientStep ActualColor="#FFF" Offset="0.5"/>
                                                <Media:GradientStep ActualColor="#bbd0ff" Offset="1"/>
                                            </Media:Gradient>
                                        </Effects:GradientOverlayEffect.Gradient>
                                    </Effects:GradientOverlayEffect>
                                </Border.Effect>
                            </Border>
                        </Grid>
                    </Viewbox>
                </DataTemplate>
            </local:GroupControl.ItemTemplate>
        </local:GroupControl>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type local:ColorMatricesPanel}">
        <local:GroupControl Panel="{Binding}"
            DetailName="{Binding View}">
            <local:GroupControl.ItemTemplate>
                <DataTemplate>
                    <Viewbox>
                        <local:MatrixControl Matrix="{Binding}"
                            IsEditable="False"
                            LabelVisibility="Visible"
                            Zoom="256"/>
                    </Viewbox>
                </DataTemplate>
            </local:GroupControl.ItemTemplate>
        </local:GroupControl>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type local:ColorProfilesPanel}">
        <local:GroupControl Panel="{Binding}"
            DetailName="{Binding View}">
            <local:GroupControl.ItemTemplate>
                <DataTemplate>
                    <Viewbox>
                        <Grid>
                            <local:ProgressRing Linq:XProgressBar.ContentTemplate="{Markup:EmptyTemplate}"
                                BackgroundStroke="Transparent"
                                Foreground="#900"
                                Maximum="1" Minimum="0"
                                Radius="28" StrokeThickness="4"
                                Value="{Binding Primary.R.X, Mode=OneWay}"/>
                            <local:ProgressRing Linq:XProgressBar.ContentTemplate="{Markup:EmptyTemplate}"
                                BackgroundStroke="Transparent"
                                Foreground="#090"
                                Maximum="1" Minimum="0" 
                                Radius="32" StrokeThickness="4"
                                Value="{Binding Primary.G.X, Mode=OneWay}"/>
                            <local:ProgressRing Linq:XProgressBar.ContentTemplate="{Markup:EmptyTemplate}"
                                BackgroundStroke="Transparent"
                                Foreground="#009"
                                Maximum="1" Minimum="0" 
                                Radius="36" StrokeThickness="4"
                                Value="{Binding Primary.B.X, Mode=OneWay}"/>

                            <local:ProgressRing Linq:XProgressBar.ContentTemplate="{Markup:EmptyTemplate}"
                                BackgroundStroke="Transparent"
                                Foreground="#AADD0000"
                                Maximum="1" Minimum="0" 
                                Radius="28" StrokeThickness="4"
                                Value="{Binding Primary.R.Y, Mode=OneWay}"/>
                            <local:ProgressRing Linq:XProgressBar.ContentTemplate="{Markup:EmptyTemplate}"
                                BackgroundStroke="Transparent"
                                Foreground="#AA33DD00"
                                Maximum="1" Minimum="0" 
                                Radius="32" StrokeThickness="4"
                                Value="{Binding Primary.G.Y, Mode=OneWay}"/>
                            <local:ProgressRing Linq:XProgressBar.ContentTemplate="{Markup:EmptyTemplate}"
                                BackgroundStroke="Transparent"
                                Foreground="#AA0055DD"
                                Maximum="1" Minimum="0" 
                                Radius="36" StrokeThickness="4"
                                Value="{Binding Primary.B.Y, Mode=OneWay}"/>
                        </Grid>
                    </Viewbox>
                </DataTemplate>
            </local:GroupControl.ItemTemplate>
        </local:GroupControl>
    </DataTemplate>
    
    <!-- General -->

    <DataTemplate x:Key="{x:Static Models:AddressPanel.TemplateKey}">
        <local:AddressBox Linq:XExplorer.Path="{Binding Path, Mode=TwoWay}"
            Margin="5"
            RefreshCommand="{Binding RefreshCommand}"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Models:ClipboardPanel.TemplateKey}">
        <DataGrid
            BorderThickness="0"
            CanUserAddRows="False"
            CanUserDeleteRows="True"
            CanUserReorderColumns="True"
            CanUserResizeColumns="True"
            CanUserResizeRows="False"
            CanUserSortColumns="True"
            Linq:XDataGrid.DisplayRowNumber="True"
            Linq:XDataGrid.DisplayRowNumberBullet="{Binding Bullet}"
            Linq:XDataGrid.DisplayRowNumberOffset="1"
            Linq:XItemsControl.EnableColumnMenu="True"
            ScrollViewer.VerticalScrollBarVisibility="Auto"
            ItemsSource="{x:Static Core:Copy.Data}">
            <DataGrid.Columns>
                <DataGridTextColumn Header="{Markup:Loc Type}" Binding="{Binding Type.Name}"
                    SortMemberPath="Type"
                    Width="*"/>
                <DataGridTemplateColumn Header="{Markup:Loc Value}"
                    SortMemberPath="Value"
                    Width="*">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Value}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
            <DataGrid.ItemContainerStyle>
                <Style TargetType="DataGridRow" BasedOn="{StaticResource {x:Type DataGridRow}}">
                    <Setter Property="ContextMenu">
                        <Setter.Value>
                            <ContextMenu DataContext="{Data:Self PlacementTarget.DataContext}">
                                <MenuItem Header="{Markup:Loc Delete}"
                                    Command="{Data:PanelBinding DeleteCommand, Models:ClipboardPanel}"
                                    CommandParameter="{Binding}"
                                    Icon="{Markup:SmallImage Image=Trash}"/>
                            </ContextMenu>
                        </Setter.Value>
                    </Setter>
                </Style>
            </DataGrid.ItemContainerStyle>
        </DataGrid>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Models:ColorsPanel.TemplateKey}">
        <local:GroupControl Panel="{Binding}"
            ItemToolTipHeaderIconTemplate="{Markup:EmptyTemplate}">
            <local:GroupControl.Resources>
                <Data:Reference x:Key="ColorsPanel" Data="{Binding}"/>
            </local:GroupControl.Resources>
            <local:GroupControl.ItemToolTipTemplate>
                <DataTemplate>
                    <ContentPresenter Content="{Data:Bind Value, Convert={x:Type Conversion:ByteVector4ToColorConverter}}" ContentTemplate="{StaticResource {x:Static Linq:XColor.ToolTipTemplateKey}}"/>
                </DataTemplate>
            </local:GroupControl.ItemToolTipTemplate>
            <local:GroupControl.ItemToolTipHeaderTemplate>
                <DataTemplate>
                    <ContentPresenter Content="{Data:Bind Value, Convert=Conversion:ByteVector4ToColorConverter}" ContentTemplate="{StaticResource {x:Static Linq:XColor.ToolTipHeaderTemplateKey}}"/>
                </DataTemplate>
            </local:GroupControl.ItemToolTipHeaderTemplate>
            <local:GroupControl.ItemTemplate>
                <DataTemplate DataType="Numerics:ByteVector4">
                    <Button Background="{Data:Bind Convert={x:Type Conversion:ByteVector4ToSolidColorBrushConverter}}"
                        BorderThickness="0"
                        Command="{Binding Data.SelectColorCommand, Source={StaticResource ColorsPanel}}"
                        CommandParameter="{Binding}"/>
                </DataTemplate>
            </local:GroupControl.ItemTemplate>
        </local:GroupControl>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Models:CopyPanel.TemplateKey}">
        <DataTemplate.Resources>
            <DataTemplate x:Key="Template.Column.Enable">
                <local:SwitchButton IsChecked="{Binding Enable, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
            </DataTemplate>
            <DataTemplate x:Key="Template.Column.LastActive">
                <TextBlock 
                    Foreground="{Data:Ancestor Foreground, {x:Type DataGridRow}}"
                    Text="{Data:Bind LastActive, Convert=Conversion:RelativeTimeConverter}"
                    ToolTip="{Binding LastActive}"/>
            </DataTemplate>
            <DataTemplate x:Key="Template.Column.Progress">
                <ProgressBar x:Name="ProgressBar"
                    Height="18"
                    Maximum="1"
                    Minimum="0"
                    ToolTip="{Data:Bind Progress, Convert=Conversion:PercentConverter, StringFormat='{}{0:n2}%'}"
                    Value="{Binding Progress}">
                    <Linq:XProgressBar.ContentTemplate>
                        <DataTemplate>
                            <TextBlock FontSize="11" Foreground="{local:ThemeKey Key=Text}" Text="{Data:Bind Convert=Conversion:PercentConverter, StringFormat='{}{0:n2}%'}"/>
                        </DataTemplate>
                    </Linq:XProgressBar.ContentTemplate>
                </ProgressBar>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding Status}" Value="Inactive">
                        <Setter TargetName="ProgressBar" Property="Linq:XProgressBar.ContentTemplate" Value="{Markup:EmptyTemplate}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Status}" Value="Monitoring">
                        <Setter TargetName="ProgressBar" Property="Linq:XProgressBar.ContentTemplate" Value="{Markup:EmptyTemplate}"/>
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
            <DataTemplate x:Key="Template.Column.RemoveAll">
                <local:ImageButton
                    Command="{Data:PanelBinding RemoveAllCommand, {x:Type Models:CopyPanel}}"
                    Source="{Markup:SmallImage Image=MinusRound}"
                    ToolTip="{Markup:Loc RemoveAll}"/>
            </DataTemplate>
            <DataTemplate x:Key="Template.Column.Remove">
                <local:ImageButton
                    Command="{Data:PanelBinding RemoveCommand, {x:Type Models:CopyPanel}}"
                    CommandParameter="{Binding}"
                    Source="{Markup:SmallImage Image=Minus}"
                    ToolTip="{Markup:Loc Remove}"/>
            </DataTemplate>
            <DataTemplate x:Key="Template.Column.Status">
                <Grid HorizontalAlignment="Center" Linq:XGrid.Columns="Auto,Auto">
                    <Ellipse Grid.Column="0" x:Name="Ellipse" Height="8" Width="8" VerticalAlignment="Center"/>
                    <local:ProgressCircle 
                        Grid.Column="2"
                        x:Name="ProgressCircle"
                        EllipseDiameterScale="1"
                        Foreground="{Data:Ancestor Foreground, {x:Type DataGridRow}}"
                        Height="16"
                        Margin="5,0,0,0"
                        Visibility="Collapsed"
                        Width="16"/>
                </Grid>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Data:Bind Queue.Count, Convert=Conversion:IntToBooleanConverter}" Value="True">
                        <Setter TargetName="ProgressCircle" Property="Visibility" Value="Visible"/>
                        <Setter TargetName="Ellipse" Property="Fill" Value="#FFE0B24E"/>
                        <Setter TargetName="Ellipse" Property="ToolTip" Value="Active"/>
                    </DataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Data:Bind Queue.Count, Convert=Conversion:IntToBooleanConverter}" Value="False"/>
                            <Condition Binding="{Binding Status}" Value="Inactive"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="Ellipse" Property="Fill" Value="#FFE04E4E"/>
                        <Setter TargetName="Ellipse" Property="ToolTip" Value="Inactive"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Data:Bind Queue.Count, Convert=Conversion:IntToBooleanConverter}" Value="False"/>
                            <Condition Binding="{Binding Status}" Value="Active"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="Ellipse" Property="Fill" Value="#FFE0B24E"/>
                        <Setter TargetName="Ellipse" Property="ToolTip" Value="Active"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Data:Bind Queue.Count, Convert=Conversion:IntToBooleanConverter}" Value="False"/>
                            <Condition Binding="{Binding Status}" Value="Monitoring"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="Ellipse" Property="Fill" Value="#FF5DBF6A"/>
                        <Setter TargetName="Ellipse" Property="ToolTip" Value="Monitoring"/>
                    </MultiDataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <ContextMenu x:Key="MainTaskMenu" x:Shared="False">
                <MenuItem Header="Add"
                    Command="{Data:PanelBinding AddCommand, {x:Type Models:CopyPanel}}"
                    Icon="{Markup:SmallImage Image=Plus}"/>
                <Separator/>
                <MenuItem Header="Remove"
                    Command="{Data:PanelBinding RemoveCommand, {x:Type Models:CopyPanel}}"
                    Icon="{Markup:SmallImage Image=Minus}"/>
                <MenuItem Header="Remove all"
                    Command="{Data:PanelBinding RemoveAllCommand, {x:Type Models:CopyPanel}}"
                    Icon="{Markup:SmallImage Image=MinusRound}"/>
                <Separator/>
                <MenuItem Header="Enable"
                    Command="{Data:PanelBinding EnableCommand, {x:Type Models:CopyPanel}}"
                    Icon="{Markup:SmallImage Image=Play}"/>
                <MenuItem Header="Enable all"
                    Command="{Data:PanelBinding EnableAllCommand, {x:Type Models:CopyPanel}}"
                    Icon="{Markup:SmallImage Image=PlayRound}"/>
                <Separator/>
                <MenuItem Header="Disable"
                    Command="{Data:PanelBinding DisableCommand, {x:Type Models:CopyPanel}}"
                    Icon="{Markup:SmallImage Image=Stop}"/>
                <MenuItem Header="Disable all"
                    Command="{Data:PanelBinding DisableAllCommand, {x:Type Models:CopyPanel}}"
                    Icon="{Markup:SmallImage Image=StopRound}"/>
            </ContextMenu>
            <ContextMenu x:Key="TaskMenu" x:Shared="False">
                <MenuItem Header="Enable"
                    Command="{Data:PanelBinding EnableCommand, {x:Type Models:CopyPanel}}"
                    Icon="{Markup:SmallImage Image=Play}"/>
                <MenuItem Header="Disable"
                    Command="{Data:PanelBinding DisableCommand, {x:Type Models:CopyPanel}}"
                    Icon="{Markup:SmallImage Image=Stop}"/>
                <Separator/>
                <MenuItem Header="Remove"
                    Command="{Data:PanelBinding RemoveCommand, {x:Type Models:CopyPanel}}"
                    Icon="{Markup:SmallImage Image=Minus}"/>
            </ContextMenu>
        </DataTemplate.Resources>
        <DataGrid
            BorderThickness="0"
            CanUserResizeColumns="True"
            CanUserReorderColumns="True"
            CanUserSortColumns="True"
            Linq:XDataGrid.DisplayRowNumber="True"
            Linq:XDataGrid.DisplayRowNumberBullet="{Binding Bullet}"
            Linq:XDataGrid.DisplayRowNumberOffset="1"
            Linq:XElement.Reference="{Binding}"
            Linq:XElement.ReferenceKey="{x:Static Models:DataPanel.DataGridReferenceKey}"
            Linq:XItemsControl.ColumnVisibility="{Binding Columns}"
            Linq:XItemsControl.EnableColumnMenu="True"
            Linq:XItemsControl.GroupDirection="{Binding GroupDirection}"
            Linq:XItemsControl.GroupName="{Binding GroupName}"
            Linq:XItemsControl.SortDirection="{Binding SortDirection}"
            Linq:XItemsControl.SortName="{Binding SortName}"
            HeadersVisibility="All"
            ItemsSource="{Binding Data}"
            HorizontalScrollBarVisibility="Auto"
            SelectedItem="{Binding SelectedItem, Mode=TwoWay}"
            SelectionMode="Single"
            VerticalScrollBarVisibility="Auto">
            <DataGrid.Columns>
                <DataGridTemplateColumn Header="{Markup:Loc Status}" Width="Auto"
                    CellTemplate="{StaticResource Template.Column.Status}"
                    SortMemberPath="Status"/>
                <DataGridTemplateColumn Header="{Markup:Loc Enable}" Width="Auto"
                    CellTemplate="{StaticResource Template.Column.Enable}"
                    SortMemberPath="Enable"/>
                <DataGridTemplateColumn Header="{Markup:Loc Action}" Width="108"
                    SortMemberPath="Action">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock ToolTip="{Data:Self Text}">
                                <TextBlock.Text>
                                    <Data:MultiBind Convert="Conversion:ToStringMultiConverter">
                                        <Binding Path="Action"/>
                                        <Binding Path="Action.Target"/>
                                        <Binding Path="Action.Type"/>
                                    </Data:MultiBind>
                                </TextBlock.Text>
                            </TextBlock>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="{Markup:Loc Direction}" Width="Auto"
                    SortMemberPath="Direction">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <ComboBox 
                                ItemsSource="{Markup:Enumerate {x:Type Models:CopyDirection}}"
                                SelectedItem="{Binding Direction, Mode=TwoWay}" 
                                ToolTip="{Binding DirectionDescription}">
                                <Linq:XComboBox.SelectedItemTemplate>
                                    <DataTemplate>
                                        <local:ImageElement x:Name="ImageElement"/>
                                        <DataTemplate.Triggers>
                                            <DataTrigger Binding="{Binding}" Value="Left">
                                                <Setter TargetName="ImageElement" Property="Source" Value="{Markup:SmallImage Image=ArrowPrevious}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding}" Value="Right">
                                                <Setter TargetName="ImageElement" Property="Source" Value="{Markup:SmallImage Image=ArrowNext}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding}" Value="Both">
                                                <Setter TargetName="ImageElement" Property="Source" Value="{Markup:SmallImage Image=ArrowBoth}"/>
                                            </DataTrigger>
                                        </DataTemplate.Triggers>
                                    </DataTemplate>
                                </Linq:XComboBox.SelectedItemTemplate>
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <StackPanel Orientation="Horizontal">
                                            <local:ImageElement x:Name="ImageElement" Margin="0,0,5,0"/>
                                            <TextBlock Text="{Binding}"/>
                                        </StackPanel>
                                        <DataTemplate.Triggers>
                                            <DataTrigger Binding="{Binding}" Value="Left">
                                                <Setter TargetName="ImageElement" Property="Source" Value="{Markup:SmallImage Image=ArrowPrevious}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding}" Value="Right">
                                                <Setter TargetName="ImageElement" Property="Source" Value="{Markup:SmallImage Image=ArrowNext}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding}" Value="Both">
                                                <Setter TargetName="ImageElement" Property="Source" Value="{Markup:SmallImage Image=ArrowBoth}"/>
                                            </DataTrigger>
                                        </DataTemplate.Triggers>
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                            </ComboBox>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="{Markup:Loc Source}" Width="*"
                    SortMemberPath="Source">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <local:PathBox x:Name="PathBox"
                                BorderThickness="0"
                                BrowseButtonVisibility="True"
                                BrowseMode="OpenFolder"
                                BrowseTitle="Source"
                                CanBrowse="True"
                                CanValidate="True"
                                Foreground="{Data:Ancestor Foreground, {x:Type DataGridRow}}"
                                Linq:XTextBox.CanLabel="True"
                                Linq:XTextBox.IsEditable="False"
                                Linq:XTextBox.Label="{Data:Bind Source, Convert=Conversion:FileNameConverter, ConverterParameter=1}"
                                Linq:XTextBoxBase.Placeholder="{Markup:Loc Source}"
                                IconVisibility="Visible"
                                Padding="5,0">
                                <local:PathBox.Text>
                                    <Binding Path="Source"
                                        Mode="TwoWay"
                                        UpdateSourceTrigger="LostFocus"
                                        ValidatesOnNotifyDataErrors="True"
                                        ValidatesOnDataErrors="True"
                                        NotifyOnValidationError="True">
                                        <Binding.ValidationRules>
                                            <Validation:FolderExistsRule ValidatesOnTargetUpdated="True" />
                                        </Binding.ValidationRules>
                                    </Binding>
                                </local:PathBox.Text>
                            </local:PathBox>
                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{Data:Bind Source, Convert=Conversion:StringToBooleanConverter}" Value="True">
                                    <Setter TargetName="PathBox" Property="ToolTip" Value="{Binding Source}"/>
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="{Markup:Loc Target}" Width="*"
                    SortMemberPath="Target">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <local:PathBox x:Name="PathBox"
                                BorderThickness="0"
                                BrowseButtonVisibility="True"
                                BrowseMode="OpenFolder"
                                BrowseTitle="Target"
                                CanBrowse="True"
                                CanValidate="True"
                                Foreground="{Data:Ancestor Foreground, {x:Type DataGridRow}}"
                                Linq:XTextBox.CanLabel="True"
                                Linq:XTextBox.IsEditable="False"
                                Linq:XTextBox.Label="{Data:Bind Target, Convert=Conversion:FileNameConverter, ConverterParameter=1}"
                                Linq:XTextBoxBase.Placeholder="{Markup:Loc Target}"
                                IconVisibility="Visible"
                                Padding="5,0"
                                ValidateHandler="{Binding TargetValidator}">
                                <local:PathBox.Text>
                                    <Binding Path="Target"
                                        Mode="TwoWay"
                                        UpdateSourceTrigger="LostFocus"
                                        ValidatesOnNotifyDataErrors="True"
                                        ValidatesOnDataErrors="True"
                                        NotifyOnValidationError="True">
                                        <Binding.ValidationRules>
                                            <Validation:FolderExistsRule ValidatesOnTargetUpdated="True" />
                                        </Binding.ValidationRules>
                                    </Binding>
                                </local:PathBox.Text>
                            </local:PathBox>
                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{Data:Bind Target, Convert=Conversion:StringToBooleanConverter}" Value="True">
                                    <Setter TargetName="PathBox" Property="ToolTip" Value="{Binding Target}"/>
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="{Markup:Loc Progress}" Width="150"
                    CellTemplate="{StaticResource Template.Column.Progress}"
                    SortMemberPath="Progress"/>
                <DataGridTemplateColumn Header="{Markup:Loc LastActive}" Width="150"
                    CellTemplate="{StaticResource Template.Column.LastActive}"
                    SortMemberPath="LastActive"/>
                <DataGridTemplateColumn Header="{Markup:Loc Size}" Width="Auto"
                    SortMemberPath="Size">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Grid>
                                <local:ProgressCircle x:Name="ProgressCircle"
                                    Height="20" Width="20"
                                    HorizontalAlignment="Center"/>
                                <TextBlock x:Name="TextBlock"
                                    Text="{Data:Bind Size, Convert=Conversion:FileSizeConverter}"
                                    ToolTip="{Data:Self Text}"/>
                            </Grid>
                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{Binding AnalyzeTask.Started}" Value="True">
                                    <Setter TargetName="ProgressCircle" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="TextBlock" Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding AnalyzeTask.Started}" Value="False">
                                    <Setter TargetName="ProgressCircle" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="TextBlock" Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn CellTemplate="{StaticResource Template.Column.Remove}" HeaderTemplate="{StaticResource Template.Column.RemoveAll}" Width="32"/>
            </DataGrid.Columns>
            <DataGrid.ItemContainerStyle>
                <Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource {x:Type DataGridRow}}">
                    <Setter Property="ContextMenu" Value="{StaticResource TaskMenu}"/>
                </Style>
            </DataGrid.ItemContainerStyle>
            <Linq:XItemsControl.GroupStyle>
                <GroupStyle ContainerStyle="{StaticResource {x:Type GroupItem}}">
                    <GroupStyle.Panel>
                        <ItemsPanelTemplate>
                            <DataGridRowsPresenter/>
                        </ItemsPanelTemplate>
                    </GroupStyle.Panel>
                </GroupStyle>
            </Linq:XItemsControl.GroupStyle>
        </DataGrid>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Models:ExplorePanel.TemplateKey}">
        <local:Explorer 
            BorderThickness="0"
            FileOpenedCommand="{Binding OpenedFileCommand}"
            History="{Binding Options.History, Mode=OneWay}"
            Linq:XExplorer.Path="{Binding Options.Path, Mode=TwoWay}"
            Options="{Binding Options}"/>
    </DataTemplate>
    
    <DataTemplate x:Key="{x:Static Models:FindPanel.TemplateKey}">
        <ScrollViewer
            HorizontalScrollBarVisibility="Hidden"
            VerticalScrollBarVisibility="Auto">
            <local:FindControl
                FindText="{Data:TwoWay FindText}"
                Linq:XElement.Reference="{Binding}"
                Linq:XElement.ReferenceKey="{x:Static Models:FindPanel.ControlKey}"
                MatchCase="{Data:TwoWay MatchCase}"
                MatchWord="{Data:TwoWay MatchWord}"
                ReplaceText="{Data:TwoWay ReplaceText}"
                ResultsCommand="{Binding ResultsCommand}"
                Source="{Data:TwoWay Source}"/>
        </ScrollViewer>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Models:FindResultsPanel.TemplateKey}">
        <DataGrid
            BorderThickness="0"
            CanUserAddRows="False"
            CanUserDeleteRows="True"
            CanUserReorderColumns="True"
            CanUserResizeColumns="True"
            CanUserResizeRows="False"
            CanUserSortColumns="True"
            Linq:XDataGrid.DisplayRowNumber="True"
            Linq:XDataGrid.DisplayRowNumberBullet="{Binding Bullet}"
            Linq:XDataGrid.DisplayRowNumberOffset="1"
            Linq:XElement.Reference="{Binding}"
            Linq:XElement.ReferenceKey="{x:Static Models:DataPanel.DataGridReferenceKey}"
            Linq:XItemsControl.EnableColumnMenu="True"
            Linq:XItemsControl.GroupName="File"
            Linq:XItemsControl.GroupStyle="{DynamicResource {x:Static Linq:XItemsControl.DefaultGroupStyleKey}}"
            Linq:XItemsControl.ColumnVisibility="{Binding Columns}"
            Linq:XItemsControl.GroupDirection="{Binding GroupDirection}"
            Linq:XItemsControl.SortDirection="{Binding SortDirection}"
            Linq:XItemsControl.SortName="{Binding SortName}"
            ScrollViewer.VerticalScrollBarVisibility="Auto"
            ItemsSource="{Binding Results}">
            <DataGrid.Resources>
                <Data:Reference x:Key="FindResultsPanel" Data="{Binding}"/>
            </DataGrid.Resources>
            <DataGrid.Columns>
                <DataGridTemplateColumn Header="{Markup:Loc Text}"
                    SortMemberPath="Text"
                    Width="*">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock
                                Linq:XTextBlock.SplitText="{Binding Text}"
                                Linq:XTextBlock.SplitTextKey="{Binding Data.Results.FindText, Source={StaticResource FindResultsPanel}}"
                                TextTrimming="CharacterEllipsis"
                                TextWrapping="{Data:Bind Data.TextWrap, Convert={x:Type Conversion:TextWrappingConverter}, Source={StaticResource FindResultsPanel}}">
                                <Linq:XTextBlock.SplitTextStyle>
                                    <Style TargetType="Run">
                                        <Setter Property="Background" Value="DarkOrange"/>
                                        <Setter Property="Foreground" Value="#333"/>
                                    </Style>
                                </Linq:XTextBlock.SplitTextStyle>
                            </TextBlock>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="{Markup:Loc Document}"
                    SortMemberPath="Target.Path"
                    Width="Auto">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock
                                Text="{Data:Bind Target.Path, Convert=Conversion:FileNameConverter, ConverterParameter=1}"
                                TextTrimming="CharacterEllipsis"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="{Markup:Loc Line}"
                    SortMemberPath="Line"
                    Width="Auto">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock 
                                Text="{Binding Line}"
                                TextTrimming="CharacterEllipsis"
                                ToolTip="{Data:Self Text}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="{Markup:Loc Column}"
                    SortMemberPath="Column"
                    Width="Auto">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock 
                                Text="{Binding Column}"
                                TextTrimming="CharacterEllipsis"
                                ToolTip="{Data:Self Text}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
            <DataGrid.ItemContainerStyle>
                <Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource {x:Type DataGridRow}}">
                    <Setter Property="Linq:XDataGridRow.DoubleClickCommand" Value="{Binding Data.OpenResultCommand, Source={StaticResource FindResultsPanel}}"/>
                    <Setter Property="Linq:XDataGridRow.DoubleClickCommandParameter" Value="{Binding}"/>
                    <Setter Property="Visibility">
                        <Setter.Value>
                            <Data:MultiBind Converter="{x:Static Models:FindResultsPanel.VisibilityConverter}" Mode="OneWay">
                                <Binding Source="{StaticResource FindResultsPanel}"/>
                                <Binding/>
                                <Binding Path="Data.FilterSource" 
                                    Source="{StaticResource FindResultsPanel}"/>
                                <Binding Path="Data.Search" 
                                    Source="{StaticResource FindResultsPanel}"/>
                            </Data:MultiBind>
                        </Setter.Value>
                    </Setter>
                </Style>
            </DataGrid.ItemContainerStyle>
        </DataGrid>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Models:InspectPanel.TemplateKey}">
        <local:SplitGrid IsCollapsed="True" Orientation="Vertical">
            <local:SplitGrid.Resources>
                <Data:Reference x:Key="Panel" Data="{Binding}"/>
            </local:SplitGrid.Resources>
            <local:SplitGrid.Panel1>
                <TreeView BorderThickness="0" DataContext="{Binding Data, Source={StaticResource Panel}}" ItemsSource="{Binding Source}">
                    <TreeView.ItemContainerStyle>
                        <Style TargetType="TreeViewItem" BasedOn="{StaticResource {x:Type TreeViewItem}}">
                            <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <Setter Property="Visibility">
                                <Setter.Value>
                                    <Data:MultiBind Convert="Models:InspectPanelVisibilityConverter">
                                        <Binding/>
                                        <Binding Path="Types" Source="{StaticResource Panel}"/>
                                    </Data:MultiBind>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </TreeView.ItemContainerStyle>
                    <TreeView.ItemTemplate>
                        <HierarchicalDataTemplate DataType="{x:Type Models:ElementViewModel}" ItemsSource="{Binding Items}">
                            <TextBlock Text="{Binding Name}"/>
                        </HierarchicalDataTemplate>
                    </TreeView.ItemTemplate>
                </TreeView>
            </local:SplitGrid.Panel1>
            <local:SplitGrid.Panel2>
                <local:MemberGrid DataContext="{Binding Data, Source={StaticResource Panel}}" Source="{Binding SelectedItem}"/>
            </local:SplitGrid.Panel2>
        </local:SplitGrid>
    </DataTemplate>

    <!-- /// -->

    <Style x:Key="{x:Static Models:LogPanel.TextStyleKey}" TargetType="Run">
        <Setter Property="Background" Value="{local:ThemeKey Accent}"/>
        <Setter Property="Foreground" Value="{local:ThemeKey AccentForeground}"/>
    </Style>

    <DataTemplate x:Key="{x:Static Models:LogPanel.ImageTemplateKey}">
        <local:ImageElement x:Name="Image"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Result.Type}" Value="Error">
                <Setter TargetName="Image" Property="Foreground" Value="{local:ThemeKey Red}"/>
                <Setter TargetName="Image" Property="Source" Value="{Markup:SmallImage XRound.png}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Result.Type}" Value="Message">
                <Setter TargetName="Image" Property="Foreground" Value="{local:ThemeKey Blue}"/>
                <Setter TargetName="Image" Property="Source" Value="{Markup:SmallImage Message.png}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Result.Type}" Value="Success">
                <Setter TargetName="Image" Property="Foreground" Value="{local:ThemeKey Green}"/>
                <Setter TargetName="Image" Property="Source" Value="{Markup:SmallImage CheckmarkRound.png}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Result.Type}" Value="Warning">
                <Setter TargetName="Image" Property="Foreground" Value="{local:ThemeKey Orange}"/>
                <Setter TargetName="Image" Property="Source" Value="{Markup:SmallImage Warning.png}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Models:LogPanel.MessageTemplateKey}">
        <TextBlock
            Linq:XTextBlock.SplitText="{Binding Text}"
            Linq:XTextBlock.SplitTextKey="{Data:Bind GlobalSource=MainViewModel, Path=LogPanel.Search}"
            Linq:XTextBlock.SplitTextMode="StartsWith"
            Linq:XTextBlock.SplitTextStyle="{StaticResource {x:Static Models:LogPanel.TextStyleKey}}"
            TextTrimming="CharacterEllipsis"
            TextWrapping="{Data:Bind GlobalSource=MainViewModel, Path=LogPanel.TextWrap, Convert={x:Type Conversion:TextWrappingConverter}}"
            ToolTip="{Data:Self Text}"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Models:LogPanel.ResultTemplateKey}">
        <ContentPresenter x:Name="Content" Content="{Binding}"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Type}" Value="Error">
                <Setter TargetName="Content" Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate DataType="Analytics:Result">
                            <local:ErrorControl Error="{Data:Bind ConvertFrom={x:Type Analytics:Result}, ConvertTo={x:Type Analytics:Error}}"
                                IsExpanded="True"
                                Wrap="{Data:Bind GlobalSource=MainViewModel, Path=LogPanel.TextWrap, Convert={x:Type Conversion:TextWrappingConverter}}">
                                <local:ErrorControl.ContentTemplate>
                                    <DataTemplate>
                                        <TextBlock
                                            Linq:XTextBlock.SplitText="{Binding Text}"
                                            Linq:XTextBlock.SplitTextKey="{Data:Bind GlobalSource=MainViewModel, Path=LogPanel.Search}"
                                            Linq:XTextBlock.SplitTextMode="StartsWith"
                                            Linq:XTextBlock.SplitTextStyle="{StaticResource {x:Static Models:LogPanel.TextStyleKey}}"
                                            TextTrimming="CharacterEllipsis"
                                            TextWrapping="{Data:Bind GlobalSource=MainViewModel, Path=LogPanel.TextWrap, Convert={x:Type Conversion:TextWrappingConverter}}"
                                            ToolTip="{Data:Self Text}"/>
                                    </DataTemplate>
                                </local:ErrorControl.ContentTemplate>
                            </local:ErrorControl>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Message">
                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource {x:Static Models:LogPanel.MessageTemplateKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Success">
                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource {x:Static Models:LogPanel.MessageTemplateKey}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Warning">
                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource {x:Static Models:LogPanel.MessageTemplateKey}}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Models:LogPanel.ToolTipKey}">
        <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,Auto,Auto" Linq:XPanel.Spacing="0,0,5,0" Linq:XPanel.SpacingExcept="Last">
            <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource {x:Static Models:LogPanel.ImageTemplateKey}}" VerticalAlignment="Top"/>
            <ContentPresenter Content="{Binding Result}" ContentTemplate="{StaticResource {x:Static Models:LogPanel.ResultTemplateKey}}" VerticalAlignment="Top"/>
            <TextBlock Opacity="0.5" Text="{Binding Added, StringFormat=h:mm tt}" VerticalAlignment="Top"/>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Models:LogPanel.TemplateKey}">
        <ContentPresenter Content="{Binding}">
            <ContentPresenter.Resources>
                <Data:Reference x:Key="LogPanel" Data="{Binding}"/>

                <DataTemplate x:Key="DefaultTemplate" DataType="{x:Type Models:LogPanel}">
                    <RichTextBox
                        AcceptsReturn="True"
                        BorderThickness="0"
                        HorizontalAlignment="Stretch"
                        IsReadOnly="True"
                        Linq:XElement.Wheel="True"
                        Linq:XElement.WheelIncrement="0.01"
                        Linq:XElement.WheelMaximum="5"
                        Linq:XElement.WheelMinimum="0.1"
                        Linq:XElement.WheelValue="{Data:Options FontScale, Mode=TwoWay}"
                        Linq:XTextBoxBase.ScrollToEnd="True"
                        Linq:XTextBoxBase.TextTrimming="None"
                        Linq:XRichTextBox.Lines="{Binding Data}"
                        ScrollViewer.HorizontalScrollBarVisibility="Auto"
                        ScrollViewer.VerticalScrollBarVisibility="Auto"
                        VerticalAlignment="Stretch"
                        VerticalContentAlignment="Top">
                        <Linq:XRichTextBox.LineTemplate>
                            <DataTemplate DataType="{x:Type Analytics:LogEntry}">
                                <Grid Linq:XGrid.Columns="Auto,*,Auto" Linq:XGrid.AutoColumns="True" Linq:XPanel.Spacing="0,0,5,0" Linq:XPanel.SpacingExcept="Last">
                                    <Label x:Name="Label" Content="{Binding Result.Type}" Foreground="White" Padding="3" VerticalAlignment="Top"/>
                                    <ContentPresenter Content="{Binding Result}" ContentTemplate="{StaticResource {x:Static Models:LogPanel.ResultTemplateKey}}" VerticalAlignment="Top"
                                        Linq:XElement.ToolTipTemplate="{StaticResource {x:Static Models:LogPanel.ToolTipKey}}"
                                        ToolTip="{Binding}"/>
                                    <TextBlock Opacity="0.5" Text="{Binding Added, StringFormat=h:mm tt}" VerticalAlignment="Top"/>
                                </Grid>
                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding Result.Type}" Value="Error">
                                        <Setter TargetName="Label" Property="Background" Value="{local:ThemeKey Red}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Result.Type}" Value="Message">
                                        <Setter TargetName="Label" Property="Background" Value="{local:ThemeKey Blue}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Result.Type}" Value="Success">
                                        <Setter TargetName="Label" Property="Background" Value="{local:ThemeKey Green}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Result.Type}" Value="Warning">
                                        <Setter TargetName="Label" Property="Background" Value="{local:ThemeKey Orange}"/>
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </Linq:XRichTextBox.LineTemplate>
                    </RichTextBox>
                </DataTemplate>

                <DataTemplate x:Key="DetailsTemplate" DataType="{x:Type Models:LogPanel}">
                    <DataGrid
                        BorderThickness="0"
                        CanUserAddRows="False"
                        CanUserDeleteRows="True"
                        CanUserReorderColumns="True"
                        CanUserResizeColumns="True"
                        CanUserResizeRows="False"
                        CanUserSortColumns="True"
                        Linq:XDataGrid.DisplayRowNumber="True"
                        Linq:XDataGrid.DisplayRowNumberBullet="{Binding Bullet}"
                        Linq:XDataGrid.DisplayRowNumberOffset="1"
                        Linq:XElement.Reference="{Binding}"
                        Linq:XElement.ReferenceKey="{x:Static Models:DataPanel.DataGridReferenceKey}"
                        Linq:XElement.Wheel="True"
                        Linq:XElement.WheelIncrement="0.01"
                        Linq:XElement.WheelMaximum="5"
                        Linq:XElement.WheelMinimum="0.1"
                        Linq:XElement.WheelValue="{Data:Options FontScale, Mode=TwoWay}"
                        Linq:XItemsControl.EnableColumnMenu="True"
                        Linq:XItemsControl.ColumnVisibility="{Binding Columns}"
                        Linq:XItemsControl.GroupDirection="{Binding GroupDirection}"
                        Linq:XItemsControl.GroupName="{Binding GroupName}"
                        Linq:XItemsControl.GroupStyle="{DynamicResource {x:Static Linq:XItemsControl.DefaultGroupStyleKey}}"
                        Linq:XItemsControl.SortDirection="{Binding SortDirection}"
                        Linq:XItemsControl.SortName="{Binding SortName}"
                        ScrollViewer.VerticalScrollBarVisibility="Auto"
                        VirtualizingPanel.IsVirtualizing="False"
                        VirtualizingPanel.VirtualizationMode="Standard"
                        ItemsSource="{Binding Data}">
                        <DataGrid.Columns>
                            <DataGridTemplateColumn Header="{Markup:Loc Type}"
                                CellTemplate="{StaticResource {x:Static Models:LogPanel.ImageTemplateKey}}"
                                SortMemberPath="Type"
                                Width="Auto"/>
                            <DataGridTemplateColumn Header="{Markup:Loc Message}"
                                SortMemberPath="Result.Text"
                                Width="*">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <ContentPresenter Content="{Binding Result}" ContentTemplate="{StaticResource {x:Static Models:LogPanel.ResultTemplateKey}}"/>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn Header="{Markup:Loc Line}"
                                SortMemberPath="Line"
                                Width="Auto">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock 
                                            Text="{Binding Line}"
                                            TextTrimming="CharacterEllipsis"
                                            ToolTip="{Data:Self Text}"
                                            VerticalAlignment="Top"/>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn Header="{Markup:Loc Sender}"
                                SortMemberPath="Sender"
                                Width="Auto">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock 
                                            Text="{Binding Sender}"
                                            TextTrimming="CharacterEllipsis"
                                            ToolTip="{Data:Self Text}"
                                            VerticalAlignment="Top"/>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn Header="{Markup:Loc Member}"
                                SortMemberPath="Member"
                                Width="Auto">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock 
                                            Text="{Binding Member}"
                                            TextTrimming="CharacterEllipsis"
                                            ToolTip="{Data:Self Text}"
                                            VerticalAlignment="Top"/>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn Header="{Markup:Loc Level}"
                                SortMemberPath="Level"
                                Width="Auto">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock 
                                            Text="{Binding Level}"
                                            TextTrimming="CharacterEllipsis"
                                            ToolTip="{Data:Self Text}"
                                            VerticalAlignment="Top"/>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn Header="{Markup:Loc Time}"
                                SortMemberPath="Added"
                                Width="Auto">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock 
                                            Text="{Binding Added, StringFormat=h:mm tt}"
                                            TextTrimming="CharacterEllipsis"
                                            ToolTip="{Data:Self Text}"
                                            VerticalAlignment="Top"/>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                        </DataGrid.Columns>
                        <DataGrid.ItemContainerStyle>
                            <Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource {x:Type DataGridRow}}">
                                <Setter Property="ContextMenu">
                                    <Setter.Value>
                                        <ContextMenu DataContext="{Data:Self PlacementTarget.DataContext}">
                                            <MenuItem Header="{Markup:Loc Cut}"
                                                Command="{Binding Data.CutSingleCommand, Source={StaticResource LogPanel}}"
                                                CommandParameter="{Binding}"
                                                Icon="{Markup:SmallImage Cut.png}"/>
                                            <MenuItem Header="{Markup:Loc Copy}"
                                                Command="{Binding Data.CopySingleCommand, Source={StaticResource LogPanel}}"
                                                CommandParameter="{Binding}"
                                                Icon="{Markup:SmallImage Copy.png}"/>
                                            <Separator/>
                                            <MenuItem Header="{Markup:Loc Remove}"
                                                Command="{Binding Data.RemoveCommand, Source={StaticResource LogPanel}}"
                                                CommandParameter="{Binding}"
                                                Icon="{Markup:SmallImage XRound.png}"/>
                                        </ContextMenu>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Linq:XElement.ToolTipTemplate" Value="{StaticResource {x:Static Models:LogPanel.ToolTipKey}}"/>
                                <Setter Property="ToolTip" Value="{Binding}"/>
                                <Setter Property="Visibility">
                                    <Setter.Value>
                                        <Data:MultiBind Converter="{x:Static Models:LogPanel.VisibilityConverter}" Mode="OneWay">
                                            <Binding/>
                                            <Binding Path="Data.Filter" 
                                                Source="{StaticResource LogPanel}"/>
                                            <Binding Path="Data.FilterLevel" 
                                                Source="{StaticResource LogPanel}"/>
                                            <Binding Path="Data.Search" 
                                                Source="{StaticResource LogPanel}"/>
                                        </Data:MultiBind>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </DataGrid.ItemContainerStyle>
                    </DataGrid>
                </DataTemplate>
            </ContentPresenter.Resources>
            <ContentPresenter.ContentTemplate>
                <DataTemplate DataType="Models:LogPanel">
                    <ContentPresenter x:Name="Content" Content="{Binding}">
                        <ContentPresenter.ContextMenu>
                            <ContextMenu DataContext="{Data:Self PlacementTarget.DataContext}">
                                <MenuItem Header="{Markup:Loc Cut}"
                                    Command="{Binding CutCommand}"
                                    Icon="{Markup:SmallImage Cut.png}"/>
                                <MenuItem Header="{Markup:Loc Copy}"
                                    Command="{Binding CopyCommand}"
                                    Icon="{Markup:SmallImage Copy.png}"/>
                                <Separator/>
                                <MenuItem Header="{Markup:Loc Clear}"
                                    Command="{Binding ClearCommand}"
                                    Icon="{Markup:SmallImage XRound.png}"/>
                            </ContextMenu>
                        </ContentPresenter.ContextMenu>
                    </ContentPresenter>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding View}" Value="Details">
                            <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource DetailsTemplate}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding View}" Value="Default">
                            <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource DefaultTemplate}"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </ContentPresenter.ContentTemplate>
        </ContentPresenter>
    </DataTemplate>

    <!-- /// -->

    <DataTemplate x:Key="{x:Static Models:MousePanel.TemplateKey}">
        <local:MemberGrid Source="{Binding}"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Models:NotificationsPanel.TemplateKey}">
        <ItemsControl
            ItemsSource="{Binding Data}"
            Linq:XItemsControl.EmptyTemplateVisibility="Visible">
            <ItemsControl.Resources>
                <Data:Reference x:Key="NotificationsPanel" Data="{Binding}"/>
            </ItemsControl.Resources>
            <ItemsControl.ItemContainerStyle>
                <Style TargetType="ContentPresenter">
                    <Setter Property="Linq:XElement.FadeIn" Value="True"/>
                    <Setter Property="Linq:XElement.FadeOut" Value="True"/>
                </Style>
            </ItemsControl.ItemContainerStyle>
            <ItemsControl.ItemTemplate>
                <DataTemplate DataType="Analytics:Notification">
                    <local:BottomBorder>
                        <local:SwipeButton
                            BorderThickness="0"
                            Content="{Binding}"
                            Left="{Markup:SmallImage Image=Unread}"
                            LeftSwipeCommand="{Binding MarkCommand}"
                            LeftSwipeCommandParameter="{Binding}"
                            Right="{Markup:SmallImage Image=Trash}"
                            RightSwipeCommand="{Binding Data.RemoveCommand, Source={StaticResource NotificationsPanel}}"
                            RightSwipeCommandParameter="{Binding}"
                            SwipeDirection="Horizontal"
                            SwipeMode="Default">
                            <local:SwipeButton.ContentTemplate>
                                <DataTemplate DataType="Analytics:Notification">
                                    <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,Auto,*">
                                        <local:FillElement x:Name="FillElement"
                                            Width="5"/>
                                        <local:ImageElement x:Name="ImageElement"
                                            Margin="10,0,0,0"
                                            VerticalAlignment="Center"/>
                                        <StackPanel
                                            Linq:XPanel.Spacing="0,0,0,5"
                                            Linq:XPanel.SpacingExcept="Last"
                                            Margin="10">
                                            <TextBlock 
                                                FontWeight="Bold" 
                                                Text="{Binding Title}"
                                                TextTrimming="CharacterEllipsis"
                                                TextWrapping="{Data:Bind Data.TextWrap, Convert={x:Type Conversion:TextWrappingConverter}, Source={StaticResource NotificationsPanel}}"/>
                                            <TextBlock 
                                                Opacity="0.5" 
                                                Text="{Binding Result.Text}"
                                                TextWrapping="{Data:Bind Data.TextWrap, Convert={x:Type Conversion:TextWrappingConverter}, Source={StaticResource NotificationsPanel}}"/>
                                            <local:AccentLabel HorizontalAlignment="Left">
                                                <TextBlock FontStyle="Italic" Opacity="0.8" Text="{Data:Bind Created, Convert=Conversion:RelativeTimeConverter}"/>
                                            </local:AccentLabel>
                                        </StackPanel>
                                    </Grid>
                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding IsRead}" Value="True">
                                            <Setter TargetName="FillElement" Property="Fill" Value="#11000000"/>
                                        </DataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsRead}" Value="False"/>
                                                <Condition Binding="{Binding Result.Type}" Value="Error"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="FillElement" Property="Fill" Value="{local:ThemeKey Red}"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsRead}" Value="False"/>
                                                <Condition Binding="{Binding Result.Type}" Value="Message"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="FillElement" Property="Fill" Value="{local:ThemeKey Blue}"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsRead}" Value="False"/>
                                                <Condition Binding="{Binding Result.Type}" Value="Success"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="FillElement" Property="Fill" Value="{local:ThemeKey Green}"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsRead}" Value="False"/>
                                                <Condition Binding="{Binding Result.Type}" Value="Warning"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="FillElement" Property="Fill" Value="{local:ThemeKey Orange}"/>
                                        </MultiDataTrigger>
                                        <DataTrigger Binding="{Binding Result.Type}" Value="Error">
                                            <Setter TargetName="ImageElement" Property="Foreground" Value="{local:ThemeKey Red}"/>
                                            <Setter TargetName="ImageElement" Property="Source" Value="{Markup:SmallImage XRound.png}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Result.Type}" Value="Message">
                                            <Setter TargetName="ImageElement" Property="Foreground" Value="{local:ThemeKey Blue}"/>
                                            <Setter TargetName="ImageElement" Property="Source" Value="{Markup:SmallImage Message.png}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Result.Type}" Value="Success">
                                            <Setter TargetName="ImageElement" Property="Foreground" Value="{local:ThemeKey Green}"/>
                                            <Setter TargetName="ImageElement" Property="Source" Value="{Markup:SmallImage CheckmarkRound.png}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Result.Type}" Value="Warning">
                                            <Setter TargetName="ImageElement" Property="Foreground" Value="{local:ThemeKey Orange}"/>
                                            <Setter TargetName="ImageElement" Property="Source" Value="{Markup:SmallImage Warning.png}"/>
                                        </DataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </local:SwipeButton.ContentTemplate>
                            <local:SwipeButton.LeftTemplate>
                                <DataTemplate>
                                    <Border Background="#07c">
                                        <local:ImageElement
                                            Foreground="White"
                                            HorizontalAlignment="Left" VerticalAlignment="Center"
                                            Margin="20"
                                            Source="{Binding}"/>
                                    </Border>
                                </DataTemplate>
                            </local:SwipeButton.LeftTemplate>
                            <local:SwipeButton.RightTemplate>
                                <DataTemplate>
                                    <Border Background="#900">
                                        <local:ImageElement
                                            Foreground="White"
                                            HorizontalAlignment="Right" VerticalAlignment="Center"
                                            Margin="20"
                                            Source="{Binding}"/>
                                    </Border>
                                </DataTemplate>
                            </local:SwipeButton.RightTemplate>
                        </local:SwipeButton>
                    </local:BottomBorder>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Models:OptionsPanel.TemplateKey}">
        <local:MemberGrid HeaderVisibility="Collapsed" Source="{Data:Options}"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Models:PropertiesPanel.TemplateKey}">
        <local:MemberGrid DescriptionVisibility="{Data:Bind ShowDescription, Convert=Conversion:BooleanToVisibilityConverter, Way=2}" Source="{Binding Source}"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Models:QueuePanel.TemplateKey}">
        <DataGrid
            BorderThickness="0"
            CanUserReorderColumns="True"
            CanUserSortColumns="True"
            Linq:XDataGrid.DisplayRowNumber="True"
            Linq:XDataGrid.DisplayRowNumberBullet="{Binding Bullet}"
            Linq:XDataGrid.DisplayRowNumberOffset="1"
            Linq:XElement.Reference="{Binding}"
            Linq:XElement.ReferenceKey="{x:Static Models:DataPanel.DataGridReferenceKey}"
            Linq:XItemsControl.ColumnVisibility="{Binding Columns}"
            Linq:XItemsControl.EnableColumnMenu="True"
            Linq:XItemsControl.GroupDirection="{Binding GroupDirection}"
            Linq:XItemsControl.GroupName="{Binding GroupName}"
            Linq:XItemsControl.SortDirection="{Binding SortDirection}"
            Linq:XItemsControl.SortName="{Binding SortName}"
            HeadersVisibility="All"
            ItemsSource="{Binding Data}"
            SelectionMode="Single">
            <DataGrid.Columns>
                <DataGridTemplateColumn
                    Header="{Markup:Loc Type}"
                    SortMemberPath="Type"
                    Width="Auto">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock 
                                Foreground="{Data:Ancestor Foreground, {x:Type DataGridRow}}"
                                Text="{Binding ItemType}"
                                TextTrimming="CharacterEllipsis"
                                ToolTip="{Data:Self Text}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn
                    Header="{Markup:Loc Source}"
                    SortMemberPath="Source"
                    Width="*">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock 
                                Foreground="{Data:Ancestor Foreground, {x:Type DataGridRow}}"
                                Text="{Binding Source}"
                                TextTrimming="CharacterEllipsis"
                                ToolTip="{Data:Self Text}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn
                    Header="{Markup:Loc Target}"
                    SortMemberPath="Target"
                    Width="*">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock 
                                Foreground="{Data:Ancestor Foreground, {x:Type DataGridRow}}"
                                Text="{Binding Target}"
                                TextTrimming="CharacterEllipsis"
                                ToolTip="{Data:Self Text}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn
                    Header="{Markup:Loc SizeRead}"
                    SortMemberPath="SizeRead"
                    Width="Auto">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock 
                                Foreground="{Data:Ancestor Foreground, {x:Type DataGridRow}}"
                                Text="{Data:Bind SizeRead, Convert=Conversion:FileSizeConverter}"
                                TextTrimming="CharacterEllipsis"
                                ToolTip="{Data:Self Text}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn
                    Header="{Markup:Loc Size}"
                    SortMemberPath="Size"
                    Width="Auto">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock 
                                Foreground="{Data:Ancestor Foreground, {x:Type DataGridRow}}"
                                Text="{Data:Bind Size, Convert=Conversion:FileSizeConverter}"
                                TextTrimming="CharacterEllipsis"
                                ToolTip="{Data:Self Text}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn
                    Header="{Markup:Loc Speed}"
                    SortMemberPath="Speed"
                    Width="Auto">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock 
                                Foreground="{Data:Ancestor Foreground, {x:Type DataGridRow}}"
                                Text="{Data:Bind Speed, Convert=Conversion:FileSpeedConverter}"
                                TextTrimming="CharacterEllipsis"
                                ToolTip="{Data:Self Text}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn
                    Header="{Markup:Loc Time}"
                    SortMemberPath="Time"
                    Width="Auto">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock 
                                Foreground="{Data:Ancestor Foreground, {x:Type DataGridRow}}"
                                Text="{Binding Duration}"
                                TextTrimming="CharacterEllipsis"
                                ToolTip="{Data:Self Text}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn
                    Header="{Markup:Loc TimeLeft}"
                    SortMemberPath="TimeLeft"
                    Width="Auto">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock 
                                Foreground="{Data:Ancestor Foreground, {x:Type DataGridRow}}"
                                TextTrimming="CharacterEllipsis"
                                ToolTip="{Data:Self Text}">
                                <TextBlock.Text>
                                    <Data:MultiBind Convert="Conversion:TimeLeftMultiConverter">
                                        <Binding Path="Duration"/>
                                        <Binding Path="SizeRead"/>
                                        <Binding Path="Size"/>
                                    </Data:MultiBind>
                                </TextBlock.Text>
                            </TextBlock>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn
                    Header="{Markup:Loc Progress}"
                    SortMemberPath="Progress"
                    Width="*">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <ProgressBar x:Name="ProgressBar"
                                Height="20"
                                Maximum="1"
                                Minimum="0"
                                ToolTip="{Data:Bind Progress, Convert=Conversion:PercentConverter, StringFormat='{}{0:n2}%'}"
                                Value="{Binding Progress}"/>
                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{Binding Status}" Value="Inactive">
                                    <Setter TargetName="ProgressBar" Property="Linq:XProgressBar.ContentTemplate">
                                        <Setter.Value>
                                            <DataTemplate>
                                                <TextBlock Foreground="{local:ThemeKey Key=Text}" Text="Pending"/>
                                            </DataTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Status}" Value="Active">
                                    <Setter TargetName="ProgressBar" Property="Linq:XProgressBar.ContentTemplate">
                                        <Setter.Value>
                                            <DataTemplate>
                                                <TextBlock Foreground="{local:ThemeKey Key=Text}" Text="{Data:Bind Convert=Conversion:PercentConverter, StringFormat='{}{0:n2}%'}"/>
                                            </DataTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
            <DataGrid.RowStyle>
                <Style TargetType="DataGridRow" BasedOn="{StaticResource {x:Type DataGridRow}}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Type}" Value="Create">
                            <Setter Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Type}" Value="Delete">
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Type}" Value="Move">
                            <Setter Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.RowStyle>
        </DataGrid>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Models:RandomPanel.TemplateKey}">
        <TextBox AcceptsReturn="True" HorizontalContentAlignment="Center" IsReadOnly="True" Text="{Binding Text}" TextAlignment="Center" TextWrapping="Wrap" VerticalContentAlignment="Center"
            FontFamily="{Binding FontFamily}"
            FontSize="{Data:Bind FontSize, Way=2}"
            Linq:XElement.Wheel="True"
            Linq:XElement.WheelIncrement="1"
            Linq:XElement.WheelMaximum="72"
            Linq:XElement.WheelMinimum="8"
            Linq:XElement.WheelValue="{Data:Bind FontSize, Way=2}"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Models:RenamePanel.TemplateKey}">
        <local:MemberGrid Source="{Binding}"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Models:ThemePanel.TemplateKey}">
        <local:MemberGrid GroupName="None" Source="{Data:Bind CurrentTheme, GlobalSource=Resources}" View="Single"/>
    </DataTemplate>
</ResourceDictionary>