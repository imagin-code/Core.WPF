<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Markup="clr-namespace:Imagin.Core.Markup">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=ContextMenu}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Menu}"/>
        <ResourceDictionary Source="{local:StyleKey Key=ToggleButton}"/>
    </ResourceDictionary.MergedDictionaries>
    <Style x:Key="{x:Type TabItem}" TargetType="{x:Type TabItem}">
        <Setter Property="Background" Value="{local:ThemeKey ActualKey=TabItemBackground}" />
        <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=TabItemBorder}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=TabItemForeground}" />
        <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=TabItemForeground}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="5,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border x:Name="PART_Border" 
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Margin="0,0,-1,0"
                        Padding="{TemplateBinding Padding}" 
                        SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="PART_Content"
                            ContentSource="Header" 
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=TabItemSelectedBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=TabItemSelectedBorder}" />
                <Setter Property="BorderThickness" Value="1,1,1,0" />
                <Setter Property="Cursor" Value="Arrow" />
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=TabItemSelectedForeground}" />
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=TabItemSelectedForeground}" />
            </Trigger>
            <Trigger Property="IsSelected" Value="False">
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{local:ThemeKey ActualKey=TabItemMouseOverBackground}" />
                <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=TabItemMouseOverBorder}" />
                <Setter Property="Foreground" Value="{local:ThemeKey ActualKey=TabItemMouseOverForeground}" />
                <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey ActualKey=TabItemMouseOverForeground}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="{x:Type TabControl}" TargetType="{x:Type TabControl}">
        <Setter Property="Background" Value="{local:ThemeKey ActualKey=TabControlBackground}"/>
        <Setter Property="BorderBrush" Value="{local:ThemeKey ActualKey=TabControlBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid 
                        Background="{TemplateBinding Background}" 
                        ClipToBounds="True"
                        KeyboardNavigation.TabNavigation="Local"
                        SnapsToDevicePixels="True">
                        <Grid.Resources>
                            <Data:Reference x:Key="TabControl" Data="{Data:TemplatedParent}"/>
                        </Grid.Resources>
                        <!-- ... -->
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0" Width="*" />
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto" />
                            <RowDefinition x:Name="RowDefinition1" Height="*" />
                        </Grid.RowDefinitions>
                        <!-- ... Header -->
                        <local:TabOverflowPanel x:Name="PART_TabOverflowPanel"
                            Orientation="Horizontal"
                            IsItemsHost="True"/>
                        <local:ImageButton x:Name="PART_ImageToggleButton"
                            Grid.Column="1"
                            ButtonSource="{Markup:InternalImage TriangleDown.png}"
                            ButtonVisibility="Visible"
                            IsChecked="{Data:TemplatedParent Path=(Linq:XTabControl.IsOverflowOpen), Mode=TwoWay}">
                            <local:ImageButton.Resources>
                                <CollectionViewSource x:Key="ViewSource" Source="{Data:TemplatedParent ItemsSource}"/>
                            </local:ImageButton.Resources>
                            <local:ImageButton.Menu>
                                <ContextMenu 
                                    ItemsSource="{Binding Source={StaticResource ViewSource}}" 
                                    Style="{StaticResource {x:Type ContextMenu}}">
                                    <ContextMenu.ItemContainerStyle>
                                        <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                            <Setter Property="Command" Value="{Binding Path=Data.(Linq:XTabControl.OverflowItemCommand), Source={StaticResource TabControl}}" />
                                            <Setter Property="CommandParameter" Value="{Binding}" />
                                            <Setter Property="Header" Value="{Binding}" />
                                            <Setter Property="HeaderTemplate" Value="{Binding Path=Data.(Linq:XTabControl.OverflowItemTemplate), Source={StaticResource TabControl}}" />
                                            <Setter Property="Icon" Value="{Binding}" />
                                            <Setter Property="Linq:XMenuItem.IconTemplate" Value="{Binding Path=Data.(Linq:XTabControl.OverflowIconTemplate), Source={StaticResource TabControl}}" />
                                        </Style>
                                    </ContextMenu.ItemContainerStyle>
                                </ContextMenu>
                            </local:ImageButton.Menu>
                        </local:ImageButton>
                        <Border x:Name="PART_Content"
                            Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            KeyboardNavigation.DirectionalNavigation="Contained"
                            KeyboardNavigation.TabIndex="2"
                            KeyboardNavigation.TabNavigation="Local"
                            Visibility="{Data:TemplatedParent Path=(Linq:XTabControl.ContentVisibility)}">
                            <Grid Linq:XElement.Name="{x:Static local:CacheTabControl.ContentKey}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="{TemplateBinding Padding}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <ContentPresenter ContentSource="SelectedContent"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter TargetName="PART_Content" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="PART_ImageToggleButton" Property="Grid.Row" Value="1"/>
                            <Setter TargetName="PART_TabOverflowPanel" Property="Grid.Row" Value="1"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Top">
                            <Setter TargetName="PART_Content" Property="Grid.Row" Value="1"/>
                            <Setter TargetName="PART_ImageToggleButton" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="PART_TabOverflowPanel" Property="Grid.Row" Value="0"/>
                        </Trigger>

                        <DataTrigger Binding="{Binding Path=HasOverflowedChildren, ElementName=PART_TabOverflowPanel}" Value="False">
                            <Setter TargetName="PART_ImageToggleButton" Property="IsEnabled" Value="False"/>
                        </DataTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Linq:XTabControl.ContentVisibility" Value="Visible"/>
                                <Condition Property="TabStripPlacement" Value="Bottom"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="RowDefinition0" Property="Height" Value="*"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Linq:XTabControl.ContentVisibility" Value="Visible"/>
                                <Condition Property="TabStripPlacement" Value="Top"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="RowDefinition1" Property="Height" Value="*"/>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Linq:XTabControl.ContentVisibility" Value="Collapsed"/>
                                <Condition Property="TabStripPlacement" Value="Bottom"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="RowDefinition0" Property="Height" Value="0"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Linq:XTabControl.ContentVisibility" Value="Collapsed"/>
                                <Condition Property="TabStripPlacement" Value="Top"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="RowDefinition1" Property="Height" Value="0"/>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Linq:XTabControl.HeaderVisibility" Value="Visible"/>
                                <Condition Property="TabStripPlacement" Value="Bottom"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="RowDefinition1" Property="Height" Value="Auto"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Linq:XTabControl.HeaderVisibility" Value="Visible"/>
                                <Condition Property="TabStripPlacement" Value="Top"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="RowDefinition0" Property="Height" Value="Auto"/>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Linq:XTabControl.HeaderVisibility" Value="Collapsed"/>
                                <Condition Property="TabStripPlacement" Value="Bottom"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="RowDefinition1" Property="Height" Value="0"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Linq:XTabControl.HeaderVisibility" Value="Collapsed"/>
                                <Condition Property="TabStripPlacement" Value="Top"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="RowDefinition0" Property="Height" Value="0"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
    </Style>

    <Style x:Key="{x:Type local:CacheTabControl}" TargetType="{x:Type local:CacheTabControl}" BasedOn="{StaticResource {x:Type TabControl}}"/>
</ResourceDictionary>