<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:g="urn:gong-wpf-dragdrop"
    xmlns:l="http://wpflocalizeextension.codeplex.com"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Collections="clr-namespace:Imagin.Core.Collections.ObjectModel"
    xmlns:Conversion="clr-namespace:Imagin.Core.Conversion"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Markup="clr-namespace:Imagin.Core.Markup"
    xmlns:Storage="clr-namespace:Imagin.Core.Storage">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=Button}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Control}"/>
        <ResourceDictionary Source="{local:StyleKey Key=FrameworkElement}"/>
        <ResourceDictionary Source="{local:StyleKey Key=ItemsControl}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Menu}"/>
        <ResourceDictionary Source="{local:StyleKey Key=ScrollViewer}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Thumbnail}"/>
    </ResourceDictionary.MergedDictionaries>
    <!-- ... Base -->
    
    <Style x:Key="{x:Type TextBoxBase}" TargetType="{x:Type TextBoxBase}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Background" Value="{local:ThemeKey TextBoxBackground}" />
        <Setter Property="Border.CornerRadius" Value="0.5" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CaretBrush" Value="{local:ThemeKey TextBoxCaret}" />
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu DataContext="{Data:Self PlacementTarget}">
                    <MenuItem 
                        Command="ApplicationCommands.Cut"
                        CommandTarget="{Binding}"
                        Header="{Markup:Loc Cut}"
                        Icon="{Markup:SmallImage Cut.png}"
                        InputGestureText="Ctrl + X"/>
                    <MenuItem 
                        Command="ApplicationCommands.Copy"
                        CommandTarget="{Binding}"
                        Header="{Markup:Loc Copy}"
                        Icon="{Markup:SmallImage Copy.png}"
                        InputGestureText="Ctrl + C"/>
                    <MenuItem
                        Command="ApplicationCommands.Paste"
                        CommandTarget="{Binding}"
                        Header="{Markup:Loc Paste}"
                        Icon="{Markup:SmallImage Paste.png}"
                        InputGestureText="Ctrl + V"/>
                    <Separator/>
                    <MenuItem
                        Command="{x:Static Linq:XTextBoxBase.ClearCommand}"
                        CommandTarget="{Binding}"
                        Header="{Markup:Loc Clear}"
                        Icon="{Markup:SmallImage XRound.png}"/>
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <Setter Property="ContextMenuService.IsEnabled" Value="False"/>
        <Setter Property="FontFamily" Value="{Data:Options FontFamily}"/>
        <Setter Property="FontSize" Value="13" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="IsInactiveSelectionHighlightEnabled" Value="True" />
        <Setter Property="Linq:XTextBoxBase.EnableCopyCommand" Value="False"/>
        <Setter Property="Linq:XTextBoxBase.EnableCutCommand" Value="False"/>
        <Setter Property="Linq:XTextBoxBase.EnablePasteCommand" Value="False"/>
        <Setter Property="Linq:XTextBoxBase.MenuAnimation" Value="Fade" />
        <Setter Property="Linq:XTextBoxBase.MenuHeight" Value="{x:Static Linq:XPopup.Height}" />
        <Setter Property="Linq:XTextBoxBase.MenuPlacement" Value="Bottom" />
        <Setter Property="Linq:XTextBoxBase.MenuTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type Data:Reference}">
                    <Grid Linq:XGrid.AutoRows="True" Linq:XGrid.Rows="Auto,Auto,Auto">
                        <Grid.Resources>
                            <Data:Reference x:Key="TextBoxBase" Data="{Binding Data}"/>
                        </Grid.Resources>
                        <ScrollViewer Linq:XScrollViewer.Overlap="True">
                            <local:MenuItemControl x:Name="ItemsControl" DataContext="{Binding Data}"
                                ItemsSource="{Binding Path=(Linq:XTextBoxBase.SuggestionsFound)}"
                                Linq:XItemsControl.GroupDirection="{Binding Path=(Linq:XTextBoxBase.SuggestionGroupDirection)}"
                                Linq:XItemsControl.GroupName="{Binding Path=(Linq:XTextBoxBase.SuggestionGroupName)}"
                                Linq:XItemsControl.EmptyTemplateVisibility="Visible"
                                Linq:XItemsControl.SortDirection="{Binding Path=(Linq:XTextBoxBase.SuggestionSortDirection)}"
                                Linq:XItemsControl.SortName="{Binding Path=(Linq:XTextBoxBase.SuggestionSortName)}">
                                <Linq:XItemsControl.EmptyTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Markup:Loc NoSuggestions, Suffix=...}"
                                            FontStyle="Italic" Opacity="0.5"/>
                                    </DataTemplate>
                                </Linq:XItemsControl.EmptyTemplate>
                                <local:MenuItemControl.ItemContainerStyle>
                                    <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                        <Setter Property="Command" Value="{x:Static Linq:XTextBoxBase.DefaultSuggestionCommand}"/>
                                        <Setter Property="CommandParameter" Value="{Binding}"/>
                                        <Setter Property="CommandTarget" Value="{Binding Data, Source={StaticResource TextBoxBase}}"/>
                                        <Setter Property="Header" Value="{Binding}"/>
                                        <Setter Property="HeaderTemplate" Value="{Binding Path=Data.(Linq:XTextBoxBase.SuggestionTemplate), Source={StaticResource TextBoxBase}}"/>
                                        <Setter Property="HeaderTemplateSelector" Value="{Binding Path=Data.(Linq:XTextBoxBase.SuggestionTemplateSelector), Source={StaticResource TextBoxBase}}"/>
                                        <Setter Property="Linq:XElement.ToolTipTemplate" Value="{Data:Self HeaderTemplate}"/>
                                        <Setter Property="Linq:XElement.ToolTipTemplateSelector" Value="{Data:Self HeaderTemplateSelector}"/>
                                        <Setter Property="ToolTip" Value="{Data:Self Header}"/>
                                    </Style>
                                </local:MenuItemControl.ItemContainerStyle>
                                <local:MenuItemControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ItemsPanelTemplate>
                                </local:MenuItemControl.ItemsPanel>
                            </local:MenuItemControl>
                        </ScrollViewer>
                        <Separator Margin="5,0"/>
                        <MenuItem 
                            Command="{x:Static Linq:XTextBoxBase.ClearSuggestionsCommand}"
                            CommandTarget="{Binding Data, Source={StaticResource TextBoxBase}}"
                            Header="{Markup:Loc Clear}"
                            Icon="{Markup:SmallImage Image=XRound}"/>
                    </Grid>
                    <DataTemplate.Triggers>
                        <Trigger SourceName="ItemsControl" Property="Linq:XItemsControl.IsEmpty" Value="True">
                            <Setter TargetName="ItemsControl" Property="Margin" Value="{DynamicResource {x:Static local:EmptyPresenter.PopupMarginKey}}"/>
                        </Trigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XTextBoxBase.PlaceholderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock
                        Opacity="0.3"
                        Text="{Binding}"
                        TextTrimming="CharacterEllipsis"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XTextBoxBase.ScrollViewerStyle" Value="{StaticResource {x:Type ScrollViewer}}" />
        <Setter Property="Linq:XTextBoxBase.SuggestionTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock>
                        <TextBlock.Resources>
                            <Data:Reference x:Key="TextBoxBase" Data="{Data:Ancestor {x:Type TextBoxBase}}"/>
                        </TextBlock.Resources>
                        <Run FontWeight="Bold" Text="{Binding Data.Text, Mode=OneWay, Source={StaticResource TextBoxBase}}"/><Run>
                            <Run.Text>
                                <Data:MultiBind Convert="{x:Type Conversion:SubstringMultiConverter}" Mode="OneWay">
                                    <Binding Path="."/>
                                    <Data:Bind Convert="{x:Type Conversion:StringLengthConverter}" Path="Data.Text" Source="{StaticResource TextBoxBase}"/>
                                </Data:MultiBind>
                            </Run.Text>
                        </Run>
                    </TextBlock>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XTextBoxBase.Tab" Value="4" />
        <Setter Property="Linq:XTextBoxBase.TextTrimming" Value="None"/>
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Padding" Value="2.5" />
        <Setter Property="SelectionBrush" Value="{local:ThemeKey TextBoxSelectionInactive}" />
        <Setter Property="SelectionOpacity" Value="0.4" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <Grid Linq:XGrid.Rows="Auto,Auto,Auto" Linq:XGrid.AutoRows="True">
                        <Border BorderBrush="#CC333C" BorderThickness="1" CornerRadius="0.7" Padding="1.5" VerticalAlignment="Top">
                            <AdornedElementPlaceholder x:Name="adorner"/>
                        </Border>
                        <local:ImageElement x:Name="errorTriangle" Foreground="#CC333C" Opacity="0" Panel.ZIndex="999999" Source="{Markup:SmallImage Image=SmallTriangle}"/>
                        <Border x:Name="errorBorder" 
                            Background="#CC333C"
                            CornerRadius="1.5"
                            Opacity="0" 
                            IsHitTestVisible="False"
                            MinHeight="24" 
                            MaxWidth="540"
                            Padding="12,10"
                            Panel.ZIndex="999999">
                            <Border.Effect>
                                <DropShadowEffect  
                                    BlurRadius="4"
                                    Color="{local:ThemeKey PopupDropShadow}" 
                                    Direction="315"
                                    Opacity="0.4"
                                    ShadowDepth="2.25"/>
                            </Border.Effect>
                            <TextBlock Text="{Binding ElementName=adorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}" Foreground="White" TextWrapping="Wrap"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding AdornedElement.IsKeyboardFocused,ElementName=adorner}" Value="True">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard x:Name="fadeInStoryboard">
                                    <Storyboard>
                                        <DoubleAnimation Duration="00:00:00.15"
                                            Storyboard.TargetName="errorBorder"
                                            Storyboard.TargetProperty="Opacity"
                                            To="1"/>
                                        <DoubleAnimation Duration="00:00:00.15"
                                            Storyboard.TargetName="errorTriangle"
                                            Storyboard.TargetProperty="Opacity"
                                            To="1"/>
                                        <ThicknessAnimation Duration="00:00:00.15"
                                            Storyboard.TargetName="errorBorder"
                                            Storyboard.TargetProperty="Margin"
                                            FillBehavior="HoldEnd"
                                            From="1,0,0,0"
                                            To="5,0,0,0">
                                            <ThicknessAnimation.EasingFunction>
                                                <BackEase EasingMode="EaseOut" Amplitude="2"/>
                                            </ThicknessAnimation.EasingFunction>
                                        </ThicknessAnimation>
                                        <ThicknessAnimation Duration="00:00:00.15"
                                            Storyboard.TargetName="errorTriangle"
                                            Storyboard.TargetProperty="Margin"
                                            FillBehavior="HoldEnd"
                                            From="1,0,0,0"
                                            To="5,0,0,0">
                                            <ThicknessAnimation.EasingFunction>
                                                <BackEase EasingMode="EaseOut" Amplitude="2"/>
                                            </ThicknessAnimation.EasingFunction>
                                        </ThicknessAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="fadeInStoryboard"/>
                                <BeginStoryboard x:Name="fadeOutStoryBoard">
                                    <Storyboard>
                                        <DoubleAnimation Duration="00:00:00"
                                            Storyboard.TargetName="errorBorder"
                                            Storyboard.TargetProperty="Opacity"
                                            To="0"/>
                                        <DoubleAnimation Duration="00:00:00"
                                            Storyboard.TargetName="errorTriangle"
                                            Storyboard.TargetProperty="Opacity"
                                            To="0"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>            
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="True"/>
                    <Condition Property="IsKeyboardFocused" Value="True"/>
                    <Condition Property="IsReadOnly" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{local:ThemeKey TextBoxSelection}" />
            </MultiTrigger>
            <Trigger Property="AcceptsReturn" Value="False">
                <Setter Property="Linq:XTextBoxBase.TextTrimming" Value="CharacterEllipsis"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{x:Static Linq:XElement.DisabledOpacity}" />
                <Setter Property="SelectionBrush" Value="{local:ThemeKey TextBoxDisabledSelection}" />
            </Trigger>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="Opacity" Value="{x:Static Linq:XElement.DisabledOpacity}" />
                <Setter Property="SelectionBrush" Value="{local:ThemeKey TextBoxDisabledSelection}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ... TextBox -->

    <Style x:Key="{x:Type TextBox}" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBoxBase}}">
        <Setter Property="AcceptsReturn" Value="False" />
        <Setter Property="AcceptsTab" Value="False" />
        <Setter Property="Linq:XTextBox.ClearButtonTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:ImageButton DataContext="{Data:Ancestor TextBox}"
                        AllowDrop="False"
                        Command="{x:Static Linq:XTextBoxBase.ClearCommand}"
                        CommandTarget="{Binding}"
                        Focusable="False"
                        Source="{Markup:SmallImage XRound.png}"
                        Margin="0,0,5,0"
                        ToolTip="{Markup:Loc Clear}"
                        Visibility="{Data:VisibilityBinding IsEnabled, From=Self}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XTextBox.ClearButtonVisibility" Value="Visible" />
        <Setter Property="Linq:XTextBox.EditButtonTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:ImageButton
                        AllowDrop="False"
                        Command="{x:Static Linq:XTextBox.EditCommand}"
                        CommandTarget="{Data:Ancestor TextBox}"
                        Focusable="False"
                        Source="{Markup:SmallImage Pencil.png}"
                        Margin="5,0,0,0"
                        ToolTip="{Markup:Loc Edit}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XTextBox.EnterButtonSource" Value="{Markup:SmallImage Image=ArrowNext}"/>
        <Setter Property="Linq:XTextBox.EnterButtonTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:ImageButton x:Name="ImageButton"
                        AllowDrop="False"
                        Command="{Binding}"
                        Focusable="False"
                        Margin="0,0,5,0"
                        Source="{Data:Ancestor TextBox, Convert={x:Type Conversion:NullConverter}, Path=(Linq:XTextBox.EnterButtonSource)}"
                        ToolTip="{Markup:Loc Enter}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XTextBox.LabelTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding}" TextTrimming="CharacterEllipsis"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XTextBox.SelectAllOnTripleClick" Value="True" />
        <Setter Property="Linq:XTextBoxBase.TextTrimmingTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock
                        Text="{Binding}"
                        TextTrimming="{Data:Ancestor TextBoxBase, Path=(Linq:XTextBoxBase.TextTrimming)}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XTextBoxBase.SelectAllOnFocus" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Grid.Resources>
                            <Data:Reference x:Key="TextBox" Data="{Data:TemplatedParent}"/>
                        </Grid.Resources>
                        <Border x:Name="PART_Border"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            CornerRadius="{TemplateBinding Border.CornerRadius}">
                            <Grid Linq:XGrid.Columns="Auto,*,Auto,Auto,Auto,Auto">
                                <!-- ... Content (left) -->
                                <ItemsControl Grid.Column="0"
                                    AllowDrop="False"
                                    ItemsSource="{Data:TemplatedParent Path=(Linq:XTextBoxBase.Left)}">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <StackPanel Orientation="Horizontal"/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <ContentControl Content="{Markup:True}" 
                                                ContentTemplate="{Binding}"
                                                VerticalAlignment="Center"/>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>

                                <!-- /// -->
                                
                                <!-- ... Placeholder -->
                                <ContentPresenter Grid.Column="1"
                                    Content="{Data:TemplatedParent Path=(Linq:XTextBoxBase.Placeholder)}" 
                                    ContentTemplate="{Data:TemplatedParent Path=(Linq:XTextBoxBase.PlaceholderTemplate)}"
                                    ContentTemplateSelector="{Data:TemplatedParent Path=(Linq:XTextBoxBase.PlaceholderTemplateSelector)}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    IsHitTestVisible="False"
                                    Margin="{TemplateBinding Padding}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Visibility="{Data:TemplatedParent Path=(Linq:XTextBoxBase.IsEmpty), Convert={x:Type Conversion:BooleanToVisibilityConverter}}"/>
                                <!-- ... Label -->
                                <ContentControl Grid.Column="1"
                                    Content="{Data:TemplatedParent Path=(Linq:XTextBox.Label)}"
                                    ContentTemplate="{Data:TemplatedParent Path=(Linq:XTextBox.LabelTemplate)}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                    IsHitTestVisible="False"
                                    Margin="{TemplateBinding Padding}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Visibility="{Data:TemplatedParent Path=(Linq:XTextBox.IsEditable), Convert={x:Type Conversion:BooleanToVisibilityConverter}, ConverterParameter=1}"/>
                                
                                <!-- ... Text (trim) -->
                                <ContentControl Grid.Column="1"
                                    Content="{TemplateBinding Text}"
                                    ContentTemplate="{Data:TemplatedParent Path=(Linq:XTextBoxBase.TextTrimmingTemplate)}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                    IsHitTestVisible="False"
                                    Margin="{TemplateBinding Padding}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <ContentControl.Visibility>
                                        <Data:MultiBind Convert="{x:Type Conversion:BooleanToVisibilityMultiConverter}">
                                            <Data:TemplatedParent Path="(Linq:XTextBox.IsEditable)"/>
                                            <Data:TemplatedParent Path="(Linq:XTextBoxBase.TextTrimming)" Convert="{x:Type Conversion:ValueNotEqualToParameterConverter}" ConverterParameter="{x:Static TextTrimming.None}"/>
                                            <Data:TemplatedParent Path="IsKeyboardFocused" Convert="{x:Type Conversion:InverseBooleanConverter}"/>
                                        </Data:MultiBind>
                                    </ContentControl.Visibility>
                                </ContentControl>
                                <!-- ... Text -->
                                <ScrollViewer x:Name="PART_ContentHost" Grid.Column="1"
                                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    Padding="{TemplateBinding Padding}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                    Style="{Data:TemplatedParent Path=(Linq:XTextBoxBase.ScrollViewerStyle)}"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <ScrollViewer.Visibility>
                                        <Data:MultiBind Convert="{x:Type Conversion:AandBorCMultiConverter}">
                                            <Data:TemplatedParent Path="(Linq:XTextBox.IsEditable)"/>
                                            <Data:TemplatedParent Path="(Linq:XTextBoxBase.TextTrimming)" Convert="{x:Type Conversion:ValueEqualsParameterConverter}" ConverterParameter="{x:Static TextTrimming.None}"/>
                                            <Data:TemplatedParent Path="IsKeyboardFocused"/>
                                        </Data:MultiBind>
                                    </ScrollViewer.Visibility>
                                </ScrollViewer>

                                <!-- /// -->

                                <!-- ... Content (right) -->
                                <ItemsControl Grid.Column="2"
                                    AllowDrop="False"
                                    ItemsSource="{Data:TemplatedParent Path=(Linq:XTextBoxBase.Right)}">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <StackPanel Orientation="Horizontal"/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <ContentControl Content="{Markup:True}" 
                                                ContentTemplate="{Binding}"
                                                VerticalAlignment="Center"/>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>

                                <!-- ... Buttons -->
                                <ContentControl Grid.Column="3"
                                    AllowDrop="False"
                                    Content="{Markup:True}"
                                    ContentTemplate="{Data:TemplatedParent Path=(Linq:XTextBox.ClearButtonTemplate)}">
                                    <ContentControl.Visibility>
                                        <Data:MultiBind Convert="{x:Type Conversion:BooleanToVisibilityMultiConverter}">
                                            <Data:TemplatedParent Path="(Linq:XTextBox.ClearButtonVisibility)"/>
                                            <Data:TemplatedParent Path="(Linq:XTextBox.IsEditable)"/>
                                        </Data:MultiBind>
                                    </ContentControl.Visibility>
                                </ContentControl>
                                <ContentControl Grid.Column="4"
                                    AllowDrop="False"
                                    Content="{Markup:True}"
                                    ContentTemplate="{Data:TemplatedParent Path=(Linq:XTextBox.EditButtonTemplate)}"
                                    HorizontalAlignment="{Data:TemplatedParent Path=(Linq:XTextBox.EditButtonAlignment)}">
                                    <ContentControl.Visibility>
                                        <Data:MultiBind Convert="{x:Type Conversion:BooleanToVisibilityMultiConverter}">
                                            <Data:TemplatedParent Path="(Linq:XTextBox.EditButtonVisibility)"/>
                                            <Data:TemplatedParent Path="(Linq:XTextBox.IsEditable)" Convert="{x:Type Conversion:InverseBooleanConverter}"/>
                                        </Data:MultiBind>
                                    </ContentControl.Visibility>
                                </ContentControl>
                                <ContentControl Grid.Column="5"
                                    AllowDrop="False"
                                    Content="{Data:TemplatedParent Path=(Linq:XTextBox.EnterCommand)}"
                                    ContentTemplate="{Data:TemplatedParent Path=(Linq:XTextBox.EnterButtonTemplate)}">
                                    <ContentControl.Visibility>
                                        <Data:MultiBind Convert="{x:Type Conversion:BooleanToVisibilityMultiConverter}">
                                            <Data:TemplatedParent Path="(Linq:XTextBox.EnterButtonVisibility)"/>
                                            <Data:TemplatedParent Path="(Linq:XTextBox.IsEditable)"/>
                                        </Data:MultiBind>
                                    </ContentControl.Visibility>
                                </ContentControl>
                            </Grid>
                        </Border>
                        <Popup x:Name="PART_Popup"
                            AllowsTransparency="True"
                            Focusable="False"
                            IsOpen="{Data:TemplatedParent Convert={x:Type Conversion:BooleanToVisibilityConverter}, Mode=TwoWay, Path=(Linq:XTextBoxBase.MenuVisibility)}"
                            Linq:XPopup.CloseOnMouseLeave="True"
                            Placement="{Data:TemplatedParent Path=(Linq:XTextBoxBase.MenuPlacement)}" 
                            PlacementTarget="{Binding ElementName=PART_Border}"
                            PopupAnimation="{Data:TemplatedParent Path=(Linq:XTextBoxBase.MenuAnimation)}"
                            StaysOpen="True">
                            <local:PopupBorder 
                                MaxHeight="{Data:TemplatedParent Path=(Linq:XTextBoxBase.MenuHeight).Maximum}"
                                MinHeight="{Data:TemplatedParent Path=(Linq:XTextBoxBase.MenuHeight).Minimum}"
                                MinWidth="{TemplateBinding ActualWidth}">
                                <ContentPresenter
                                    Content="{Binding Source={StaticResource TextBox}}"
                                    ContentTemplate="{Data:TemplatedParent Path=(Linq:XTextBoxBase.MenuTemplate)}"/>
                            </local:PopupBorder>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Linq:XTextBox.IsEditable" Value="True"/>
                    <Condition Property="IsFocused" Value="True"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{local:ThemeKey TextBoxFocusedBorder}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Linq:XTextBox.IsEditable" Value="True"/>
                    <Condition Property="IsFocused" Value="True"/>
                    <Condition Property="IsMouseOver" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{local:ThemeKey TextBoxFocusedBorder}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Linq:XTextBox.IsEditable" Value="True"/>
                    <Condition Property="IsFocused" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{local:ThemeKey TextBoxMouseOverBorder}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Linq:XTextBox.IsEditable" Value="True"/>
                    <Condition Property="IsFocused" Value="False"/>
                    <Condition Property="IsMouseOver" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{local:ThemeKey TextBoxBorder}" />
            </MultiTrigger>
            <!-- /// -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="True"/>
                    <Condition Property="IsReadOnly" Value="False"/>
                    <Condition Property="Linq:XTextBox.IsEditable" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="ContextMenuService.IsEnabled" Value="True"/>
                <Setter Property="Linq:XTextBoxBase.EnableCopyCommand" Value="True"/>
                <Setter Property="Linq:XTextBoxBase.EnableCutCommand" Value="True"/>
                <Setter Property="Linq:XTextBoxBase.EnablePasteCommand" Value="True"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsReadOnly" Value="False"/>
                    <Condition Property="Linq:XTextBox.IsEditable" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Cursor" Value="Arrow"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsReadOnly" Value="True"/>
                    <Condition Property="Linq:XTextBox.IsEditable" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Cursor" Value="Arrow"/>
            </MultiTrigger>
            <!-- /// -->
            <Trigger Property="Linq:XTextBox.IsEditable" Value="True">
                <Setter Property="Cursor" Value="IBeam"/>
                <Setter Property="Focusable" Value="True"/>
            </Trigger>
            <Trigger Property="Linq:XTextBox.IsEditable" Value="False">
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Focusable" Value="False"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- /// -->

    <Style x:Key="{x:Type DatePickerTextBox}" TargetType="{x:Type DatePickerTextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="BorderThickness" Value="0" />
    </Style>

    <!-- /// -->

    <Style x:Key="{x:Type local:PathBox}" TargetType="{x:Type local:PathBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="BrowseButtonTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:ImageButton 
                        AllowDrop="False"
                        Command="{Binding}"
                        Focusable="False"
                        Margin="0,0,5,0"
                        Source="{Markup:SmallImage Folder.png}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="BrowseButtonToolTip" Value="{Markup:Loc Browse}"/>
        <Setter Property="BrowseButtonVisibility" Value="True"/>
        <Setter Property="BrowseMode" Value="OpenFile"/>
        <Setter Property="BrowseTitle" Value="{Markup:Loc Browse, Suffix=...}"/>
        <Setter Property="g:DragDrop.IsDropTarget" Value="True"/>
        <Setter Property="Linq:XControl.DropTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:DashedBorder
                        BorderBrush="{local:ThemeKey DropTarget.Border}"
                        BorderThickness="2">
                        <StackPanel DataContext="{Data:Ancestor {x:Type local:PathBox}}"
                            HorizontalAlignment="{Binding HorizontalContentAlignment}"
                            Margin="5,0"
                            Orientation="Horizontal"
                            VerticalAlignment="{Binding VerticalContentAlignment}">
                            <local:ImageElement 
                                Margin="0,0,5,0"
                                Source="{Markup:SmallImage Plus.png}"/>
                            <TextBlock Text="Copy path..."/>
                        </StackPanel>
                    </local:DashedBorder>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XControl.DropTemplateVisibility" Value="Visible" />
        <Setter Property="Linq:XElement.ToolTipTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentPresenter Content="{Binding}" ContentTemplate="{DynamicResource {x:Static Linq:XExplorer.ToolTipTemplateKey}}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XTextBoxBase.Left">
            <Setter.Value>
                <Collections:DataTemplateCollection>
                    <DataTemplate>
                        <local:Thumbnail 
                            DataContext="{Data:Ancestor {x:Type local:PathBox}}"
                            AllowDrop="False"
                            Height="16"
                            Margin="5,0,0,0"
                            Path="{Binding Text}"
                            Width="16">
                            <local:Thumbnail.Style>
                                <Style TargetType="{x:Type local:Thumbnail}" BasedOn="{StaticResource {x:Type local:Thumbnail}}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Data:Ancestor IconVisibility, {x:Type local:PathBox}}" Value="Visible"/>
                                                <Condition Binding="{Data:Ancestor IsValid, {x:Type local:PathBox}}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </local:Thumbnail.Style>
                        </local:Thumbnail>
                    </DataTemplate>
                </Collections:DataTemplateCollection>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XTextBoxBase.Right">
            <Setter.Value>
                <Collections:DataTemplateCollection>
                    <DataTemplate>
                        <ContentControl
                            AllowDrop="False"
                            DataContext="{Data:Ancestor {x:Type local:PathBox}}"
                            Content="{Binding IsValid}"
                            ContentTemplate="{Binding ValidateTemplate}" 
                            Margin="0,0,5,0"
                            ToolTip="{Binding ValidateToolTip}"
                            Visibility="{Data:Bind CanValidate, Convert={x:Type Conversion:BooleanToVisibilityConverter}}"/>
                    </DataTemplate>
                    <DataTemplate>
                        <ContentControl
                            AllowDrop="False"
                            DataContext="{Data:Ancestor {x:Type local:PathBox}}"
                            Content="{Binding BrowseCommand}"
                            ContentTemplate="{Binding BrowseButtonTemplate}"
                            ToolTip="{Binding BrowseButtonToolTip}"
                            Visibility="{Data:Bind BrowseButtonVisibility, Convert={x:Type Conversion:BooleanToVisibilityConverter}}"/>
                    </DataTemplate>
                </Collections:DataTemplateCollection>
            </Setter.Value>
        </Setter>
        <Setter Property="ToolTip" Value="{Data:Self Text}"/>
        <Setter Property="ValidateTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:ImageElement>
                        <local:ImageElement.Style>
                            <Style TargetType="{x:Type local:ImageElement}" BasedOn="{StaticResource {x:Type local:ImageElement}}">
                                <Setter Property="Foreground" Value="{local:ThemeKey Red}"/>
                                <Setter Property="Source" Value="{Markup:SmallImage XRound.png}"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding}" Value="True">
                                        <Setter Property="Foreground" Value="{local:ThemeKey Green}"/>
                                        <Setter Property="Source" Value="{Markup:SmallImage CheckmarkRound.png}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </local:ImageElement.Style>
                    </local:ImageElement>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ValidateToolTip" Value="{x:Null}"/>
    </Style>

    <Style x:Key="{x:Type local:UriBox}" TargetType="{x:Type local:UriBox}" BasedOn="{StaticResource {x:Type TextBox}}"/>

    <Style x:Key="{x:Type local:VersionBox}" TargetType="{x:Type local:VersionBox}" BasedOn="{StaticResource {x:Type TextBox}}"/>

    <!-- ... UpDown -->

    <Style x:Key="{x:Type local:UpDown}" TargetType="{x:Type local:UpDown}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="DownButtonTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:ImageButton x:Name="PART_Down"
                        Command="{Binding}"
                        CommandParameter="Down"
                        Focusable="False"
                        Source="{Markup:SmallImage ArrowDown.png}"
                        SourceSize="9,9"
                        ToolTip="{Markup:Loc Decrease}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XTextBox.ClearButtonVisibility" Value="Collapsed" />
        <Setter Property="Linq:XTextBoxBase.Right">
            <Setter.Value>
                <Collections:DataTemplateCollection>
                    <DataTemplate>
                        <Grid Linq:XGrid.AutoRows="True" Linq:XGrid.Rows="*,*"
                            Margin="0,0,5,0"
                            Visibility="{Data:Ancestor CanUpDown, local:UpDown, Convert={x:Type Conversion:BooleanToVisibilityConverter}}">
                            <ContentPresenter
                                Content="{Data:Ancestor UpCommand, local:UpDown}"
                                ContentTemplate="{Data:Ancestor UpButtonTemplate, local:UpDown}"/>
                            <ContentPresenter
                                Content="{Data:Ancestor DownCommand, local:UpDown}"
                                ContentTemplate="{Data:Ancestor DownButtonTemplate, local:UpDown}"/>
                        </Grid>
                    </DataTemplate>
                </Collections:DataTemplateCollection>
            </Setter.Value>
        </Setter>
        <Setter Property="UpButtonTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:ImageButton x:Name="PART_Up"
                        Command="{Binding}"
                        CommandParameter="Up"
                        Focusable="False"
                        Source="{Markup:SmallImage ArrowUp.png}"
                        SourceSize="9,9"
                        ToolTip="{Markup:Loc Increase}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- /// -->

    <Style x:Key="{x:Type local:ByteUpDown}" TargetType="{x:Type local:ByteUpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:DecimalUpDown}" TargetType="{x:Type local:DecimalUpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:DoubleUpDown}" TargetType="{x:Type local:DoubleUpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:SingleUpDown}" TargetType="{x:Type local:SingleUpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:Int16UpDown}" TargetType="{x:Type local:Int16UpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:Int32UpDown}" TargetType="{x:Type local:Int32UpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:Int64UpDown}" TargetType="{x:Type local:Int64UpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:UDoubleUpDown}" TargetType="{x:Type local:UDoubleUpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:UInt16UpDown}" TargetType="{x:Type local:UInt16UpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:UInt32UpDown}" TargetType="{x:Type local:UInt32UpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:UInt64UpDown}" TargetType="{x:Type local:UInt64UpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:USingleUpDown}" TargetType="{x:Type local:USingleUpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <!-- ... RichTextBox -->

    <Style x:Key="{x:Type RichTextBox}" TargetType="{x:Type RichTextBox}" BasedOn="{StaticResource {x:Type TextBoxBase}}">
        <Setter Property="AcceptsReturn" Value="True" />
        <Setter Property="AcceptsTab" Value="True" />
        <Setter Property="BorderBrush" Value="{local:ThemeKey TextBoxBorder}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RichTextBox}">
                    <Grid>
                        <Grid.Resources>
                            <Data:Reference x:Key="RichTextBox" Data="{Data:TemplatedParent}"/>
                        </Grid.Resources>
                        <Border x:Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding Border.CornerRadius}"
                            SnapsToDevicePixels="True">
                            <Grid Linq:XGrid.Columns="Auto,*,Auto">
                                <!-- ... Content (left) -->
                                <ItemsControl Grid.Column="0"
                                    ItemsSource="{Data:TemplatedParent Path=(Linq:XTextBoxBase.Left)}">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <StackPanel Orientation="Horizontal"/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <ContentControl Content="{Markup:True}" 
                                                ContentTemplate="{Binding}"
                                                VerticalAlignment="Center"/>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                                <!-- ... Placeholder -->
                                <ContentPresenter Grid.Column="1"
                                    Content="{Data:TemplatedParent Path=(Linq:XTextBoxBase.Placeholder)}" 
                                    ContentTemplate="{Data:TemplatedParent Path=(Linq:XTextBoxBase.PlaceholderTemplate)}"
                                    ContentTemplateSelector="{Data:TemplatedParent Path=(Linq:XTextBoxBase.PlaceholderTemplateSelector)}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    IsHitTestVisible="False"
                                    Margin="{TemplateBinding Padding}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Visibility="{Data:TemplatedParent Path=(Linq:XTextBoxBase.IsEmpty), Convert={x:Type Conversion:BooleanToVisibilityConverter}}"/>
                                <!-- ... Text -->
                                <ScrollViewer x:Name="PART_ContentHost" Grid.Column="1"
                                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    Padding="{TemplateBinding Padding}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    Style="{Data:TemplatedParent Path=(Linq:XTextBoxBase.ScrollViewerStyle)}"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                <!-- ... Loading -->
                                <local:ProgressCircle Grid.Column="1"
                                    HorizontalAlignment="Center"
                                    Linq:XElement.FadeTrigger="True"
                                    Linq:XElement.FadeTriggerSource="{Data:TemplatedParent Path=(Linq:XRichTextBox.Loading)}"
                                    Opacity="0"
                                    VerticalAlignment="Center"
                                    Visibility="Collapsed"/>
                                <!-- ... Content (right) -->
                                <ItemsControl Grid.Column="2"
                                    ItemsSource="{Data:TemplatedParent Path=(Linq:XTextBoxBase.Right)}">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <StackPanel Orientation="Horizontal"/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <ContentControl Content="{Markup:True}" 
                                                ContentTemplate="{Binding}"
                                                VerticalAlignment="Center"/>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </Grid>
                        </Border>
                        <Popup x:Name="PART_Popup"
                            AllowsTransparency="True"
                            Focusable="False" 
                            IsOpen="{Data:TemplatedParent Convert={x:Type Conversion:BooleanToVisibilityConverter}, Mode=TwoWay, Path=(Linq:XTextBoxBase.MenuVisibility)}"
                            Linq:XPopup.CloseOnMouseLeave="True"
                            Placement="{Data:TemplatedParent Path=(Linq:XTextBoxBase.MenuPlacement)}" 
                            PlacementTarget="{Binding ElementName=Bd}"
                            PopupAnimation="{Data:TemplatedParent Path=(Linq:XTextBoxBase.MenuAnimation)}"
                            StaysOpen="True">
                            <local:PopupBorder
                                MaxHeight="{Data:TemplatedParent Path=(Linq:XTextBoxBase.MenuHeight).Maximum}"
                                MinHeight="{Data:TemplatedParent Path=(Linq:XTextBoxBase.MenuHeight).Minimum}"
                                MinWidth="{TemplateBinding ActualWidth}" >
                                <ContentPresenter
                                    Content="{Binding Source={StaticResource RichTextBox}}"
                                    ContentTemplate="{Data:TemplatedParent Path=(Linq:XTextBoxBase.MenuTemplate)}"/>
                            </local:PopupBorder>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsFocused" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{local:ThemeKey TextBoxMouseOverBorder}" />
            </MultiTrigger>
            <!-- /// -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="True"/>
                    <Condition Property="IsReadOnly" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="ContextMenuService.IsEnabled" Value="True"/>
                <Setter Property="Linq:XTextBoxBase.EnableCopyCommand" Value="True"/>
                <Setter Property="Linq:XTextBoxBase.EnableCutCommand" Value="True"/>
                <Setter Property="Linq:XTextBoxBase.EnablePasteCommand" Value="True"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- ... TokenBox -->

    <Style x:Key="{x:Type local:TokenBox}" TargetType="{x:Type local:TokenBox}" BasedOn="{StaticResource {x:Type RichTextBox}}">
        <Setter Property="AcceptsReturn" Value="False" />
        <Setter Property="AcceptsTab" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="True"/>
                    <Condition Property="IsReadOnly" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="ContextMenuService.IsEnabled" Value="False"/>
                <Setter Property="Linq:XTextBoxBase.EnableCopyCommand" Value="False"/>
                <Setter Property="Linq:XTextBoxBase.EnableCutCommand" Value="False"/>
                <Setter Property="Linq:XTextBoxBase.EnablePasteCommand" Value="False"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>