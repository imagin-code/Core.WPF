<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Conversion="clr-namespace:Imagin.Core.Conversion"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Markup="clr-namespace:Imagin.Core.Markup">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=Popup}"/>
    </ResourceDictionary.MergedDictionaries>

    <DataTemplate x:Key="{x:Static Linq:XToolTip.HeaderPatternKey}">
        <local:PatternElement Foreground="{local:ThemeKey Key=Text}"/>
    </DataTemplate>
    
    <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
        <Setter Property="Background" Value="{local:ThemeKey ToolTipBackground}" />
        <Setter Property="BorderBrush" Value="{local:ThemeKey ToolTipBorder}" />
        <Setter Property="Border.CornerRadius" Value="3" />
        <Setter Property="ContentTemplate" Value="{Data:Self Path=PlacementTarget.(Linq:XElement.ToolTipTemplate)}" />
        <Setter Property="ContentTemplateSelector" Value="{Data:Self Path=PlacementTarget.(Linq:XElement.ToolTipTemplateSelector)}" />
        <Setter Property="FontFamily" Value="{Data:Options FontFamily}"/>
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Foreground" Value="{local:ThemeKey ToolTipForeground}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalOffset">
            <Setter.Value>
                <Data:MultiBind Convert="{x:Type Conversion:HorizontalCenterMultiConverter}">
                    <Data:Self Path="PlacementTarget.ActualWidth"/>
                    <Data:Self Path="ActualWidth"/>
                </Data:MultiBind>
            </Setter.Value>
        </Setter>
        <Setter Property="MaxWidth" Value="{Data:Self Path=PlacementTarget.(Linq:XToolTip.MaximumWidth)}" />
        <Setter Property="MinWidth" Value="{Data:Self Path=PlacementTarget.(Linq:XToolTip.MinimumWidth)}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Padding" Value="12,10" />
        <Setter Property="Placement" Value="Bottom" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Grid x:Name="Grid" Effect="{StaticResource {x:Static Linq:XPopup.DropShadowEffectKey}}" Margin="10">
                        <local:ImageElement x:Name="Triangle"
                            Foreground="{TemplateBinding Background}"
                            Margin="{TemplateBinding Tag}"
                            Source="{Markup:SmallImage Triangle.png}">
                            <local:ImageElement.LayoutTransform>
                                <RotateTransform Angle="180"/>
                            </local:ImageElement.LayoutTransform>
                        </local:ImageElement>
                        <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding Border.CornerRadius}">
                            <Grid Linq:XGrid.AutoRows="True" Linq:XGrid.Rows="Auto,Auto">
                                <local:BottomBorder Margin="5,0" Padding="7" Visibility="{Data:VisibilityBinding Path=PlacementTarget.(Linq:XToolTip.Header), From=TemplatedParent}">
                                    <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="*,Auto,Auto,*" Linq:XPanel.Spacing="0,0,5,0" Linq:XPanel.SpacingExcept="Last">
                                        <ContentPresenter Content="{Markup:True}" ContentTemplate="{StaticResource {x:Static Linq:XToolTip.HeaderPatternKey}}"/>
                                        <ContentControl x:Name="Image" Content="{Data:TemplatedParent Path=PlacementTarget.(Linq:XToolTip.HeaderIcon)}" 
                                            ContentTemplate="{Data:TemplatedParent Path=PlacementTarget.(Linq:XToolTip.HeaderIconTemplate)}"/>
                                        <ContentControl Content="{Data:TemplatedParent Path=PlacementTarget.(Linq:XToolTip.Header)}" 
                                            ContentTemplate="{Data:TemplatedParent Path=PlacementTarget.(Linq:XToolTip.HeaderTemplate)}"
                                            ContentTemplateSelector="{Data:TemplatedParent Path=PlacementTarget.(Linq:XToolTip.HeaderTemplateSelector)}"/>
                                        <ContentPresenter Content="{Markup:True}" ContentTemplate="{StaticResource {x:Static Linq:XToolTip.HeaderPatternKey}}"/>
                                    </Grid>
                                </local:BottomBorder>
                                <ContentPresenter ContentSource="Content" Margin="{TemplateBinding Padding}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Data:Self Path=PlacementTarget.(Linq:XToolTip.HeaderIcon)}" Value="{x:Null}">
                            <Setter TargetName="Image" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Data:Self Path=PlacementTarget.(Linq:XToolTip.HeaderIconTemplate)}" Value="{x:Null}">
                            <Setter TargetName="Image" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <local:ImageElement Source="{Binding}"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Data:Self Placement}" Value="Bottom">
                            <Setter TargetName="Grid" Property="Linq:XGrid.Rows" Value="Auto,*"/>
                            
                            <Setter TargetName="Border" Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect Color="{local:ThemeKey PopupDropShadow}" 
                                        BlurRadius="4"
                                        Direction="315"
                                        Opacity="0.4"
                                        ShadowDepth="2.25"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Border" Property="Grid.Row" Value="1"/>
                            
                            <Setter TargetName="Triangle" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="Triangle" Property="LayoutTransform" Value="{x:Null}"/>
                            <Setter TargetName="Triangle" Property="Margin" Value="0,0,0,-5"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Data:Self Placement}" Value="Top">
                            <Setter TargetName="Grid" Property="Linq:XGrid.Rows" Value="*,Auto"/>
                            
                            <Setter TargetName="Border" Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect Color="{local:ThemeKey PopupDropShadow}" 
                                        BlurRadius="4"
                                        Direction="135"
                                        Opacity="0.4"
                                        ShadowDepth="2.25"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Border" Property="Grid.Row" Value="0"/>
                            
                            <Setter TargetName="Triangle" Property="Grid.Row" Value="1"/>
                            <Setter TargetName="Triangle" Property="Margin" Value="0,-5,0,0"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="{Data:Self Path=PlacementTarget.(Linq:XToolTip.Width)}" />
        <Style.Triggers>
            <DataTrigger Binding="{Data:Self Path=PlacementTarget.(Linq:XElement.ToolTipTemplate)}" Value="{x:Null}">
                <Setter Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <TextBlock Text="{Data:Bind Convert={x:Type Conversion:ToStringConverter}}" TextWrapping="Wrap"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>