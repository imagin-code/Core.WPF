<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:l="http://wpflocalizeextension.codeplex.com"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Conversion="clr-namespace:Imagin.Core.Conversion"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Markup="clr-namespace:Imagin.Core.Markup"
    xmlns:Models="clr-namespace:Imagin.Core.Models"
    xmlns:System="clr-namespace:System;assembly=mscorlib"
    xmlns:Text="clr-namespace:Imagin.Core.Text">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=Control}"/>
        <ResourceDictionary Source="{local:StyleKey Key=DataGrid}"/>
        <ResourceDictionary Source="{local:StyleKey Key=ListBox}"/>
    </ResourceDictionary.MergedDictionaries>

    <System:Double x:Key="{x:Static local:ViewControl.MaximumToolTipWidth}">720.0</System:Double>

    <System:Double x:Key="{x:Static local:ViewControl.MinimumToolTipWidth}">360.0</System:Double>

    <!-- [Templates] -->

    <!-- Carousel -->
    <DataTemplate x:Key="{x:Static local:ViewControl.ViewCarouselKey}">
        <Grid Linq:XGrid.AutoRows="True" Linq:XGrid.Rows="*,Auto,Auto,Auto" Height="{Data:Ancestor ItemSize, local:ViewControl}" Width="{Data:Ancestor ItemSize, local:ViewControl}">
            <ContentPresenter x:Name="Content" Content="{Binding Value}" ContentTemplate="{Data:Ancestor ItemTemplate, local:ViewControl}"/>
            <ContentPresenter Content="{Binding}" ContentTemplate="{Data:Ancestor NameTemplate, local:ViewControl}"
                HorizontalAlignment="Center"
                Margin="0,5,0,0"
                Visibility="{Data:VisibilityBinding Panel.ViewName, From=FindAncestor, FromType=local:ViewControl}"/>
            <ContentPresenter Content="{Binding}" ContentTemplate="{Data:Ancestor DescriptionTemplate, local:ViewControl}"
                HorizontalAlignment="Center"
                Margin="0,5,0,0"
                Visibility="{Data:VisibilityBinding Panel.ViewDescription, From=FindAncestor, FromType=local:ViewControl}"/>
            <ContentPresenter Content="{Binding}" ContentTemplate="{Data:Ancestor DetailTemplate, local:ViewControl}"
                HorizontalAlignment="Center"
                Margin="0,5,0,0"
                Visibility="{Data:VisibilityBinding Panel.ViewDetail, From=FindAncestor, FromType=local:ViewControl}"/>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Value}" Value="{x:Null}">
                <Setter TargetName="Content" Property="Content" Value="{Binding}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- List -->
    <DataTemplate x:Key="{x:Static local:ViewControl.ViewListKey}">
        <Grid x:Name="Grid" Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,4*,6*">
            <local:ChildElement Width="{Data:Ancestor ItemSize, local:ViewControl}"
                Margin="0,0,5,0">
                <ContentPresenter x:Name="Content" Content="{Binding Value}"
                    ContentTemplate="{Data:Ancestor ItemTemplate, local:ViewControl}"/>
            </local:ChildElement>

            <StackPanel VerticalAlignment="Center">
                <StackPanel.Visibility>
                    <Data:VisibilityMultiBinding>
                        <Data:Bind From="FindAncestor" FromType="local:ViewControl" Path="ViewDescription"/>
                        <Data:Bind From="FindAncestor" FromType="local:ViewControl" Path="ViewName"/>
                    </Data:VisibilityMultiBinding>
                </StackPanel.Visibility>
                <ContentPresenter Content="{Binding}" ContentTemplate="{Data:Ancestor NameTemplate, local:ViewControl}"
                    Visibility="{Data:VisibilityBinding Panel.ViewName, From=FindAncestor, FromType=local:ViewControl}"/>
                <ContentPresenter Content="{Binding}" ContentTemplate="{Data:Ancestor DescriptionTemplate, local:ViewControl}"
                    Margin="0,5,0,0"
                    Visibility="{Data:VisibilityBinding Panel.ViewDescription, From=FindAncestor, FromType=local:ViewControl}"/>
            </StackPanel>
            <ContentPresenter x:Name="Detail" Content="{Binding Value}"
                ContentTemplate="{Data:Ancestor DetailTemplate, local:ViewControl}"
                Margin="5,0,0,0"
                VerticalAlignment="Center"
                Visibility="{Data:VisibilityBinding Panel.ViewDetail, From=FindAncestor, FromType=local:ViewControl}"/>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Value}" Value="{x:Null}">
                <Setter TargetName="Content" Property="Content" Value="{Binding}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- Thumb -->
    <DataTemplate x:Key="{x:Static local:ViewControl.ViewThumbKey}">
        <Grid Linq:XGrid.AutoRows="True" Linq:XGrid.Rows="*,Auto">
            <ContentPresenter x:Name="Content" Content="{Binding Value}" ContentTemplate="{Data:Ancestor ItemTemplate, local:ViewControl}"/>
            <StackPanel Linq:XPanel.HorizontalContentAlignment="Center">
                <ContentPresenter Content="{Binding}" ContentTemplate="{Data:Ancestor NameTemplate, local:ViewControl}"
                    Margin="0,5,0,0"
                    Visibility="{Data:VisibilityBinding Panel.ViewName, From=FindAncestor, FromType=local:ViewControl}"/>
                <ContentPresenter Content="{Binding}" ContentTemplate="{Data:Ancestor DescriptionTemplate, local:ViewControl}"
                    Margin="0,5,0,0"
                    Visibility="{Data:VisibilityBinding Panel.ViewDescription, From=FindAncestor, FromType=local:ViewControl}"/>
                <ContentPresenter Content="{Binding}" ContentTemplate="{Data:Ancestor DetailTemplate, local:ViewControl}"
                    Margin="0,5,0,0"
                    Visibility="{Data:VisibilityBinding Panel.ViewDetail, From=FindAncestor, FromType=local:ViewControl}"/>
            </StackPanel>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Value}" Value="{x:Null}">
                <Setter TargetName="Content" Property="Content" Value="{Binding}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- Tile -->
    <DataTemplate x:Key="{x:Static local:ViewControl.ViewTileKey}">
        <Grid x:Name="PART_Grid" Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,*">
            <Grid.Resources>
                <Data:Reference x:Key="ViewControl" Data="{Data:Ancestor local:ViewControl}"/>
            </Grid.Resources>
            <local:ChildElement Width="{Binding Data.ItemSize, Source={StaticResource ViewControl}}">
                <ContentPresenter x:Name="Content" Content="{Binding Value}" ContentTemplate="{Binding Data.ItemTemplate, Source={StaticResource ViewControl}}"
                    Margin="0,0,5,0"/>
            </local:ChildElement>
            <StackPanel VerticalAlignment="Center">
                <ContentPresenter Content="{Binding}" ContentTemplate="{Binding Data.NameTemplate, Source={StaticResource ViewControl}}"
                    Visibility="{Data:VisibilityBinding Panel.ViewName, From=FindAncestor, FromType=local:ViewControl}"/>
                <ContentPresenter Content="{Binding}" ContentTemplate="{Binding Data.DescriptionTemplate, Source={StaticResource ViewControl}}"
                    Margin="0,5,0,0"
                    Visibility="{Data:VisibilityBinding Panel.ViewDescription, From=FindAncestor, FromType=local:ViewControl}"/>
                <ContentPresenter Content="{Binding Value}" ContentTemplate="{Binding Data.DetailTemplate, Source={StaticResource ViewControl}}"
                    Margin="0,5,0,0"
                    Visibility="{Data:VisibilityBinding Panel.ViewDetail, From=FindAncestor, FromType=local:ViewControl}"/>
            </StackPanel>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Value}" Value="{x:Null}">
                <Setter TargetName="Content" Property="Content" Value="{Binding}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- [Styles] -->

    <ContextMenu x:Key="ItemContextMenu" x:Shared="False" DataContext="{Data:Self PlacementTarget.Tag}">
        <MenuItem Header="{Markup:Loc Edit}"
            FontWeight="Bold"
            Command="{Binding Second.Panel.EditCommand}"
            CommandParameter="{Binding First}"
            Icon="{Markup:SmallImage Image=Pencil}"/>
        <Separator/>
        <MenuItem Header="{Markup:Loc Cut}"
            Command="{Binding Second.Panel.CutCommand}"
            Icon="{Markup:SmallImage Image=Cut}"/>
        <MenuItem Header="{Markup:Loc Copy}"
            Command="{Binding Second.Panel.CopyCommand}"
            Icon="{Markup:SmallImage Image=Copy}"/>
        <Separator/>
        <MenuItem Header="{Markup:Loc Clone}"
            Command="{Binding Second.Panel.CloneCommand}"
            Icon="{Markup:SmallImage Image=Clone}"/>
        <MenuItem Header="{Markup:Loc Delete}"
            Command="{Binding Second.Panel.DeleteCommand}"
            CommandParameter="{Binding First}"
            Icon="{Markup:SmallImage Image=Trash}"/>
        <MenuItem Header="{Markup:Loc Reset}"
            Command="{Binding Second.Panel.ResetCommand}"
            CommandParameter="{Binding First}"
            Icon="{Markup:SmallImage Image=XRound}"/>
        <Separator/>
        <MenuItem Header="{Markup:Loc Move, Suffix=...}"
            Command="{Binding Second.Source.MoveCommand}"
            Icon="{Markup:SmallImage Image=Folder}"/>
        <Separator/>
        <MenuItem Header="{Markup:Loc Export, Suffix=...}"
            Command="{Binding Second.Source.ExportCommand}"
            CommandParameter="{Binding First}"
            Icon="{Markup:SmallImage Image=Export}"/>
    </ContextMenu>

    <!-- * -->
    <Style x:Key="{x:Static local:ViewControl.DefaultStyle}" TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="ContextMenu" Value="{StaticResource ItemContextMenu}"/>
        <Setter Property="IsSelected" Value="{Data:Bind IsSelected, Way=2}"/>
        <Setter Property="Linq:XElement.ToolTipTemplate" Value="{Data:Ancestor ItemToolTipTemplate, local:ViewControl}"/>
        <Setter Property="Linq:XToolTip.Header" Value="{Binding}"/>
        <Setter Property="Linq:XToolTip.HeaderTemplate" Value="{Data:Ancestor ItemToolTipHeaderTemplate, local:ViewControl}"/>
        <Setter Property="Linq:XToolTip.HeaderIcon" Value="{Binding}"/>
        <Setter Property="Linq:XToolTip.HeaderIconTemplate" Value="{Data:Ancestor ItemToolTipHeaderIconTemplate, local:ViewControl}"/>
        <Setter Property="Linq:XToolTip.MaximumWidth" Value="{StaticResource {x:Static local:ViewControl.MaximumToolTipWidth}}"/>
        <Setter Property="Linq:XToolTip.MinimumWidth" Value="{StaticResource {x:Static local:ViewControl.MinimumToolTipWidth}}"/>
        <Setter Property="Tag">
            <Setter.Value>
                <Data:Reference2 First="{Binding}" Second="{Data:Ancestor local:ViewControl}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="ToolTip" Value="{Binding}"/>
    </Style>

    <!-- Carousel -->
    <Style x:Key="{x:Static local:ViewControl.CarouselStyleKey}" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Static local:ViewControl.DefaultStyle}}">
        <Setter Property="Visibility" Value="{local:CarouselVisibilityBinding}"/>
    </Style>

    <!-- Detail -->
    <Style x:Key="{x:Static local:ViewControl.DetailStyleKey}" TargetType="DataGridRow" BasedOn="{StaticResource {x:Type DataGridRow}}">
        <Setter Property="ContextMenu" Value="{StaticResource ItemContextMenu}"/>
        <Setter Property="Linq:XElement.ToolTipTemplate" Value="{Data:Ancestor ItemToolTipTemplate, local:ViewControl}"/>
        <Setter Property="Linq:XToolTip.Header" Value="{Binding}"/>
        <Setter Property="Linq:XToolTip.HeaderTemplate" Value="{Data:Ancestor ItemToolTipHeaderTemplate, local:ViewControl}"/>
        <Setter Property="Linq:XToolTip.HeaderIcon" Value="{Binding}"/>
        <Setter Property="Linq:XToolTip.HeaderIconTemplate" Value="{Data:Ancestor ItemToolTipHeaderIconTemplate, local:ViewControl}"/>
        <Setter Property="Linq:XToolTip.MaximumWidth" Value="{StaticResource {x:Static local:ViewControl.MaximumToolTipWidth}}"/>
        <Setter Property="Linq:XToolTip.MinimumWidth" Value="{StaticResource {x:Static local:ViewControl.MinimumToolTipWidth}}"/>
        <Setter Property="Tag">
            <Setter.Value>
                <Data:Reference2 First="{Binding}" Second="{Data:Ancestor local:ViewControl}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="ToolTip" Value="{Binding}"/>
    </Style>

    <!-- List -->
    <Style x:Key="{x:Static local:ViewControl.ListStyleKey}" TargetType="ListBoxItem" BasedOn="{StaticResource {x:Static local:ViewControl.DefaultStyle}}">
        <Setter Property="Height" Value="{Data:Ancestor ItemSize, local:ViewControl}"/>
        <Setter Property="Margin" Value="0,0,0,5" />
    </Style>

    <!-- Thumb -->
    <Style x:Key="{x:Static local:ViewControl.ThumbStyleKey}" TargetType="ListBoxItem" BasedOn="{StaticResource {x:Static local:ViewControl.DefaultStyle}}">
        <Setter Property="Height" Value="{Data:Ancestor ItemSize, local:ViewControl}"/>
        <Setter Property="Margin" Value="0,0,5,5" />
        <Setter Property="Width" Value="{Data:Ancestor ItemSize, local:ViewControl}"/>
    </Style>

    <!-- Tile -->
    <Style x:Key="{x:Static local:ViewControl.TileStyleKey}" TargetType="ListBoxItem" BasedOn="{StaticResource {x:Static local:ViewControl.DefaultStyle}}">
        <Setter Property="Margin" Value="0,0,5,5" />
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
    </Style>

    <!-- /// -->

    <DataTemplate x:Key="NoGroupSelectedTemplate">
        <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Opacity="0.5" Orientation="Horizontal">
            <local:ImageElement Source="{Markup:SmallImage Image=X}"
                Margin="0,0,5,0"/>
            <TextBlock FontStyle="Italic">No group selected</TextBlock>
        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="NoItemsSelectedTemplate">
        <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Opacity="0.5" Orientation="Horizontal">
            <local:ImageElement Source="{Markup:SmallImage Image=X}"
                Margin="0,0,5,0"/>
            <TextBlock FontStyle="Italic">No <Run Text="{Data:Ancestor Panel.ItemName, {x:Type local:ViewControl}, Convert=Conversion:PluralConverter, ConverterParameter={x:Static Text:Casing.Lower}, Way=1}"/> selected</TextBlock>
        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="ViewControlPanelTemplate">
        <local:ChildElement>
            <local:ChildElement.Resources>
                <Data:Reference x:Key="ViewControl" Data="{Binding Data}"/>
                
                <DataTemplate x:Key="DefaultTemplate">
                    <ListBox ItemsSource="{Binding}"
                        BorderThickness="0"
                        Linq:XItemsControl.CanDragSelect="True"
                        Linq:XItemsControl.EmptyTemplate="{StaticResource NoGroupSelectedTemplate}"
                        Linq:XElement.Reference="{Binding Data.Panel, Source={StaticResource ViewControl}}"
                        Linq:XElement.ReferenceKey="{x:Static Models:ViewPanel.SelectorKey}"
                        Padding="5"
                        SelectedIndex="{Binding Data.SelectedIndex, Mode=TwoWay, Source={StaticResource ViewControl}}"
                        SelectionMode="Single">
                        <ListBox.Style>
                            <Style TargetType="ListBox" BasedOn="{StaticResource {x:Type ListBox}}">
                                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden"/>
                                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Visible"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Data.View, Source={StaticResource ViewControl}}" Value="List">
                                        <Setter Property="ItemContainerStyle" Value="{StaticResource {x:Static local:ViewControl.ListStyleKey}}"/>
                                        <Setter Property="ItemsPanel">
                                            <Setter.Value>
                                                <ItemsPanelTemplate>
                                                    <StackPanel/>
                                                </ItemsPanelTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="ItemTemplate" Value="{StaticResource {x:Static local:ViewControl.ViewListKey}}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Data.View, Source={StaticResource ViewControl}}" Value="Thumb">
                                        <Setter Property="ItemContainerStyle" Value="{StaticResource {x:Static local:ViewControl.ThumbStyleKey}}"/>
                                        <Setter Property="ItemTemplate" Value="{StaticResource {x:Static local:ViewControl.ViewThumbKey}}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Data.View, Source={StaticResource ViewControl}}" Value="Tile">
                                        <Setter Property="ItemContainerStyle" Value="{StaticResource {x:Static local:ViewControl.TileStyleKey}}"/>
                                        <Setter Property="ItemTemplate" Value="{StaticResource {x:Static local:ViewControl.ViewTileKey}}"/>
                                        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
                                    </DataTrigger>
                                    <!-- Orientation = Horizontal, View = Thumb -->
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Data.View, Source={StaticResource ViewControl}}" Value="Thumb"/>
                                            <Condition Binding="{Binding Data.Orientation, Source={StaticResource ViewControl}}" Value="Horizontal"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="ItemsPanel">
                                            <Setter.Value>
                                                <ItemsPanelTemplate>
                                                    <WrapPanel MaxWidth="{Data:Ancestor ActualWidth, ListBox}" Orientation="Horizontal"/>
                                                </ItemsPanelTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </MultiDataTrigger>
                                    <!-- Orientation = Horizontal, View = Tile -->
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Data.View, Source={StaticResource ViewControl}}" Value="Tile"/>
                                            <Condition Binding="{Binding Data.Orientation, Source={StaticResource ViewControl}}" Value="Horizontal"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="ItemsPanel">
                                            <Setter.Value>
                                                <ItemsPanelTemplate>
                                                    <WrapPanel Orientation="Horizontal"
                                                        ItemWidth="{Data:Ancestor TileSize, local:ViewControl}"
                                                        ItemHeight="{Data:Ancestor ItemSize, local:ViewControl}"
                                                        Width="{Data:Ancestor ActualWidth, {x:Type ScrollContentPresenter}}"/>
                                                </ItemsPanelTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </MultiDataTrigger>
                                    <!-- Orientation = Vertical, View = Thumb -->
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Data.View, Source={StaticResource ViewControl}}" Value="Thumb"/>
                                            <Condition Binding="{Binding Data.Orientation, Source={StaticResource ViewControl}}" Value="Vertical"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="ItemsPanel">
                                            <Setter.Value>
                                                <ItemsPanelTemplate>
                                                    <WrapPanel MaxHeight="{Data:Ancestor ActualHeight, ListBox}" Orientation="Vertical"/>
                                                </ItemsPanelTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Visible"/>
                                        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden"/>
                                    </MultiDataTrigger>
                                    <!-- Orientation = Vertical, View = Tile -->
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Data.View, Source={StaticResource ViewControl}}" Value="Tile"/>
                                            <Condition Binding="{Binding Data.Orientation, Source={StaticResource ViewControl}}" Value="Vertical"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="ItemsPanel">
                                            <Setter.Value>
                                                <ItemsPanelTemplate>
                                                    <WrapPanel Orientation="Vertical"
                                                        Height="{Data:Ancestor ActualHeight, {x:Type ScrollContentPresenter}}"
                                                        ItemWidth="{Data:Ancestor TileSize, local:ViewControl}"
                                                        ItemHeight="{Data:Ancestor ItemSize, local:ViewControl}"/>
                                                </ItemsPanelTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Visible"/>
                                        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden"/>
                                    </MultiDataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ListBox.Style>
                    </ListBox>
                </DataTemplate>

                <DataTemplate x:Key="CarouselTemplate">
                    <local:CarouselControl
                        Columns="{Binding Data.Columns, Source={StaticResource ViewControl}}"
                        ItemContainerStyle="{StaticResource {x:Static local:ViewControl.CarouselStyleKey}}"
                        ItemsSource="{Binding}"
                        ItemTemplate="{StaticResource {x:Static local:ViewControl.ViewCarouselKey}}"
                        Linq:XElement.Reference="{Binding Data.Panel, Source={StaticResource ViewControl}}"
                        Linq:XElement.ReferenceKey="{x:Static Models:ViewPanel.SelectorKey}"
                        Margin="10,5"
                        SelectedIndex="{Binding Data.SelectedIndex, Mode=TwoWay, Source={StaticResource ViewControl}}"
                        SelectionMode="Extended"
                        SortDirection="Ascending"
                        SortName="Name"/>
                </DataTemplate>
                
                <DataTemplate x:Key="DetailTemplate">
                    <DataGrid ItemsSource="{Binding}"
                        ItemContainerStyle="{StaticResource {x:Static local:ViewControl.DetailStyleKey}}"
                        Linq:XDataGrid.DisplayRowNumber="True"
                        Linq:XDataGrid.DisplayRowNumberBullet="{Binding Data.Bullet, Source={StaticResource ViewControl}}"
                        Linq:XDataGrid.DisplayRowNumberOffset="1"
                        Linq:XElement.Reference="{Binding Data.Panel, Source={StaticResource ViewControl}}"
                        Linq:XElement.ReferenceKey="{x:Static Models:ViewPanel.SelectorKey}"
                        Linq:XItemsControl.CanDragSelect="True"
                        Linq:XItemsControl.EmptyTemplate="{StaticResource NoGroupSelectedTemplate}"
                        RowHeight="{Binding Data.ItemSize, Source={StaticResource ViewControl}}"
                        SelectedIndex="{Binding Data.SelectedIndex, Mode=TwoWay, Source={StaticResource ViewControl}}"
                        SelectionMode="Extended">
                        <DataGrid.Columns>
                            <DataGridTemplateColumn>
                                <DataGridTemplateColumn.CellStyle>
                                    <Style TargetType="DataGridCell" BasedOn="{StaticResource {x:Type DataGridCell}}">
                                        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                                    </Style>
                                </DataGridTemplateColumn.CellStyle>
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <local:ChildElement Width="{Data:Ancestor ItemSize, local:ViewControl}">
                                            <ContentPresenter Content="{Binding Value}" ContentTemplate="{Binding Data.ItemTemplate, Source={StaticResource ViewControl}}"/>
                                        </local:ChildElement>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn Header="{Markup:Loc Name}"  
                                CellTemplate="{Binding Data.NameTemplate, Source={StaticResource ViewControl}}"
                                Visibility="{Binding Data.Panel.ViewName, Source={StaticResource ViewControl}}"/>
                            <DataGridTemplateColumn Header="{Markup:Loc Description}" 
                                CellTemplate="{Binding Data.DescriptionTemplate, Source={StaticResource ViewControl}}"
                                Visibility="{Binding Data.Panel.ViewDescription, Source={StaticResource ViewControl}}"/>
                            <DataGridTemplateColumn Header="{Binding Data.DetailName, Source={StaticResource ViewControl}}" 
                                CellTemplate="{Binding Data.DetailTemplate, Source={StaticResource ViewControl}}"
                                Visibility="{Binding Data.Panel.ViewDetail, Source={StaticResource ViewControl}}"/>
                        </DataGrid.Columns>
                    </DataGrid>
                </DataTemplate>
            </local:ChildElement.Resources>
            <ContentPresenter x:Name="Content">
                <ContentPresenter.ContentTemplate>
                    <DataTemplate>
                        <ContentPresenter x:Name="Content" Content="{Binding}" ContentTemplate="{StaticResource DefaultTemplate}"/>
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding Data.View, Source={StaticResource ViewControl}}" Value="Carousel">
                                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource CarouselTemplate}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Data.View, Source={StaticResource ViewControl}}" Value="Detail">
                                <Setter TargetName="Content" Property="ContentTemplate" Value="{StaticResource DetailTemplate}"/>
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </ContentPresenter.ContentTemplate>
            </ContentPresenter>
        </local:ChildElement>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Data:Bind Convert=Conversion:GetTypeConverter, FromType=local:ViewControl}" Value="{x:Type local:GroupControl}">
                <Setter TargetName="Content" Property="Content" Value="{Binding Data.SelectedGroup}"/>
            </DataTrigger>
            <DataTrigger Binding="{Data:Bind Convert=Conversion:GetTypeConverter, FromType=local:ViewControl}" Value="{x:Type local:ViewControl}">
                <Setter TargetName="Content" Property="Content" Value="{Binding Data.Source}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- [ViewControl] -->

    <Style x:Key="{x:Type local:ViewControl}" TargetType="{x:Type local:ViewControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="DescriptionTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock x:Name="Description" Text="{Binding Description}" Opacity="0.5" TextTrimming="CharacterEllipsis" ToolTip="{Data:Self Text}"/>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding Description}" Value="">
                            <Setter TargetName="Description" Property="FontStyle" Value="Italic"/>
                            <Setter TargetName="Description" Property="Text" Value="{Markup:Loc NoDescription}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Description}" Value="{x:Null}">
                            <Setter TargetName="Description" Property="FontStyle" Value="Italic"/>
                            <Setter TargetName="Description" Property="Text" Value="{Markup:Loc NoDescription}"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XElement.Wheel" Value="True"/>
        <Setter Property="Linq:XElement.WheelIncrement" Value="4"/>
        <Setter Property="Linq:XElement.WheelMaximum" Value="512"/>
        <Setter Property="Linq:XElement.WheelMinimum" Value="16"/>
        <Setter Property="Linq:XElement.WheelValue" Value="{Data:Self ItemSize, Mode=TwoWay}"/>
        
        <Setter Property="Bullet" Value="{Data:Self Panel.Bullet, Mode=TwoWay}"/>
        <Setter Property="Columns" Value="{Data:Self Panel.Columns, Mode=TwoWay}"/>
        <Setter Property="ItemSize" Value="{Data:Self Panel.ItemSize, Mode=TwoWay}"/>

        <Setter Property="ItemToolTipTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock x:Name="Description" Opacity="0.5" Text="{Binding Description}" TextAlignment="Center" TextWrapping="Wrap"/>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding Description}" Value="">
                            <Setter TargetName="Description" Property="FontStyle" Value="Italic"/>
                            <Setter TargetName="Description" Property="Text" Value="{Markup:Loc NoDescription}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Description}" Value="{x:Null}">
                            <Setter TargetName="Description" Property="FontStyle" Value="Italic"/>
                            <Setter TargetName="Description" Property="Text" Value="{Markup:Loc NoDescription}"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemToolTipHeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock x:Name="Text" Text="{Binding Name}"/>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding Name}" Value="">
                            <Setter TargetName="Text" Property="FontStyle" Value="Italic"/>
                            <Setter TargetName="Text" Property="Text" Value="{Markup:Loc NoName}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Name}" Value="{x:Null}">
                            <Setter TargetName="Text" Property="FontStyle" Value="Italic"/>
                            <Setter TargetName="Text" Property="Text" Value="{Markup:Loc NoName}"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemToolTipHeaderIconTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:ImageElement Source="{Data:ImageAttributeBinding Value, Type=Image}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="Orientation" Value="{Data:Self Panel.Orientation, Mode=TwoWay}"/>
        <Setter Property="TileSize" Value="{Data:Self Panel.TileSize, Mode=TwoWay}"/>
        <Setter Property="View" Value="{Data:Self Panel.View}"/>
        
        <Setter Property="NameTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBox BorderThickness="0" Padding="0" Text="{Data:Bind Name, Trigger=PropertyChanged, Way=2}"
                        FontWeight="Bold"
                        Linq:XTextBox.CanLabel="True"
                        Linq:XTextBox.ClearButtonVisibility="Collapsed"
                        Linq:XTextBox.Label="{Binding Name}"
                        Linq:XTextBox.EditMouseEvent="DelayedMouseDown"
                        Linq:XTextBox.IsEditable="False"
                        Linq:XTextBoxBase.Placeholder="{Markup:Loc Name}"
                        ToolTip="{Data:Self Text}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ViewControl}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}">
                        <Border.Resources>
                            <Data:Reference x:Key="ViewControl" Data="{Data:TemplatedParent}"/>
                        </Border.Resources>
                        <ContentPresenter Content="{Binding Source={StaticResource ViewControl}}" ContentTemplate="{StaticResource ViewControlPanelTemplate}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type local:GroupControl}" TargetType="{x:Type local:GroupControl}" BasedOn="{StaticResource {x:Type local:ViewControl}}">
        <Setter Property="IsEditing" Value="{Data:Self Panel.IsEditing, Way=2}"/>
        <Setter Property="SelectedGroup" Value="{Data:Self Panel.SelectedGroup}"/>
        <Setter Property="SelectedIndex" Value="{Data:Self Panel.SelectedIndex, Mode=TwoWay}"/>
        <Setter Property="Source" Value="{Data:Self Panel.Groups}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:GroupControl}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}">
                        <Border.Resources>
                            <Data:Reference x:Key="ViewControl" Data="{Data:TemplatedParent}"/>
                        </Border.Resources>
                        <local:SplitGrid 
                            IsCollapsed="{Data:TemplatedParent Panel.GridCollapsed, Mode=TwoWay}"
                            Orientation="{Data:TemplatedParent Panel.GridOrientation, Mode=TwoWay}"
                            Panel1Length="{Data:TemplatedParent Panel.GridLength1, Mode=TwoWay}" 
                            Panel2Length="{Data:TemplatedParent Panel.GridLength2, Mode=TwoWay}" 
                            Reverse="{Data:TemplatedParent Panel.GridReverse, Mode=TwoWay}" 
                            ShowPanel1="True" 
                            ShowPanel2="{Data:TemplatedParent IsEditing, Way=2}">
                            <local:SplitGrid.Panel1>
                                <ContentPresenter Content="{Binding Source={StaticResource ViewControl}}" ContentTemplate="{StaticResource ViewControlPanelTemplate}"/>
                            </local:SplitGrid.Panel1>
                            <local:SplitGrid.Panel2>
                                <local:MemberGrid Source="{Binding Data.Panel.SelectedItems, Source={StaticResource ViewControl}}"
                                    Linq:XItemsControl.EmptyTemplate="{StaticResource NoItemsSelectedTemplate}"/>
                            </local:SplitGrid.Panel2>
                        </local:SplitGrid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>