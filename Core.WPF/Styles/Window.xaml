<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:h="http://www.hardcodet.net/taskbar"
    xmlns:l="http://wpflocalizeextension.codeplex.com" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Core.Controls"
    xmlns:Analytics="clr-namespace:Imagin.Core.Analytics"
    xmlns:Collections="clr-namespace:Imagin.Core.Collections.ObjectModel"
    xmlns:Common="clr-namespace:Imagin.Core"
    xmlns:Conversion="clr-namespace:Imagin.Core.Conversion"
    xmlns:Core="clr-namespace:Imagin.Core;assembly=Imagin.Core"
    xmlns:Data="clr-namespace:Imagin.Core.Data"
    xmlns:Effects="clr-namespace:Imagin.Core.Effects"
    xmlns:Linq="clr-namespace:Imagin.Core.Linq"
    xmlns:Markup="clr-namespace:Imagin.Core.Markup"
    xmlns:Models="clr-namespace:Imagin.Core.Models"
    xmlns:System="clr-namespace:System;assembly=System">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{local:StyleKey Key=Button}"/>
        <ResourceDictionary Source="{local:StyleKey Key=ComboBox}"/>
        <ResourceDictionary Source="{local:StyleKey Key=Menu}"/>
        <ResourceDictionary Source="{local:StyleKey Key=TextBox}"/>
    </ResourceDictionary.MergedDictionaries>
    <!-- /// -->

    <DataTemplate x:Key="{x:Static Linq:XWindow.GripTemplateKey}">
        <Path Data="F1 M1,10 L3,10 M5,10 L7,10 M9,10 L11,10 M2,9 L2,11 M6,9 L6,11 M10,9 L10,11 M5,6 L7,6 M9,6 L11,6 M6,5 L6,7 M10,5 L10,7 M9,2 L11,2 M10,1 L10,3"
            Height="12"
            Stroke="{Binding}"
            StrokeThickness="1"
            Stretch="None"
            Width="12"/>
    </DataTemplate>

    <!-- /// -->

    <ContextMenu x:Key="{x:Static local:MainWindow.MainMenuKey}" x:Shared="False"
        Linq:XContextMenu.Above="{Data:Bind GlobalSource=MainViewModel}"
        Linq:XContextMenu.Below="{Data:Bind GlobalSource=MainViewModel}"
        Linq:XContextMenu.Header="{Markup:AssemblyTitle}"
        Linq:XContextMenu.HeaderIcon="{Markup:AssemblyIcon}"
        Linq:XMenuBase.GeneratorSource="{Data:Bind GlobalSource=MainViewModel}">
        <Linq:XContextMenu.AboveTemplate>
            <DataTemplate>
                <Grid>
                    <Button IsCancel="True"
                        Command="{Data:Bind GlobalSource=MainViewModel, Path=HideCommand}"
                        Linq:XButton.Image="{Markup:SmallImage Image=Hidden}"
                        ToolTip="{Markup:Loc Hide}"
                        Visibility="{Data:VisibilityBinding IsEnabled, From=Self}"/>
                    <Button IsDefault="True"
                        Command="{Data:Bind GlobalSource=MainViewModel, Path=ShowCommand}"
                        Linq:XButton.Image="{Markup:SmallImage Image=Visible}"
                        ToolTip="{Markup:Loc Show}"
                        Visibility="{Data:VisibilityBinding IsEnabled, From=Self}"/>
                </Grid>
            </DataTemplate>
        </Linq:XContextMenu.AboveTemplate>
        <Linq:XContextMenu.BelowTemplate>
            <DataTemplate>
                <Button Command="{Data:Bind GlobalSource=MainViewModel, Path=ForceExitCommand}"
                    Linq:XButton.Image="{Markup:SmallImage Image=X}"
                    Style="{StaticResource {x:Static Linq:XButton.BlackButton}}"
                    ToolTip="{Markup:Loc Exit}"/>
            </DataTemplate>
        </Linq:XContextMenu.BelowTemplate>
        <Linq:XContextMenu.HeaderIconTemplate>
            <DataTemplate>
                <Ellipse Height="16" Width="16">
                    <Ellipse.Fill>
                        <ImageBrush ImageSource="{Binding}"/>
                    </Ellipse.Fill>
                </Ellipse>
            </DataTemplate>
        </Linq:XContextMenu.HeaderIconTemplate>
    </ContextMenu>

    <!-- Window -->

    <!--
    <DataTemplate>
        <Image
            Height="16"
            Source="{Data:Ancestor Icon, {x:Type Window}}"
            Width="16"/>
    </DataTemplate>

    <DataTemplate>
        <ContentPresenter x:Name="PART_Icon" Content="{Markup:True}"
            Margin="5,0,0,0"
            Visibility="Collapsed"
            WindowChrome.IsHitTestVisibleInChrome="True"/>
        <DataTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Icon" Value="{x:Null}"/>
                    <Condition Property="Linq:XWindow.IconVisibility" Value="Visible"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Icon" Property="ContentTemplate"/>
                <Setter TargetName="PART_Icon" Property="Visibility" Value="Visible"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Linq:XWindow.Icon" Value="{x:Null}"/>
                    <Condition Property="Linq:XWindow.IconVisibility" Value="Visible"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Icon" Property="ContentTemplate"/>
                <Setter TargetName="PART_Icon" Property="Visibility" Value="Visible"/>
            </MultiTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    -->

    <DataTemplate x:Key="IconWithMenuTemplate">
        <local:ImageToggleButton
            IsHitTestVisible="True"
            WindowChrome.IsHitTestVisibleInChrome="True"
            Menu="{Data:Ancestor {x:Type Window}, Path=(Linq:XWindow.IconMenu)}"
            Source="{Data:Ancestor {x:Type Window}, Path=(Linq:XWindow.Icon)}"
            SourceSize="{Data:Ancestor {x:Type Window}, Path=(Linq:XWindow.IconSize)}"/>
    </DataTemplate>

    <DataTemplate x:Key="IconTemplate">
        <local:ImageElement
            Source="{Data:Ancestor {x:Type Window}, Path=(Linq:XWindow.Icon)}"
            SourceSize="{Data:Ancestor {x:Type Window}, Path=(Linq:XWindow.IconSize)}"/>
    </DataTemplate>

    <Style x:Key="{x:Type Window}" TargetType="{x:Type Window}">
        <Setter Property="AllowsTransparency" Value="True"/>
        <Setter Property="Background" Value="{local:ThemeKey WindowBackground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontFamily" Value="{Data:Options FontFamily}"/>
        <Setter Property="Foreground" Value="{local:ThemeKey Text}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Linq:XWindow.ButtonStyle" Value="{Data:Options WindowButtonStyle}"/>
        <Setter Property="Linq:XWindow.ContentStyle">
            <Setter.Value>
                <Style TargetType="{x:Type Border}">
                    <Setter Property="BorderBrush" Value="{local:ThemeKey WindowContentBorder}"/>
                    <Setter Property="BorderThickness" Value="0,1,0,0"/>
                    <Setter Property="Margin" Value="0,2,0,0"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XWindow.DialogBlur" Value="2000"/>
        <Setter Property="Linq:XWindow.DialogTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type Common:DialogReference}">
                    <local:DialogControl Content="{Binding}" Visibility="{Data:Bind Convert={x:Type Conversion:ObjectToVisibilityConverter}}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XWindow.DialogTransition" Value="Left"/>
        <Setter Property="Linq:XWindow.Extend" Value="True"/>
        <Setter Property="Linq:XWindow.Footer" Value="{Data:Self Path=(Linq:XWindow.FooterButtons)}"/>
        <Setter Property="Linq:XWindow.FooterTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:TopBorder
                        Background="{local:ThemeKey WindowFooterBackground}"
                        BorderBrush="{local:ThemeKey WindowFooterBorder}"
                        Padding="5">
                        <local:ButtonPresenter Content="{Binding}"/>
                    </local:TopBorder>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XWindow.HeaderButtonTemplate" Value="{Markup:EmptyTemplate}"/>
        <Setter Property="Linq:XWindow.NotificationTemplate">
            <Setter.Value>
                <DataTemplate DataType="Analytics:Notification">
                    <local:ResultControl Content="{Binding Result}"
                        Margin="0,5,0,0">
                        <local:ResultControl.Resources>
                            <Data:Reference x:Key="Notification" Data="{Binding}"/>
                        </local:ResultControl.Resources>
                        <local:ResultControl.ContentTemplate>
                            <DataTemplate DataType="SharedAnalytics:Result">
                                <Grid Linq:XGrid.Columns="*,Auto">
                                    <StackPanel
                                        Linq:XPanel.Spacing="0,0,0,5"
                                        Linq:XPanel.SpacingExcept="Last">
                                        <TextBlock
                                            FontWeight="Bold"
                                            Text="{Binding Data.Title, Source={StaticResource Notification}}"
                                            TextTrimming="CharacterEllipsis"/>
                                        <TextBlock 
                                            Opacity="0.5"
                                            Text="{Binding Text}"
                                            TextWrapping="Wrap"/>
                                        <local:ShadeLabel HorizontalAlignment="Left">
                                            <TextBlock FontStyle="Italic" Opacity="0.8" Text="{Data:Bind Data.Created, Convert=Conversion:RelativeTimeConverter, Source={StaticResource Notification}}"/>
                                        </local:ShadeLabel>
                                    </StackPanel>
                                    <local:ImageButton Grid.Column="1"
                                        Command="{x:Static Linq:XWindow.MarkNotificationCommand}"
                                        CommandParameter="{Binding Data, Source={StaticResource Notification}}"
                                        CommandTarget="{Data:Ancestor Window}"
                                        Margin="5,0,0,0"
                                        Source="{Markup:SmallImage Image=XRound}"
                                        ToolTip="{Markup:Loc Close}"/>
                                </Grid>
                            </DataTemplate>
                        </local:ResultControl.ContentTemplate>
                    </local:ResultControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XWindow.StartupLocation" Value="CenterScreen"/>
        <Setter Property="Linq:XWindow.TaskbarIconTemplate" Value="{Markup:EmptyTemplate}"/>
        <Setter Property="Linq:XWindow.TitleTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XWindow.Type" Value="Default"/>
        <Setter Property="local:ImageElement.Foreground" Value="{local:ThemeKey Text}"/>
        <Setter Property="Opacity" Value="0"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <ScaleTransform/>
            </Setter.Value>
        </Setter>
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
        <Setter Property="ShowInTaskbar" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Window">
                    <Border Linq:XElement.Name="{x:Static Linq:XWindow.BorderKey}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Border.Resources>
                            <Data:Reference x:Key="Window" Data="{Data:TemplatedParent}"/>
                        </Border.Resources>
                        <Grid>
                            <HeaderedContentControl 
                                Linq:XHeaderedContentControl.HeaderPlacement="{Data:TemplatedParent Path=(Linq:XWindow.HeaderPlacement)}"
                                Linq:XHeaderedContentControl.HeaderVisibility="{Data:TemplatedParent Path=(Linq:XWindow.HeaderVisibility)}"
                                Padding="0">
                                <!-- Header -->
                                <HeaderedContentControl.Header>
                                    <Grid x:Name="Header" Linq:XGrid.Columns="*,Auto" Background="{Data:TemplatedParent Path=(Linq:XWindow.HeaderBackground)}"
                                        Height="32">
                                        <ContentPresenter x:Name="HeaderContent" Content="{TemplateBinding DataContext}" Margin="5,0,0,0"/>

                                        <!-- Buttons -->
                                        <Grid Grid.Column="1"
                                            IsHitTestVisible="True"
                                            WindowChrome.IsHitTestVisibleInChrome="True"
                                            Linq:XGrid.AutoColumns="True"
                                            Linq:XGrid.Columns="Auto,Auto,Auto"
                                            Margin="1"
                                            Visibility="{Data:TemplatedParent Path=(Linq:XWindow.ButtonVisibility)}">
                                            <ItemsControl
                                                ItemsSource="{Data:TemplatedParent Path=(Linq:XWindow.HeaderButtons)}"
                                                Margin="1,0"
                                                WindowChrome.IsHitTestVisibleInChrome="True">
                                                <ItemsControl.ItemsPanel>
                                                    <ItemsPanelTemplate>
                                                        <StackPanel Orientation="Horizontal"/>
                                                    </ItemsPanelTemplate>
                                                </ItemsControl.ItemsPanel>
                                            </ItemsControl>

                                            <ContentPresenter ContentTemplate="{Data:TemplatedParent Path=(Linq:XWindow.HeaderButtonTemplate)}"
                                                Content="{Data:Bind GlobalSource=MainViewModel}"/>

                                            <ContentPresenter Content="{Data:TemplatedParent Path=(Linq:XWindow.ButtonStyle)}">
                                                <ContentPresenter.ContentTemplateSelector>
                                                    <local:KeyTemplateSelector>
                                                        <local:KeyTemplate DataKey="{x:Static local:ButtonStyle.Apple}">
                                                            <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,Auto,Auto" Linq:XPanel.Spacing="10,0,0,0" Linq:XPanel.SpacingExcept="First" Margin="5">
                                                                <Grid.Resources>
                                                                    <Style TargetType="Button" BasedOn="{StaticResource {x:Static Linq:XButton.DefaultStyleKey}}">
                                                                        <Setter Property="Background" Value="{Data:Self Foreground, Convert=Conversion:SolidColorBrushBrightnessConverter, Parameter=70}" />
                                                                        <Setter Property="Border.CornerRadius" Value="999"/>
                                                                        <Setter Property="BorderThickness" Value="0" />
                                                                        <Setter Property="Cursor" Value="Hand" />
                                                                        <Setter Property="Height" Value="12"/>
                                                                        <Setter Property="Padding" Value="0" />
                                                                        <Setter Property="Width" Value="12"/>
                                                                        <Setter Property="Window.IsHitTestVisible" Value="True"/>
                                                                        <Style.Triggers>
                                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                                <Setter Property="Background" Value="{Data:Self Foreground, Convert=Conversion:SolidColorBrushBrightnessConverter, Parameter=50}" />
                                                                            </Trigger>
                                                                            <Trigger Property="IsPressed" Value="True">
                                                                                <Setter Property="Background" Value="{Data:Self Foreground, Convert=Conversion:SolidColorBrushBrightnessConverter, Parameter=30}" />
                                                                            </Trigger>
                                                                        </Style.Triggers>
                                                                    </Style>
                                                                </Grid.Resources>
                                                                <Button Foreground="#FFAA44"
                                                                    Command="{x:Static Linq:XWindow.MinimizeCommand}" 
                                                                    CommandTarget="{Data:Ancestor Window}"
                                                                    ToolTip="{Markup:Loc Minimize}"/>
                                                                <Grid>
                                                                    <Button Foreground="#44AA44"
                                                                        Command="{x:Static Linq:XWindow.MaximizeCommand}" 
                                                                        CommandTarget="{Data:Ancestor Window}"
                                                                        ToolTip="{Markup:Loc Maximize}"
                                                                        Visibility="{Data:VisibilityBinding IsEnabled, From=Self}"/>
                                                                    <Button Foreground="#007ACC"
                                                                        Command="{x:Static Linq:XWindow.RestoreCommand}" 
                                                                        CommandTarget="{Data:Ancestor Window}"
                                                                        ToolTip="{Markup:Loc Restore}"
                                                                        Visibility="{Data:VisibilityBinding IsEnabled, From=Self}"/>
                                                                </Grid>
                                                                <Button Foreground="#CC3344"
                                                                    Command="{x:Static Linq:XWindow.CloseCommand}" 
                                                                    CommandTarget="{Data:Ancestor Window}"
                                                                    ToolTip="{Markup:Loc Close}"/>
                                                            </Grid>
                                                        </local:KeyTemplate>
                                                        <local:KeyTemplate DataKey="{x:Static local:ButtonStyle.Classic}">
                                                            <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,Auto,Auto">
                                                                <local:WindowButton
                                                                    Command="{x:Static Linq:XWindow.MinimizeCommand}"
                                                                    CommandTarget="{Binding Data, Source={StaticResource Window}}"
                                                                    Content="{Markup:SmallImage Minus.png}"
                                                                    ToolTip="{Markup:Loc Minimize}"/>
                                                                <Grid>
                                                                    <local:WindowButton
                                                                        Command="{x:Static Linq:XWindow.MaximizeCommand}"
                                                                        CommandTarget="{Binding Data, Source={StaticResource Window}}"
                                                                        Content="{Markup:SmallImage Maximize.png}"
                                                                        ToolTip="{Markup:Loc Maximize}"
                                                                        Visibility="{Data:VisibilityBinding IsEnabled, From=Self}"/>
                                                                    <local:WindowButton
                                                                        Command="{x:Static Linq:XWindow.RestoreCommand}"
                                                                        CommandTarget="{Binding Data, Source={StaticResource Window}}"
                                                                        Content="{Markup:SmallImage Restore.png}"
                                                                        ToolTip="{Markup:Loc Restore}"
                                                                        Visibility="{Data:VisibilityBinding IsEnabled, From=Self}"/>
                                                                </Grid>
                                                                <local:WindowButton
                                                                    Command="{x:Static Linq:XWindow.CloseCommand}"
                                                                    CommandTarget="{Binding Data, Source={StaticResource Window}}"
                                                                    Content="{Markup:SmallImage X.png}"
                                                                    ToolTip="{Markup:Loc Close}"/>
                                                            </Grid>
                                                        </local:KeyTemplate>
                                                        <local:KeyTemplate DataKey="{x:Static local:ButtonStyle.Simple}">
                                                            <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,Auto,Auto" Linq:XPanel.Spacing="0,0,5,0" Linq:XPanel.SpacingExcept="None">
                                                                <local:ImageButton
                                                                    Command="{x:Static Linq:XWindow.MinimizeCommand}"
                                                                    CommandTarget="{Binding Data, Source={StaticResource Window}}"
                                                                    Source="{Markup:SmallImage Minus.png}"
                                                                    ToolTip="{Markup:Loc Minimize}"/>
                                                                <Grid>
                                                                    <local:ImageButton
                                                                        Command="{x:Static Linq:XWindow.MaximizeCommand}"
                                                                        CommandTarget="{Binding Data, Source={StaticResource Window}}"
                                                                        Source="{Markup:SmallImage Maximize.png}"
                                                                        ToolTip="{Markup:Loc Maximize}"
                                                                        Visibility="{Data:VisibilityBinding IsEnabled, From=Self}"/>
                                                                    <local:ImageButton
                                                                        Command="{x:Static Linq:XWindow.RestoreCommand}"
                                                                        CommandTarget="{Binding Data, Source={StaticResource Window}}"
                                                                        Source="{Markup:SmallImage Restore.png}"
                                                                        ToolTip="{Markup:Loc Restore}"
                                                                        Visibility="{Data:VisibilityBinding IsEnabled, From=Self}"/>
                                                                </Grid>
                                                                <local:ImageButton
                                                                    Command="{x:Static Linq:XWindow.CloseCommand}"
                                                                    CommandTarget="{Binding Data, Source={StaticResource Window}}"
                                                                    Source="{Markup:SmallImage X.png}"
                                                                    ToolTip="{Markup:Loc Close}"/>
                                                            </Grid>
                                                        </local:KeyTemplate>
                                                    </local:KeyTemplateSelector>
                                                </ContentPresenter.ContentTemplateSelector>
                                            </ContentPresenter>
                                        </Grid>
                                    </Grid>
                                </HeaderedContentControl.Header>
                                <!-- Content -->
                                <Grid Linq:XGrid.Rows="*,Auto">
                                    <AdornerDecorator Grid.Row="0" x:Name="Content">
                                        <Border Padding="{TemplateBinding Padding}" Style="{Data:TemplatedParent Path=(Linq:XWindow.ContentStyle)}">
                                            <Grid>
                                                <ContentPresenter Content="{Markup:True}" ContentTemplate="{Data:TemplatedParent Path=(Linq:XWindow.TaskbarIconTemplate)}"/>
                                                <ContentPresenter ContentSource="Content"
                                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                                    <ContentPresenter.Style>
                                                        <Style TargetType="ContentPresenter">
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding Path=Data.(Linq:XWindow.IsDialogShowing), Source={StaticResource Window}}" Value="True">
                                                                    <Setter Property="Effect">
                                                                        <Setter.Value>
                                                                            <Effects:ZoomBlurEffect Amount="{Binding Path=Data.(Linq:XWindow.DialogBlur), Source={StaticResource Window}}"/>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </ContentPresenter.Style>
                                                </ContentPresenter>
                                            </Grid>
                                        </Border>
                                    </AdornerDecorator>

                                    <!-- Footer -->
                                    <ContentPresenter Grid.Row="1" x:Name="Footer"
                                        Content="{Data:TemplatedParent Path=(Linq:XWindow.Footer)}"
                                        ContentTemplate="{Data:TemplatedParent Path=(Linq:XWindow.FooterTemplate)}"
                                        ContentTemplateSelector="{Data:TemplatedParent Path=(Linq:XWindow.FooterTemplateSelector)}"
                                        Visibility="{Data:TemplatedParent Path=(Linq:XWindow.FooterVisibility)}"/>

                                    <!-- Resize grip -->
                                    <ContentPresenter Grid.Row="0" Grid.RowSpan="2" x:Name="PART_ResizeGrip"
                                        Content="{TemplateBinding Foreground}"
                                        ContentTemplate="{StaticResource {x:Static Linq:XWindow.GripTemplateKey}}"
                                        HorizontalAlignment="Right"
                                        IsHitTestVisible="False"
                                        Margin="0,0,2,2"
                                        VerticalAlignment="Bottom"
                                        Visibility="Collapsed"/>
                                </Grid>        
                            </HeaderedContentControl>

                            <local:NotificationPresenter Content="{Data:TemplatedParent Path=(Linq:XWindow.Notifications)}"/>
                            <local:DialogPresenter Content="{Data:TemplatedParent Path=(Linq:XWindow.Dialogs)}"
                                Linq:XElement.Name="{x:Static Linq:XWindow.DialogPresenterKey}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Linq:XWindow.Menu" Value="{x:Null}"/>
                            </MultiTrigger.Conditions>
                            <!--(1) Show icon and (2) title -->
                            <Setter TargetName="HeaderContent" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,*" Linq:XPanel.Spacing="0,0,5,0" Linq:XPanel.VerticalContentAlignment="Center">
                                            <ContentPresenter ContentTemplate="{StaticResource IconTemplate}"/>
                                            <ContentPresenter Content="{Data:Ancestor {x:Type Window}, Path=DataContext}" ContentTemplate="{Data:Ancestor {x:Type Window}, Path=(Linq:XWindow.TitleTemplate)}"/>
                                        </Grid>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Data:Self Convert=Conversion:IsNullConverter, Path=(Linq:XWindow.Menu)}" Value="False"/>
                                <Condition Binding="{Data:Self Path=(Linq:XWindow.MenuOrientation)}" Value="Horizontal"/>
                            </MultiDataTrigger.Conditions>
                            <!--(1) Show icon and (2) menu -->
                            <Setter TargetName="HeaderContent" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <ContentPresenter Content="{Data:Ancestor {x:Type Window}, Path=(Linq:XWindow.Menu)}" ContentTemplate="{Data:Ancestor {x:Type Window}, Path=(Linq:XWindow.MenuTemplate)}" VerticalAlignment="Center"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Data:Self Convert=Conversion:IsNullConverter, Path=(Linq:XWindow.Menu)}" Value="False"/>
                                <Condition Binding="{Data:Self Path=(Linq:XWindow.MenuOrientation)}" Value="Vertical"/>
                            </MultiDataTrigger.Conditions>
                            <!--(1) Show icon (with menu) and (2) title -->
                            <Setter TargetName="HeaderContent" Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <Grid Linq:XGrid.AutoColumns="True" Linq:XGrid.Columns="Auto,*" Linq:XPanel.Spacing="0,0,5,0" Linq:XPanel.VerticalContentAlignment="Center">
                                            <ContentPresenter ContentTemplate="{StaticResource IconWithMenuTemplate}"/>
                                            <ContentPresenter Content="{Data:Ancestor {x:Type Window}, Path=DataContext}" ContentTemplate="{Data:Ancestor {x:Type Window}, Path=(Linq:XWindow.TitleTemplate)}"/>
                                        </Grid>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                                <Condition Property="WindowState" Value="Normal"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ResizeGrip" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="TextOptions.TextFormattingMode" Value="Display"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome
                    CaptionHeight="32"
                    CornerRadius="0"
                    GlassFrameThickness="0,0,0,1"
                    ResizeBorderThickness="5"/>
            </Setter.Value>
        </Setter>
        <Setter Property="WindowStyle" Value="None"/>
        <Style.Triggers>
            <EventTrigger RoutedEvent="Loaded">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Duration="0:0:0.6" From="0" To="1" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                            <DoubleAnimation.EasingFunction>
                                <SineEase EasingMode="EaseOut"/>
                            </DoubleAnimation.EasingFunction>
                        </DoubleAnimation>
                        <DoubleAnimation Duration="0:0:0.6" From="0" To="1" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                            <DoubleAnimation.EasingFunction>
                                <SineEase EasingMode="EaseOut"/>
                            </DoubleAnimation.EasingFunction>
                        </DoubleAnimation>
                        <DoubleAnimation Duration="0:0:0.8" From="0" To="1" Storyboard.TargetProperty="Opacity"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <!-- /// -->
            <Trigger Property="IsActive" Value="True">
                <Setter Property="BorderBrush" Value="{local:ThemeKey WindowActiveBorder}"/>
            </Trigger>
            <Trigger Property="IsActive" Value="False">
                <Setter Property="BorderBrush" Value="{local:ThemeKey WindowBorder}"/>
            </Trigger>
            <!-- /// -->
            <Trigger Property="Linq:XWindow.Type" Value="Blank">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Window">
                            <Grid>
                                <Grid.Resources>
                                    <Data:Reference x:Key="Window" Data="{Data:TemplatedParent}"/>
                                </Grid.Resources>
                                <ContentPresenter Content="{Data:Bind GlobalSource=MainViewModel}" ContentTemplate="{Data:TemplatedParent Path=(Linq:XWindow.TaskbarIconTemplate)}"/>
                                <AdornerDecorator>
                                    <ContentPresenter x:Name="Content">
                                        <ContentPresenter.Style>
                                            <Style TargetType="ContentPresenter">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Path=Data.(Linq:XWindow.IsDialogShowing), Source={StaticResource Window}}" Value="True">
                                                        <Setter Property="Effect">
                                                            <Setter.Value>
                                                                <Effects:ZoomBlurEffect Amount="{Binding Path=Data.(Linq:XWindow.DialogBlur), Source={StaticResource Window}}"/>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </ContentPresenter.Style>
                                    </ContentPresenter>
                                </AdornerDecorator>
                                <local:NotificationPresenter 
                                    Content="{Data:TemplatedParent Path=(Linq:XWindow.Notifications)}"/>
                                <local:DialogPresenter x:Name="Dialog" Linq:XElement.Name="{x:Static Linq:XWindow.DialogPresenterKey}"
                                    Content="{Data:TemplatedParent Path=(Linq:XWindow.Dialogs)}"/>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="Linq:XWindow.Type" Value="Tool">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Window"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- MainWindow -->
    
    <Style x:Key="{x:Type local:MainWindow}" TargetType="{x:Type local:MainWindow}" BasedOn="{StaticResource {x:Type Window}}">
        <Setter Property="Height" Value="{Data:Options WindowHeight, Mode=TwoWay}"/>
        <Setter Property="Linq:XWindow.ButtonStyle" Value="{Data:Options WindowButtonStyle}"/>
        <Setter Property="Linq:XWindow.Footer" Value="{Data:Bind GlobalSource=MainViewModel}"/>
        <Setter Property="Linq:XWindow.FooterTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:TopBorder
                        Background="{local:ThemeKey WindowFooterBackground}"
                        BorderBrush="{local:ThemeKey WindowFooterBorder}"
                        Padding="5"
                        Visibility="{Data:Bind Convert=Conversion:ObjectHasMemberWithAttributeVisibilityConverter, Parameter=Core:FooterAttribute}">
                        <local:MemberGrid Source="{local:SourceBinding Core:FooterAttribute}" Orientation="Horizontal"/>
                    </local:TopBorder>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XWindow.FooterVisibility" Value="{Data:Options FooterVisibility, Convert=Conversion:BooleanToVisibilityConverter}"/>
        <Setter Property="Linq:XWindow.HeaderButtonTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:MemberGrid Source="{local:SourceBinding Core:HeaderItemAttribute, GlobalSource=MainViewModel}" 
                        GroupName="None"
                        IsHitTestVisible="True"
                        WindowChrome.IsHitTestVisibleInChrome="True"
                        Linq:XItemsControl.EmptyTemplate="{Markup:EmptyTemplate}"
                        Orientation="Horizontal"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XWindow.HeaderPlacement" Value="{Data:Options HeaderPlacement}"/>
        <Setter Property="Linq:XWindow.HeaderVisibility" Value="{Data:Options HeaderVisibility, Convert=Conversion:BooleanToVisibilityConverter}"/>
        <Setter Property="Linq:XWindow.Icon" Value="{Markup:Image Logo-Accent.png, Current}"/>
        <Setter Property="Linq:XWindow.IconMenu" Value="{StaticResource {x:Static local:MainWindow.MainMenuKey}}"/>
        <Setter Property="Linq:XWindow.IconSize" Value="16,16"/>
        <Setter Property="Linq:XWindow.Menu" Value="{Data:Bind GlobalSource=MainViewModel}"/>
        <Setter Property="Linq:XWindow.MenuOrientation" Value="{Data:Options WindowMenuOrientation}"/>
        <Setter Property="Linq:XWindow.MenuTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Menu Linq:XMenuBase.GeneratorSource="{Binding}"
                        HorizontalAlignment="Left"
                        IsHitTestVisible="True"
                        Linq:XMenu.TopLevelIconVisibility="{Data:Options WindowMenuShowTopLevelIcons, Convert=BooleanToVisibilityConverter}"
                        WindowChrome.IsHitTestVisibleInChrome="True"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Linq:XWindow.TaskbarIconTemplate">
            <Setter.Value>
                <DataTemplate>
                    <h:TaskbarIcon
                        ContextMenu="{StaticResource {x:Static local:MainWindow.MainMenuKey}}"
                        IconSource="{Markup:Image Logo.ico, Current}" 
                        Linq:XElement.Reference="{Data:Bind GlobalSource=MainViewModel}"
                        Linq:XElement.ReferenceKey="{x:Static Models:MainViewModel.TaskbarIconKey}"
                        MenuActivation="LeftOrRightClick"
                        ToolTipText="{Markup:AssemblyProduct}"
                        Visibility="{Data:Options TaskbarIconVisibility, Convert={x:Type Conversion:BooleanToVisibilityConverter}}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ResizeMode" Value="CanResizeWithGrip"/>
        <Setter Property="Width" Value="{Data:Options WindowWidth, Mode=TwoWay}"/>
        <Setter Property="WindowState" Value="{Data:Options WindowState, Mode=TwoWay}"/>
    </Style>

    <!-- SplashWindow -->

    <DropShadowEffect x:Key="{x:Static local:SplashWindow.DropShadowEffectKey}"
        BlurRadius="20" Color="{local:ThemeKey PopupDropShadow}" Opacity="0.9" ShadowDepth="0"/>
    
    <Style x:Key="{x:Type local:SplashWindow}" TargetType="{x:Type local:SplashWindow}" BasedOn="{StaticResource {x:Type Window}}">
        <Setter Property="Image" Value="{Markup:Image Splash.png}"/>
        <Setter Property="ImageHeight" Value="{x:Static local:SplashWindow.DefaultImageHeight}"/>
        <Setter Property="ImageWidth" Value="{x:Static local:SplashWindow.DefaultImageWidth}"/>
        <Setter Property="ImageTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Image RenderOptions.BitmapScalingMode="NearestNeighbor" Source="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Padding" Value="20"/>
        <Setter Property="ResizeMode" Value="NoResize"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:SplashWindow}">
                    <Border Padding="{TemplateBinding Padding}">
                        <local:ClipBorder  Effect="{StaticResource {x:Static local:SplashWindow.DropShadowEffectKey}}" Height="{TemplateBinding ImageHeight}" Width="{TemplateBinding ImageWidth}">
                            <ContentPresenter ContentSource="Content"/>
                        </local:ClipBorder>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="SizeToContent" Value="WidthAndHeight"/>
        <Setter Property="WindowState" Value="Normal"/>
        <Setter Property="WindowStyle" Value="None"/>
    </Style>
</ResourceDictionary>